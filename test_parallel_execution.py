#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
"""

import asyncio
import time
from datetime import datetime

async def mock_generation(task_id: int, delay: float = 1.0):
    """–ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    start = time.time()
    print(f"  üöÄ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–ø—É—â–µ–Ω–∞ –≤ {datetime.now().strftime('%H:%M:%S.%f')[:-3]}")
    await asyncio.sleep(delay)
    elapsed = time.time() - start
    print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.2f}—Å")
    return f"result_{task_id}"


async def test_sequential():
    """–¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)"""
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ì–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –∫–æ–¥):")
    print("=" * 60)

    start = time.time()
    results = []

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    for i in range(1, 4):
        result = await mock_generation(i, delay=0.5)
        results.append(result)

    total_time = time.time() - start
    print(f"\nüìä –ò—Ç–æ–≥–æ: {len(results)} –∑–∞–¥–∞—á –∑–∞ {total_time:.2f}—Å")
    print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~1.5—Å (3 –∑–∞–¥–∞—á–∏ √ó 0.5—Å)")
    return total_time


async def test_parallel():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–π –∫–æ–¥)"""
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–π –∫–æ–¥ —Å asyncio.gather):")
    print("=" * 60)

    start = time.time()

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—É—Ç–∏–Ω
    tasks = [mock_generation(i, delay=0.5) for i in range(1, 4)]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å asyncio.gather
    results = await asyncio.gather(*tasks)

    total_time = time.time() - start
    print(f"\nüìä –ò—Ç–æ–≥–æ: {len(results)} –∑–∞–¥–∞—á –∑–∞ {total_time:.2f}—Å")
    print(f"‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~0.5—Å (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)")
    return total_time


async def main():
    print("\n" + "=" * 60)
    print("  –¢–ï–°–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–§–ò–õ–ï–ô")
    print("=" * 60)

    seq_time = await test_sequential()
    par_time = await test_parallel()

    print("\n" + "=" * 60)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    print(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {seq_time:.2f}—Å")
    print(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:     {par_time:.2f}—Å")

    speedup = seq_time / par_time
    print(f"\nüöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")

    if speedup > 2.5:
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print(f"   –í—ã–∏–≥—Ä—ã—à –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {((speedup - 1) * 100):.0f}%")
    else:
        print("‚ö†Ô∏è  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –¥–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è")

    print("\n" + "=" * 60)
    print("üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ:")
    print("   - –ü–∞–∫–µ—Ç –∏–∑ 10 –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print(f"   - –°—Ç–∞—Ä—ã–π –∫–æ–¥: ~{10 * 95:.0f}—Å (10 √ó 95—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)")
    print(f"   - –ù–æ–≤—ã–π –∫–æ–¥:  ~95—Å (–≤—Å–µ 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)")
    print(f"   - –£—Å–∫–æ—Ä–µ–Ω–∏–µ:  ~10x! üéâ")
    print("=" * 60 + "\n")


if __name__ == "__main__":
    asyncio.run(main())
