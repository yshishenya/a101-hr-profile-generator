#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 6-—É—Ä–æ–≤–Ω–µ–≤–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
"""

import sys
import os
sys.path.append(os.path.abspath('.'))

from backend.core.data_loader import DataLoader
from backend.core.organization_cache import organization_cache
import json


def test_hierarchy_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–ª—É–±–∏–Ω"""

    data_loader = DataLoader()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω—ã (–†–ï–ê–õ–¨–ù–´–ï –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–´ –∏–∑ structure.json)
    test_cases = [
        # –£—Ä–æ–≤–µ–Ω—å 1 (—Ç–æ–ª—å–∫–æ –±–ª–æ–∫)
        {
            "department": "–ë–ª–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "position": "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "expected_level": 1
        },

        # –£—Ä–æ–≤–µ–Ω—å 2 (–±–ª–æ–∫ + –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç)
        {
            "department": "–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "position": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "expected_level": 2
        },

        # –£—Ä–æ–≤–µ–Ω—å 3 (–±–ª–æ–∫ + –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
        {
            "department": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "position": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "expected_level": 3
        },

        # –£—Ä–æ–≤–µ–Ω—å 4 (–±–ª–æ–∫ + –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + –æ—Ç–¥–µ–ª)
        {
            "department": "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "position": "–ê–Ω–∞–ª–∏—Ç–∏–∫ BI",
            "expected_level": 4
        },

        # –£—Ä–æ–≤–µ–Ω—å 5 (5 —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏)
        {
            "department": "–û—Ç–¥–µ–ª –∞—Ä–µ–Ω–¥—ã",
            "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "expected_level": 5
        },

        # –£—Ä–æ–≤–µ–Ω—å 6 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞)
        {
            "department": "–ì—Ä—É–ø–ø–∞ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂",
            "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
            "expected_level": 6
        }
    ]

    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 6-–£–†–û–í–ù–ï–í–û–ô –ò–ï–†–ê–†–•–ò–ò\n" + "="*50)

    all_passed = True

    for i, test_case in enumerate(test_cases, 1):
        department = test_case["department"]
        position = test_case["position"]
        expected_level = test_case["expected_level"]

        print(f"\nüìã –¢–ï–°–¢ {i}: {department}")
        print(f"   –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: {expected_level}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Langfuse
            variables = data_loader.prepare_langfuse_variables(department, position)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            hierarchy_level = variables.get("hierarchy_level", 0)
            business_block = variables.get("business_block", "")
            department_unit = variables.get("department_unit", "")
            section_unit = variables.get("section_unit", "")
            group_unit = variables.get("group_unit", "")
            sub_section_unit = variables.get("sub_section_unit", "")
            final_group_unit = variables.get("final_group_unit", "")
            full_hierarchy_path = variables.get("full_hierarchy_path", "")

            print(f"   ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: {hierarchy_level}")
            print(f"   üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {full_hierarchy_path}")
            print(f"   üè¢ –ë–ª–æ–∫: '{business_block}'")
            print(f"   üè¨ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: '{department_unit}'")
            print(f"   üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/–û—Ç–¥–µ–ª: '{section_unit}'")
            print(f"   üìÇ –û—Ç–¥–µ–ª: '{group_unit}'")
            print(f"   üìÅ –ü–æ–¥-–æ—Ç–¥–µ–ª: '{sub_section_unit}'")
            print(f"   üë• –ì—Ä—É–ø–ø–∞: '{final_group_unit}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è
            if hierarchy_level != expected_level:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è —É—Ä–æ–≤–µ–Ω—å {expected_level}, –ø–æ–ª—É—á–µ–Ω {hierarchy_level}")
                all_passed = False
            else:
                print(f"   ‚úÖ –£–°–ü–ï–•: –£—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            level_checks = [
                (1, business_block, "business_block –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 1+"),
                (2, department_unit, "department_unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 2+"),
                (3, section_unit, "section_unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 3+"),
                (4, group_unit, "group_unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 4+"),
                (5, sub_section_unit, "sub_section_unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 5+"),
                (6, final_group_unit, "final_group_unit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 6+")
            ]

            for level, value, message in level_checks:
                if hierarchy_level >= level and not value:
                    print(f"   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {message}")

        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            all_passed = False

    print(f"\n" + "="*50)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
    print("="*50)

    return all_passed


def test_organization_cache_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –∫–µ—à–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""

    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –í –û–†–ì–ê–ù–ò–ó–ê–¶–ò–û–ù–ù–û–ú –ö–ï–®–ï\n" + "="*50)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    search_queries = [
        "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "–û—Ç–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏",
        "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
        "–î–ò–¢"  # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ
    ]

    for query in search_queries:
        print(f"\nüîé –ü–æ–∏—Å–∫: '{query}'")

        # –ò—â–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        path = organization_cache.find_department_path(query)

        if path:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å: {' ‚Üí '.join(path)}")
            print(f"   üìä –£—Ä–æ–≤–µ–Ω—å: {len(path)}")
        else:
            print(f"   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–î–î–ï–†–ñ–ö–ò 6-–£–†–û–í–ù–ï–í–û–ô –ò–ï–†–ê–†–•–ò–ò")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success1 = test_hierarchy_extraction()
    test_organization_cache_search()

    if success1:
        print("\nüéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        print("\n‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò –í –û–°–ù–û–í–ù–´–• –¢–ï–°–¢–ê–•")
        sys.exit(1)