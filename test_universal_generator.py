#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –ü–†–û–§–ò–õ–ï–ô –ê101

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:
1. –ó–∞–≥—Ä—É–∑–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
2. –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–æ–≤
3. –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π
4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
"""

import sys
import os
sys.path.append(os.path.abspath('.'))

from scripts.universal_profile_generator import (
    BusinessUnitSelector,
    UniversalPositionsExtractor,
    UniversalProgressManager
)

def test_business_unit_selector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢ 1: BusinessUnitSelector")
    print("-" * 40)

    selector = BusinessUnitSelector()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not selector.load_organization_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(selector.all_units)} –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–æ–≤")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(selector.searchable_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
    by_levels = selector._group_by_levels()

    print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
    for level in sorted(by_levels.keys()):
        count = len(by_levels[level])
        print(f"   –£—Ä–æ–≤–µ–Ω—å {level + 1}: {count} —é–Ω–∏—Ç–æ–≤")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π
    test_paths = [
        "–ë–ª–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",  # –£—Ä–æ–≤–µ–Ω—å 1
        "–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",  # –£—Ä–æ–≤–µ–Ω—å 2
        "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",  # –£—Ä–æ–≤–µ–Ω—å 4
        "–ì—Ä—É–ø–ø–∞ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂"  # –£—Ä–æ–≤–µ–Ω—å 6
    ]

    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π:")
    for path in test_paths:
        total = selector._calculate_total_positions(path)
        unit_data = selector.all_units.get(path, {})
        direct = len(unit_data.get('positions', []))
        print(f"   {path}: {direct} –ø—Ä—è–º—ã—Ö + {total - direct} –¥–æ—á–µ—Ä–Ω–∏—Ö = {total} –≤—Å–µ–≥–æ")

    return True


def test_positions_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π"""
    print("\nüß™ –¢–ï–°–¢ 2: UniversalPositionsExtractor")
    print("-" * 40)

    extractor = UniversalPositionsExtractor()
    extractor.load_organization_data()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    test_units = [
        ("–ë–ª–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ë–ª–æ–∫"),
        ("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"),
        ("–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ì—Ä—É–ø–ø–∞"),
        ("–ì—Ä—É–ø–ø–∞ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂", "–ö–æ–Ω–µ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    ]

    for unit_path, unit_type in test_units:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {unit_type}: {unit_path}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
        unit_info = extractor.get_unit_hierarchy_info(unit_path)
        if unit_info:
            print(f"   üìä –£—Ä–æ–≤–µ–Ω—å: {unit_info.get('level', 'N/A')}")
            print(f"   üë• –ü–æ–∑–∏—Ü–∏–π –≤ —é–Ω–∏—Ç–µ: {unit_info.get('positions_count', 0)}")
            print(f"   üè¢ –î–æ—á–µ—Ä–Ω–∏—Ö —é–Ω–∏—Ç–æ–≤: {unit_info.get('children_count', 0)}")
            print(f"   üßë‚Äçüíº –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: {unit_info.get('headcount', 'N/A')}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions_with_children = extractor.extract_positions_from_unit(unit_path, include_children=True)
        positions_only = extractor.extract_positions_from_unit(unit_path, include_children=False)

        print(f"   üìã –ü–æ–∑–∏—Ü–∏–π —Ç–æ–ª—å–∫–æ –≤ —é–Ω–∏—Ç–µ: {len(positions_only)}")
        print(f"   üìà –ü–æ–∑–∏—Ü–∏–π —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏: {len(positions_with_children)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
        if positions_with_children:
            print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π:")
            for dept, pos in positions_with_children[:3]:
                dept_short = dept.split('/')[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Ç–∏
                print(f"      ‚Ä¢ {pos} ({dept_short})")
            if len(positions_with_children) > 3:
                print(f"      ... –∏ –µ—â–µ {len(positions_with_children) - 3}")

    return True


def test_progress_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print("\nüß™ –¢–ï–°–¢ 3: UniversalProgressManager")
    print("-" * 40)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    test_progress_file = "test_progress.json"

    try:
        progress_manager = UniversalProgressManager(test_progress_file)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —é–Ω–∏—Ç–∞
        test_unit_path = "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        test_unit_info = {
            "name": "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "level": 3,
            "positions_count": 3
        }

        progress_manager.set_selected_unit(test_unit_path, test_unit_info)
        progress_manager.reset_progress_for_unit(test_unit_path, 10, test_unit_info)

        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–Ω–∏—Ç: {progress_manager.progress['selected_unit']}")
        print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {progress_manager.progress['total_positions']}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞—á
        progress_manager.progress["completed_positions"].append({
            "department": test_unit_path,
            "position": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è 1",
            "task_id": "test_task_1",
            "completed_at": "2025-09-25T10:00:00"
        })

        progress_manager.progress["failed_positions"].append({
            "department": test_unit_path,
            "position": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è 2",
            "task_id": "test_task_2",
            "error": "Test error",
            "failed_at": "2025-09-25T10:01:00"
        })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É
        print("\nüìä –¢–µ—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
        progress_manager.print_progress_summary()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫—É
        progress_manager.save_progress()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        new_progress_manager = UniversalProgressManager(test_progress_file)
        loaded_progress = new_progress_manager.load_progress()

        if loaded_progress.get("selected_unit") == test_unit_path:
            print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            return False

    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_progress_file):
            os.remove(test_progress_file)

    return True


def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–ï–°–¢ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
    print("-" * 40)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    selector = BusinessUnitSelector()
    extractor = UniversalPositionsExtractor()
    progress_manager = UniversalProgressManager()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if not selector.load_organization_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ selector")
        return False

    extractor.load_organization_data()

    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —é–Ω–∏—Ç (—Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    test_unit = "–ë–ª–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –ø–æ –ø—Ä–∞–≤–æ–≤–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"  # –£—Ä–æ–≤–µ–Ω—å 1, 9 –ø–æ–∑–∏—Ü–∏–π

    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π —é–Ω–∏—Ç: {test_unit}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
    unit_info = extractor.get_unit_hierarchy_info(test_unit)
    if not unit_info:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —é–Ω–∏—Ç: {test_unit}")
        return False

    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:")
    print(f"   üìä –£—Ä–æ–≤–µ–Ω—å: {unit_info.get('level')}")
    print(f"   üë• –ü–æ–∑–∏—Ü–∏–π: {unit_info.get('positions_count')}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    all_positions = extractor.extract_positions_from_unit(test_unit, include_children=True)

    if not all_positions:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –≤ —é–Ω–∏—Ç–µ {test_unit}")
        return False

    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(all_positions)} –ø–æ–∑–∏—Ü–∏–π")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_manager.set_selected_unit(test_unit, unit_info)
    progress_manager.reset_progress_for_unit(test_unit, len(all_positions), unit_info)

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    remaining = progress_manager.get_remaining_positions(all_positions)

    if len(remaining) != len(all_positions):
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ remaining positions")
        return False

    print(f"‚úÖ –õ–æ–≥–∏–∫–∞ remaining positions —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—á–µ—Ç —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π
    calculated_total = selector._calculate_total_positions(test_unit)
    actual_total = len(all_positions)

    if calculated_total == actual_total:
        print(f"‚úÖ –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {calculated_total}")
    else:
        print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ø–æ–¥—Å—á–µ—Ç–µ: {calculated_total} vs {actual_total}")
        return False

    return True


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ì–ï–ù–ï–†–ê–¢–û–†–ê –ü–†–û–§–ò–õ–ï–ô –ê101")
    print("=" * 60)

    tests = [
        ("BusinessUnitSelector", test_business_unit_selector),
        ("UniversalPositionsExtractor", test_positions_extractor),
        ("UniversalProgressManager", test_progress_manager),
        ("Integration Test", test_integration)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")

    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)