"""
@doc
GeneratorPage - –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π.

–°–æ–±–∏—Ä–∞–µ—Ç –≤–º–µ—Å—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
- SearchComponent: –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
- GeneratorComponent: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π
- ProfileViewerComponent: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
- FilesManagerComponent: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π.

Examples:
  python> generator_page = GeneratorPage(api_client)
  python> await generator_page.render()
"""

import asyncio
import logging
from typing import Dict, Any

from nicegui import ui, app

try:
    from ..core.error_recovery import ErrorRecoveryCoordinator
except ImportError:
    try:
        from frontend.core.error_recovery import ErrorRecoveryCoordinator
    except ImportError:
        # Error recovery is optional - system can work without it
        ErrorRecoveryCoordinator = None

try:
    # Relative imports –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ –º–æ–¥—É–ª—å
    from ..services.api_client import APIClient
    from ..components.core.search_component import SearchComponent
    from ..components.core.generator_component import GeneratorComponent
    from ..components.core.profile_viewer_component import ProfileViewerComponent
    from ..components.core.files_manager_component import FilesManagerComponent
except ImportError:
    # Absolute imports –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    from services.api_client import APIClient
    from components.core.search_component import SearchComponent
    from components.core.generator_component import GeneratorComponent
    from components.core.profile_viewer_component import ProfileViewerComponent
    from components.core.files_manager_component import FilesManagerComponent

logger = logging.getLogger(__name__)


class GeneratorPage:
    """
    @doc
    –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è –º–æ–¥—É–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
    """

    def __init__(self, api_client: APIClient):
        self.api_client = api_client

        # Initialize error recovery coordinator (optional)
        self.error_recovery_coordinator = None
        if ErrorRecoveryCoordinator is not None:
            try:
                self.error_recovery_coordinator = ErrorRecoveryCoordinator(api_client)
                logger.info("Error recovery coordinator initialized successfully")
            except Exception as e:
                logger.warning(
                    f"Error recovery coordinator initialization failed: {e}. Running in basic mode."
                )
                self.error_recovery_coordinator = None
        else:
            logger.info("Error recovery not available - running in basic mode")

        self.recovery_active = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å error recovery (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        self.search = SearchComponent(api_client, self.error_recovery_coordinator)
        self.generator = GeneratorComponent(api_client, self.error_recovery_coordinator)
        self.viewer = ProfileViewerComponent(
            api_client, self.error_recovery_coordinator
        )
        self.files = FilesManagerComponent(api_client, self.error_recovery_coordinator)

        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
        self._connect_components()

    def _connect_components(self):
        """–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è backward compatibility)
        logger.info(
            f"üî• DEBUG: Connecting search.on_position_selected to generator.set_position"
        )
        self.search.on_position_selected = self.generator.set_position
        logger.info(
            f"üî• DEBUG: Connected search.on_position_selected = {self.search.on_position_selected}"
        )

        logger.info(
            f"üî• DEBUG: Connecting search.on_profiles_found to viewer.show_profile_list"
        )
        self.search.on_profiles_found = self.viewer.show_profile_list
        logger.info(
            f"üî• DEBUG: Connected search.on_profiles_found = {self.search.on_profiles_found}"
        )

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ProfileViewerComponent —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        self.viewer.on_download_request = (
            self.files.download_file
        )  # –ù–æ–≤—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è SearchComponent —Å FilesManagerComponent –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.search.on_download_request = self.files.download_file

        # –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(self.viewer, "on_tab_switch"):
            self.viewer.on_tab_switch = self._handle_tab_switch

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if hasattr(self.generator, "on_generation_complete"):
            self.generator.on_generation_complete = self._handle_generation_complete

        # Enhanced error recovery event connections
        self._setup_recovery_monitoring()

        logger.info(
            "Generator components connected successfully with enhanced events and error recovery"
        )

    def _render_compact_welcome_banner(self):
        """
        @doc
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∏—è.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–º—É –≥–∏–¥—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º—É–º —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (~3% –≤–º–µ—Å—Ç–æ 20%).

        Examples:
          python> page._render_compact_welcome_banner()
          python> # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω
        """
        # Check if banner was dismissed
        welcome_dismissed = app.storage.user.get("welcome_dismissed", False)

        if not welcome_dismissed:
            # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ui.card (–∏–º–∏—Ç–∞—Ü–∏—è ui.banner)
            with ui.card().classes(
                "w-full bg-blue-50 border-l-4 border-blue-500 mb-2"
            ) as banner:
                with ui.row().classes("w-full items-center justify-between p-2"):
                    with ui.row().classes("items-center gap-2"):
                        ui.icon("info", size="1.2rem").classes("text-blue-600")
                        ui.label(
                            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ A101 HR Profile Generator! –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò"
                        ).classes("text-body1 text-blue-800")

                    with ui.row().classes("items-center gap-1"):
                        ui.button(
                            "–ë—ã—Å—Ç—Ä—ã–π –≥–∏–¥",
                            icon="help",
                            on_click=self._show_detailed_guide,
                        ).props("flat dense size=sm color=primary")
                        ui.button(
                            icon="close",
                            on_click=lambda: self._dismiss_welcome_banner(banner),
                        ).props("flat dense size=sm")

    def _dismiss_welcome_banner(self, banner):
        """
        @doc
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è.

        Args:
            banner: UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–∞–Ω–Ω–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Examples:
          python> page._dismiss_welcome_banner(banner_component)
          python> # –ë–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        app.storage.user["welcome_dismissed"] = True
        banner.delete()
        logger.info("Welcome banner dismissed by user")

    def _show_detailed_guide(self):
        """
        @doc
        –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≥–∏–¥–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥–µ.

        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –±–µ–∑ –∑–∞–Ω—è—Ç–∏—è
        –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Examples:
          python> page._show_detailed_guide()
          python> # –î–µ—Ç–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ–∫–∞–∑–∞–Ω –≤ –¥–∏–∞–ª–æ–≥–µ
        """
        with ui.dialog().props("maximized") as dialog:
            with ui.card().classes("w-full max-w-4xl"):
                with ui.card_section():
                    with ui.row().classes("items-center justify-between"):
                        ui.label(
                            "üöÄ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é A101 HR Profile Generator"
                        ).classes("text-h5 font-bold")
                        ui.button(icon="close", on_click=dialog.close).props(
                            "flat round"
                        )

                    ui.separator()

                    # Detailed guide content
                    with ui.row().classes("w-full gap-8 mt-6"):
                        with ui.column().classes("flex-1"):
                            ui.label("üîç –®–∞–≥ 1: –ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏").classes(
                                "text-h6 font-medium mb-2"
                            )
                            ui.label(
                                "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"
                            ).classes("text-body1 mb-1")
                            ui.label("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã").classes(
                                "text-body1 mb-1"
                            )
                            ui.label("‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç").classes(
                                "text-body1 mb-4"
                            )

                        with ui.column().classes("flex-1"):
                            ui.label("üöÄ –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è").classes(
                                "text-h6 font-medium mb-2"
                            )
                            ui.label(
                                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'"
                            ).classes("text-body1 mb-1")
                            ui.label(
                                "‚Ä¢ –ò–ò —Å–æ–∑–¥–∞—Å—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
                            ).classes("text-body1 mb-1")
                            ui.label("‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã").classes(
                                "text-body1 mb-4"
                            )

                        with ui.column().classes("flex-1"):
                            ui.label("üì• –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç").classes(
                                "text-h6 font-medium mb-2"
                            )
                            ui.label("‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å").classes(
                                "text-body1 mb-1"
                            )
                            ui.label("‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏–ª–∏ Markdown").classes(
                                "text-body1 mb-1"
                            )
                            ui.label("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–±–æ—Ç–µ HR").classes(
                                "text-body1 mb-4"
                            )

        dialog.open()

    async def render(self):
        """
        @doc
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX.

        –ù–æ–≤—ã–π layout:
        - 3% —ç–∫—Ä–∞–Ω–∞: –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (–∑–∞–∫—Ä—ã–≤–∞–µ–º—ã–π)
        - 15% —ç–∫—Ä–∞–Ω–∞: —Å–µ–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        - 60% —ç–∫—Ä–∞–Ω–∞: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        - 22% —ç–∫—Ä–∞–Ω–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–µ)

        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ UI (< 300ms) –∏ –ª—É—á—à–∏–π UX.
        """
        with ui.column().classes("w-full gap-4"):
            # 1. –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (3% —ç–∫—Ä–∞–Ω–∞)
            self._render_compact_welcome_banner()

            # 2. –°–µ–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ (15% —ç–∫—Ä–∞–Ω–∞)
            await self.search.render_search_section()

            # 3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (60% —ç–∫—Ä–∞–Ω–∞)
            with ui.card().classes("w-full").style("min-height: 60vh"):
                with ui.card_section():
                    with ui.row().classes("w-full gap-4"):
                        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (70% —à–∏—Ä–∏–Ω—ã)
                        with ui.column().classes("w-2/3 gap-4"):
                            await self.generator.render_generator_section()

                        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è (30% —à–∏—Ä–∏–Ω—ã)
                        with ui.column().classes("w-1/3"):
                            self.viewer.render_profile_viewer()

            # 4. –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–∞—è, 22% —ç–∫—Ä–∞–Ω–∞)
            with ui.expansion(
                "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏", icon="folder", value=False
            ).classes("w-full"):
                await self.files.render_files_section()

        # üöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ UI
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (< 300ms)
        asyncio.create_task(self._background_data_loading())

    async def reload_search_data(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞."""
        await self.search.force_reload_data()

    async def _background_data_loading(self):
        """
        @doc
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ (4376 –ø–æ–∑–∏—Ü–∏–π) –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ UI,
        –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (< 300ms –≤–º–µ—Å—Ç–æ 1570ms).

        Examples:
          python> await generator_page._background_data_loading()
          python> # –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ñ–æ–Ω–µ, UI –æ—Ç–∑—ã–≤—á–∏–≤
        """
        try:
            logger.info(
                "üöÄ Starting background data loading for optimal performance..."
            )

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è
            await asyncio.sleep(0.1)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            await self.search.load_search_data()

            logger.info("‚úÖ Background data loading completed successfully")

        except Exception as e:
            logger.warning(
                f"Background data loading failed (fallback mode will be used): {e}"
            )
            # –û—à–∏–±–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∏–º–µ–µ—Ç fallback suggestions

    def _handle_generate_request(self, department: str, position: str):
        """
        @doc
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç ProfileViewerComponent.

        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ GeneratorComponent.

        Args:
            department: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            position: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

        Examples:
          python> page._handle_generate_request("–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–ê–Ω–∞–ª–∏—Ç–∏–∫ BI")
          # –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        """
        logger.info(
            f"Generate request from ProfileViewerComponent: {department}/{position}"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ (position, department)
        self.generator.set_position(position, department)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ background task
        asyncio.create_task(self.generator._start_generation())

    def _handle_tab_switch(self, tab_id: str):
        """
        @doc
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤ –≤ ProfileViewerComponent.

        Args:
            tab_id: ID –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ç–∞–±–∞

        Examples:
          python> page._handle_tab_switch("markdown")
          python> # –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–∞
        """
        logger.info(f"Tab switched to: {tab_id}")

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∞–±–æ–≤
        if tab_id == "markdown":
            logger.debug(
                "User viewing Markdown tab - ensure markdown content is generated"
            )
        elif tab_id == "versions":
            logger.debug("User viewing versions tab - versions management active")

    async def _handle_generation_complete(self, result: Dict[str, Any]):
        """
        @doc
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

        Examples:
          python> await page._handle_generation_complete(generation_result)
          python> # –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ viewer
        """
        logger.info(f"Generation completed: {result.get('profile_id', 'unknown')}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ProfileViewerComponent –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if result.get("success"):
                await self.viewer.show_profile(
                    {"task_result": result, "view_mode": "single"}
                )
                ui.notify("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!", type="positive")
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}", type="negative")

        except Exception as e:
            logger.error(f"Error handling generation completion: {e}")
            ui.notify("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", type="negative")

    # === Error Recovery Coordination Methods ===

    def _setup_recovery_monitoring(self):
        """
        @doc
        Setup comprehensive error recovery monitoring for the page.

        Coordinates recovery between all components and provides
        centralized error handling and recovery orchestration.

        Examples:
          python> page._setup_recovery_monitoring()
          python> # Recovery monitoring active across all components
        """
        # Only setup monitoring if error recovery coordinator is available
        if self.error_recovery_coordinator is not None:
            # Setup API health monitoring callbacks
            self.error_recovery_coordinator.health_monitor.on_recovery = (
                self._on_api_recovery
            )
            self.error_recovery_coordinator.health_monitor.on_degradation = (
                self._on_api_degradation
            )

            # Register page-level recovery callbacks
            self.error_recovery_coordinator.register_recovery_callback(
                "generator_page", self._on_page_recovery_callback
            )

        logger.info("Error recovery monitoring setup completed")

    def _on_api_recovery(self):
        """
        @doc
        Handle API recovery notification.

        Triggered when API health monitor detects service recovery.
        Coordinates fallback ‚Üí normal mode transitions across components.

        Examples:
          python> page._on_api_recovery()
          python> # All components notified of API recovery
        """
        logger.info("API recovered - coordinating component recovery")

        try:
            # Show recovery notification
            ui.notify("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", type="positive")

            # Trigger component recovery
            asyncio.create_task(self._coordinate_component_recovery())

        except Exception as e:
            logger.error(f"Error handling API recovery: {e}")

    def _on_api_degradation(self, error_message: str):
        """
        @doc
        Handle API degradation notification.

        Triggered when API health monitor detects service issues.
        Coordinates normal ‚Üí fallback mode transitions across components.

        Args:
            error_message: Error message describing the degradation

        Examples:
          python> page._on_api_degradation("Connection timeout")
          python> # All components switched to fallback mode
        """
        logger.warning(
            f"API degradation detected - coordinating fallback: {error_message}"
        )

        try:
            # Show degradation notification
            ui.notify(
                "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º",
                type="warning",
            )

            # Enable recovery mode for page
            self.recovery_active = True

        except Exception as e:
            logger.error(f"Error handling API degradation: {e}")

    async def _coordinate_component_recovery(self):
        """
        @doc
        Coordinate recovery across all components.

        Orchestrates the transition from fallback to normal mode
        ensuring all components are properly synchronized.

        Examples:
          python> await page._coordinate_component_recovery()
          python> # All components recovered and synchronized
        """
        try:
            logger.info("Starting coordinated component recovery...")

            recovery_tasks = []

            # Trigger recovery for each component
            if hasattr(self.search, "force_reload_data"):
                recovery_tasks.append(self.search.force_reload_data(from_recovery=True))

            if hasattr(self.generator, "reset_component_state"):
                recovery_tasks.append(self.generator.reset_component_state())

            if hasattr(self.viewer, "reset_component_state"):
                recovery_tasks.append(self.viewer.reset_component_state())

            if hasattr(self.files, "reset_component_state"):
                recovery_tasks.append(self.files.reset_component_state())

            # Execute recovery tasks with timeout
            if recovery_tasks:
                await asyncio.wait_for(
                    asyncio.gather(*recovery_tasks, return_exceptions=True),
                    timeout=30.0,
                )

            # Reset page recovery state
            self.recovery_active = False

            logger.info("Coordinated component recovery completed successfully")
            ui.notify("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", type="positive")

        except asyncio.TimeoutError:
            logger.error("Component recovery timeout")
            ui.notify("‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", type="warning")
        except Exception as e:
            logger.error(f"Error during coordinated recovery: {e}")
            ui.notify("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", type="negative")

    async def _on_page_recovery_callback(self, recovered_state: Dict[str, Any]):
        """
        @doc
        Handle page-level state recovery.

        Args:
            recovered_state: Previously saved page state

        Examples:
          python> await page._on_page_recovery_callback({"recovery_active": True})
          python> # Page state recovered from coordinator
        """
        try:
            logger.info("Recovering generator page state...")

            # Restore page-level state
            self.recovery_active = recovered_state.get("recovery_active", False)

            # Trigger component coordination if needed
            if self.recovery_active:
                await self._coordinate_component_recovery()

            ui.notify("üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", type="positive")
            logger.info("Generator page state recovery completed")

        except Exception as e:
            logger.error(f"Error during page state recovery: {e}")
            ui.notify("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", type="warning")

    async def start_error_recovery(self):
        """
        @doc
        Start error recovery systems for the page.

        Initializes all error recovery mechanisms including
        API health monitoring, circuit breakers, and cleanup.

        Examples:
          python> await page.start_error_recovery()
          python> # All recovery systems active
        """
        try:
            logger.info("Starting generator page error recovery systems...")

            # Start the error recovery coordinator
            await self.error_recovery_coordinator.start()

            logger.info("Generator page error recovery systems started successfully")

        except Exception as e:
            logger.error(f"Failed to start error recovery systems: {e}")
            raise

    async def stop_error_recovery(self):
        """
        @doc
        Stop error recovery systems and cleanup resources.

        Performs graceful shutdown of all recovery mechanisms
        and cleans up any tracked resources.

        Examples:
          python> await page.stop_error_recovery()
          python> # All recovery systems stopped, resources cleaned up
        """
        try:
            logger.info("Stopping generator page error recovery systems...")

            # Stop the error recovery coordinator (includes cleanup)
            await self.error_recovery_coordinator.stop()

            # Reset page state
            self.recovery_active = False

            logger.info("Generator page error recovery systems stopped successfully")

        except Exception as e:
            logger.error(f"Error stopping recovery systems: {e}")

    async def reset_all_components(self):
        """
        @doc
        Reset all components to clean state.

        Emergency reset function that clears all component states
        and restarts them from scratch. Use as last resort.

        Examples:
          python> await page.reset_all_components()
          python> # All components reset to clean state
        """
        try:
            logger.info("Performing emergency reset of all components...")

            # Show loading indicator
            ui.notify("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...", type="info")

            # Reset each component
            reset_tasks = []

            if hasattr(self.search, "reset_component_state"):
                reset_tasks.append(self.search.reset_component_state())

            if hasattr(self.generator, "reset_component_state"):
                reset_tasks.append(self.generator.reset_component_state())

            if hasattr(self.viewer, "reset_component_state"):
                reset_tasks.append(self.viewer.reset_component_state())

            if hasattr(self.files, "reset_component_state"):
                reset_tasks.append(self.files.reset_component_state())

            # Execute resets with timeout
            if reset_tasks:
                await asyncio.wait_for(
                    asyncio.gather(*reset_tasks, return_exceptions=True), timeout=20.0
                )

            # Reset page state
            self.recovery_active = False

            logger.info("Emergency component reset completed")
            ui.notify("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã", type="positive")

        except Exception as e:
            logger.error(f"Error during emergency reset: {e}")
            ui.notify("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", type="negative")

    def get_recovery_status(self) -> Dict[str, Any]:
        """
        @doc
        Get comprehensive recovery status for all components.

        Returns:
            Dict with recovery status, statistics, and health info

        Examples:
          python> status = page.get_recovery_status()
          python> print(status['overall_health'])  # "HEALTHY"
        """
        try:
            # Get coordinator stats
            coordinator_stats = self.error_recovery_coordinator.get_overall_stats()

            # Get component-specific status
            component_status = {}

            if hasattr(self.search, "get_selected_position_data"):
                component_status["search"] = {
                    "has_data": bool(self.search.get_selected_position_data()),
                    "fallback_mode": getattr(self.search, "fallback_mode", False),
                }

            if hasattr(self.generator, "get_generation_status"):
                component_status["generator"] = self.generator.get_generation_status()

            if hasattr(self.files, "get_download_status"):
                component_status["files"] = self.files.get_download_status()

            return {
                "page_recovery_active": self.recovery_active,
                "coordinator_stats": coordinator_stats,
                "component_status": component_status,
                "recovery_systems_running": self.error_recovery_coordinator.is_started,
                "timestamp": asyncio.get_event_loop().time(),
            }

        except Exception as e:
            logger.error(f"Error getting recovery status: {e}")
            return {
                "error": str(e),
                "page_recovery_active": self.recovery_active,
                "timestamp": asyncio.get_event_loop().time(),
            }
