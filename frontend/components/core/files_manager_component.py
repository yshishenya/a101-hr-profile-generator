"""
@doc
FilesManagerComponent - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è A101 HR Profile Generator.

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π API —Å–ª–æ–π.
–£–±–∏—Ä–∞–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏–∑ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
- JSON (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è)
- Markdown (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç)

Examples:
  python> files_manager = FilesManagerComponent(api_client)
  python> await files_manager.download_file("profile123", "json")
"""

import asyncio
import logging
import tempfile
import os
import threading
from typing import Dict, Any, Optional

from nicegui import ui

logger = logging.getLogger(__name__)


class FilesManagerComponent:
    """
    @doc
    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: UI ‚Üí Services ‚Üí API (–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä—è–º—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    - Progress indication –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - Error handling –∏ retry logic
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∏ Markdown —Ñ–æ—Ä–º–∞—Ç–æ–≤

    Examples:
      python> files_manager = FilesManagerComponent(api_client)
      python> await files_manager.download_file("profile123", "json")
      python> # –§–∞–π–ª —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ browser download
    """

    def __init__(self, api_client):
        """
        @doc
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏.

        Args:
            api_client: –≠–∫–∑–µ–º–ø–ª—è—Ä APIClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å backend

        Examples:
          python> files_manager = FilesManagerComponent(api_client)
          python> # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        """
        self.api_client = api_client

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.download_progress_dialog = None

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.temp_files = set()

    async def render_files_section(self) -> ui.column:
        """
        @doc
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏.

        Returns:
            ui.column: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ–∫—Ü–∏–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏

        Examples:
          python> container = await files_manager.render_files_section()
          python> # –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞
        """
        with ui.column().classes("w-full gap-4") as files_container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            with ui.row().classes("w-full items-center gap-3"):
                ui.icon("folder_open", size="1.5rem").classes("text-primary")
                ui.label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏").classes(
                    "text-h6 text-weight-medium text-primary"
                )

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            with ui.card().classes("w-full"):
                with ui.card_section():
                    ui.label("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:").classes("text-subtitle2 mb-2")
                    with ui.column().classes("gap-1"):
                        ui.label("‚Ä¢ JSON - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞").classes("text-body2")
                        ui.label("‚Ä¢ Markdown - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏").classes("text-body2")

        return files_container

    async def download_file(self, profile_id: str, format_type: str):
        """
        @doc
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

        Args:
            profile_id: ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            format_type: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ("json" –∏–ª–∏ "markdown")

        Examples:
          python> await files_manager.download_file("profile123", "json")
          python> # JSON —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ browser download
        """
        if not profile_id:
            ui.notify("‚ùå –ù–µ—Ç ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", type="negative")
            return

        if format_type not in ["json", "markdown"]:
            ui.notify(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}", type="negative")
            return

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self._show_download_progress(profile_id, format_type)

            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ API (—á–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
            if format_type == "json":
                file_data = await self.api_client.download_profile_json(profile_id)
                file_extension = "json"
                content_type = "application/json"
            else:  # markdown
                file_data = await self.api_client.download_profile_markdown(profile_id)
                file_extension = "md"
                content_type = "text/markdown"

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self._hide_download_progress()

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_path = await self._create_temp_file(
                file_data, profile_id, file_extension
            )

            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ NiceGUI
            filename = f"profile_{profile_id[:8]}.{file_extension}"
            ui.download(temp_path, filename)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            self._schedule_cleanup(temp_path)

            ui.notify(
                f"‚úÖ {format_type.upper()} —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename}",
                type="positive"
            )

            logger.info(f"File download completed: {filename} for profile {profile_id}")

        except Exception as e:
            self._hide_download_progress()
            logger.error(f"Error downloading {format_type} file: {e}")
            ui.notify(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {format_type}: {str(e)}",
                type="negative"
            )

    def _show_download_progress(self, profile_id: str, format_type: str):
        """
        @doc
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

        Args:
            profile_id: ID —Å–∫–∞—á–∏–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            format_type: –¢–∏–ø —Ñ–∞–π–ª–∞

        Examples:
          python> files_manager._show_download_progress("profile123", "json")
          python> # –ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        if self.download_progress_dialog:
            return  # –£–∂–µ –ø–æ–∫–∞–∑–∞–Ω

        with ui.dialog() as dialog:
            with ui.card():
                with ui.card_section().classes("py-6 px-8 text-center"):
                    ui.spinner(size="lg", color="primary")
                    ui.label(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {format_type.upper()} —Ñ–∞–π–ª–∞...").classes(
                        "text-lg font-semibold text-primary mt-3"
                    )
                    ui.label(f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_id[:12]}...").classes(
                        "text-sm text-muted mt-2"
                    )

        self.download_progress_dialog = dialog
        dialog.open()

    def _hide_download_progress(self):
        """
        @doc
        –°–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

        Examples:
          python> files_manager._hide_download_progress()
          python> # –î–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫—Ä—ã—Ç
        """
        if self.download_progress_dialog:
            self.download_progress_dialog.close()
            self.download_progress_dialog = None

    async def _create_temp_file(self, file_data: bytes, profile_id: str, extension: str) -> str:
        """
        @doc
        –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

        Args:
            file_data: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            profile_id: ID –ø—Ä–æ—Ñ–∏–ª—è
            extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        Returns:
            str: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

        Examples:
          python> path = await files_manager._create_temp_file(data, "123", "json")
          python> print(path)  # "/tmp/tmp123.json"
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode="wb",
                suffix=f"_{profile_id[:8]}.{extension}",
                delete=False
            ) as tmp_file:
                tmp_file.write(file_data)
                temp_path = tmp_file.name

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.temp_files.add(temp_path)

            logger.info(f"Created temp file: {temp_path}")
            return temp_path

        except Exception as e:
            logger.error(f"Error creating temp file: {e}")
            raise

    def _schedule_cleanup(self, temp_path: str, delay: int = 60):
        """
        @doc
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

        Args:
            temp_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ —É–¥–∞–ª–µ–Ω–∏—è

        Examples:
          python> files_manager._schedule_cleanup("/tmp/file.json", 30)
          python> # –§–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        """
        def cleanup():
            try:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    logger.info(f"Cleaned up temp file: {temp_path}")
                
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.temp_files.discard(temp_path)
                
            except Exception as e:
                logger.error(f"Error cleaning up temp file {temp_path}: {e}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        threading.Timer(delay, cleanup).start()

    async def download_multiple_files(self, profile_ids: list[str], format_type: str):
        """
        @doc
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π.

        Args:
            profile_ids: –°–ø–∏—Å–æ–∫ ID –ø—Ä–æ—Ñ–∏–ª–µ–π
            format_type: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤

        Examples:
          python> await files_manager.download_multiple_files(["123", "456"], "json")
          python> # –ù–µ—Å–∫–æ–ª—å–∫–æ JSON —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∞–Ω–æ
        """
        if not profile_ids:
            ui.notify("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", type="negative")
            return

        ui.notify(f"üì• –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(profile_ids)} —Ñ–∞–π–ª–æ–≤...", type="info")

        success_count = 0
        for i, profile_id in enumerate(profile_ids, 1):
            try:
                ui.notify(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ {i}/{len(profile_ids)}: {profile_id[:8]}...", type="info")
                await self.download_file(profile_id, format_type)
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                if i < len(profile_ids):
                    await asyncio.sleep(1)
                    
            except Exception as e:
                logger.error(f"Error downloading file {profile_id}: {e}")
                ui.notify(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {profile_id[:8]}: {str(e)}", type="negative")

        # –ò—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if success_count == len(profile_ids):
            ui.notify(f"‚úÖ –í—Å–µ {success_count} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã", type="positive")
        else:
            ui.notify(
                f"‚ö†Ô∏è –°–∫–∞—á–∞–Ω–æ {success_count} –∏–∑ {len(profile_ids)} —Ñ–∞–π–ª–æ–≤",
                type="warning"
            )

    async def preview_markdown(self, profile_id: str):
        """
        @doc
        –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Markdown —Ñ–∞–π–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
            profile_id: ID –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        Examples:
          python> await files_manager.preview_markdown("profile123")
          python> # –ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º Markdown
        """
        try:
            ui.notify("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...", type="info")

            # –°–∫–∞—á–∏–≤–∞–µ–º Markdown —á–µ—Ä–µ–∑ API
            markdown_data = await self.api_client.download_profile_markdown(profile_id)
            markdown_content = markdown_data.decode('utf-8')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
            with ui.dialog() as dialog:
                with ui.card().classes("w-[80vw] max-w-4xl max-h-[70vh]"):
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    with ui.card_section().classes("bg-primary text-white"):
                        with ui.row().classes("w-full justify-between items-center"):
                            ui.label(f"üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Markdown: {profile_id[:12]}...").classes(
                                "text-h6"
                            )
                            ui.button(icon="close", on_click=dialog.close).props(
                                "flat round text-color=white"
                            )

                    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    with ui.scroll_area().classes("flex-1 p-6"):
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–¥ (NiceGUI –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç Markdown –∏–∑ —Å—Ç—Ä–æ–∫)
                        ui.code(markdown_content).classes("w-full")

                    # –î–µ–π—Å—Ç–≤–∏—è
                    with ui.card_actions():
                        ui.button(
                            "–°–∫–∞—á–∞—Ç—å",
                            icon="download",
                            on_click=lambda: self.download_file(profile_id, "markdown")
                        ).props("color=primary")
                        ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=dialog.close).props("outlined")

            dialog.open()

        except Exception as e:
            logger.error(f"Error previewing markdown: {e}")
            ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}", type="negative")

    def cleanup_all_temp_files(self):
        """
        @doc
        –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.

        Examples:
          python> files_manager.cleanup_all_temp_files()
          python> # –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã
        """
        cleaned_count = 0
        for temp_path in list(self.temp_files):
            try:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    cleaned_count += 1
                    logger.info(f"Cleaned up temp file: {temp_path}")
            except Exception as e:
                logger.error(f"Error cleaning up temp file {temp_path}: {e}")
            finally:
                self.temp_files.discard(temp_path)

        if cleaned_count > 0:
            logger.info(f"Cleaned up {cleaned_count} temporary files")

    def get_download_status(self) -> Dict[str, Any]:
        """
        @doc
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.

        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        Examples:
          python> status = files_manager.get_download_status()
          python> print(status["temp_files_count"])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        return {
            "temp_files_count": len(self.temp_files),
            "is_downloading": bool(self.download_progress_dialog),
            "temp_files": list(self.temp_files)
        }