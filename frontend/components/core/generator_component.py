"""
@doc
GeneratorComponent - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è A101 HR Profile Generator.

–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π LLM.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫.

–°–æ–±—ã—Ç–∏—è:
- on_generation_complete(profile_data) - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
- on_generation_error(error_message) - –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

Examples:
  python> generator = GeneratorComponent(api_client)
  python> generator.on_generation_complete = viewer.show_profile
  python> await generator.render_generator_section()
"""

import asyncio
import logging
from typing import Dict, Any, Optional, Callable

from nicegui import ui

logger = logging.getLogger(__name__)


class GeneratorComponent:
    """
    @doc
    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å LLM.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter API + Gemini 2.5 Flash
    - Real-time –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - Professional UI —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ —Å–ø–∏–Ω–Ω–µ—Ä–∞–º–∏
    - Retry logic –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

    Examples:
      python> generator = GeneratorComponent(api_client)
      python> generator.on_generation_complete = lambda data: print("Done!")
      python> container = await generator.render_generator_section()
    """

    def __init__(self, api_client):
        """
        @doc
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π.

        Args:
            api_client: –≠–∫–∑–µ–º–ø–ª—è—Ä APIClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å backend

        Examples:
          python> generator = GeneratorComponent(api_client)
          python> # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        """
        self.api_client = api_client

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.generate_button = None
        self.progress_dialog = None
        self.generation_status_container = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.is_generating = False
        self.current_task_id = None
        self.selected_position = ""
        self.selected_department = ""

        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        self.on_generation_complete: Optional[Callable[[Dict[str, Any]], None]] = None
        self.on_generation_error: Optional[Callable[[str], None]] = None

    def set_position(self, position: str, department: str):
        """
        @doc
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è SearchComponent –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

        Args:
            position: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            department: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

        Examples:
          python> generator.set_position("Java-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–î–ò–¢")
          python> # –ü–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        self.selected_position = position
        self.selected_department = department
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self._update_generation_ui_state()
        
        logger.info(f"Generator received position: {position} in {department}")

    async def render_generator_section(self) -> ui.column:
        """
        @doc
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π.

        Returns:
            ui.column: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ–∫—Ü–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Examples:
          python> container = await generator.render_generator_section()
          python> # –°–µ–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞
        """
        with ui.column().classes("w-full gap-4") as generator_container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            with ui.row().classes("w-full items-center gap-3"):
                ui.icon("auto_awesome", size="1.5rem").classes("text-primary")
                ui.label("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è").classes(
                    "text-h6 text-weight-medium text-primary"
                )

            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.generate_button = ui.button(
                "üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                icon="auto_awesome",
                on_click=self._start_generation,
            ).classes("w-full").props("size=lg color=primary")
            
            # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            self.generate_button.props("disable")

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            self.generation_status_container = ui.column().classes("w-full")

        return generator_container

    def _update_generation_ui_state(self):
        """
        @doc
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.

        Examples:
          python> generator._update_generation_ui_state()
          python> # UI –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        """
        if self.generate_button:
            has_position = bool(self.selected_position and self.selected_department)
            
            if has_position and not self.is_generating:
                self.generate_button.props(remove="disable")
                self.generate_button.set_text(f"üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {self.selected_position}")
            else:
                self.generate_button.props(add="disable")
                if self.is_generating:
                    self.generate_button.set_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...")
                else:
                    self.generate_button.set_text("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")

    async def _start_generation(self):
        """
        @doc
        –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å.

        Examples:
          python> await generator._start_generation()
          python> # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–¥–∏–∞–ª–æ–≥
        """
        if (
            not self.selected_position
            or not self.selected_department
            or self.is_generating
        ):
            ui.notify("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", type="warning")
            return

        try:
            self.is_generating = True
            if self.generate_button:
                self.generate_button.props(add="loading")
            self._update_generation_ui_state()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_data = {
                "department": self.selected_department,
                "position": self.selected_position,
                "save_result": True,
            }

            logger.info(f"Starting generation with data: {generation_data}")

            # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
            response = await self.api_client.start_profile_generation(**generation_data)

            logger.info(f"Generation API response: {response}")

            if response.get("task_id") and response.get("status") == "queued":
                self.current_task_id = response["task_id"]
                message = response.get("message", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
                ui.notify(f"üöÄ {message}", type="positive", position="top")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                await self._show_generation_progress()
            else:
                error_msg = response.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.error(f"Generation start failed: {error_msg}")
                await self._show_generation_error(error_msg)

        except Exception as e:
            logger.error(f"Error starting generation: {e}")
            await self._show_generation_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
        finally:
            self.is_generating = False
            if self.generate_button:
                self.generate_button.props(remove="loading")
            self._update_generation_ui_state()

    async def _show_generation_progress(self):
        """
        @doc
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –¥–∏–∞–ª–æ–≥–µ.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, —Å—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Examples:
          python> await generator._show_generation_progress()
          python> # –ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        with ui.dialog() as dialog:
            dialog.on('close', self._cancel_generation)
            
            with ui.card():
                with ui.card_section().classes("py-6 px-8"):
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    with ui.row().classes("items-center gap-3 mb-4"):
                        ui.spinner(size="lg", color="primary")
                        with ui.column().classes("gap-1"):
                            ui.label("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏").classes(
                                "text-lg font-semibold text-primary"
                            )
                            progress_status = ui.label(
                                "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞..."
                            ).classes("text-sm text-muted")

                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏
                    with ui.row().classes("w-full mb-4"):
                        ui.label(f"–ü–æ–∑–∏—Ü–∏—è: {self.selected_position}").classes("text-sm")
                    with ui.row().classes("w-full mb-4"):
                        ui.label(f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {self.selected_department}").classes("text-sm")

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar = ui.linear_progress(value=0).classes("w-full mb-2")
                    progress_percentage = ui.label("0%").classes(
                        "text-xs text-muted text-right"
                    )

                    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
                    with ui.row().classes("justify-center mt-6"):
                        ui.button("–û—Ç–º–µ–Ω–∏—Ç—å", on_click=dialog.close).props(
                            "outlined color=grey"
                        )

        self.progress_dialog = dialog
        dialog.open()

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await self._poll_generation_status(
            dialog, progress_status, progress_bar, progress_percentage
        )

    async def _poll_generation_status(
        self, dialog, status_label, progress_bar, progress_percentage
    ):
        """
        @doc
        –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.

        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Args:
            dialog: –î–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            status_label: –õ–µ–π–±–ª —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            progress_bar: –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_percentage: –õ–µ–π–±–ª –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤

        Examples:
          python> await generator._poll_generation_status(dialog, status, bar, pct)
          python> # –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        max_attempts = 60  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        attempt = 0

        while attempt < max_attempts and dialog.value:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–∫—Ä—ã—Ç
            try:
                status_response = await self.api_client.get_generation_task_status(
                    self.current_task_id
                )

                if not status_response.get("success"):
                    break

                task_data = status_response["task"]
                status = task_data["status"]
                progress = task_data.get("progress", 0)
                current_step = task_data.get("current_step", "–û–±—Ä–∞–±–æ—Ç–∫–∞...")

                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                status_label.text = current_step
                progress_bar.value = progress / 100.0
                progress_percentage.text = f"{progress}%"

                if status == "completed":
                    dialog.close()
                    await self._show_generation_success()
                    break
                elif status == "failed":
                    dialog.close()
                    error_msg = task_data.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await self._show_generation_error(error_msg)
                    break
                elif status == "cancelled":
                    dialog.close()
                    ui.notify("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", type="warning")
                    break

                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                attempt += 1

            except Exception as e:
                logger.error(f"Error polling generation status: {e}")
                await asyncio.sleep(5)
                attempt += 1

        if attempt >= max_attempts:
            dialog.close()
            await self._show_generation_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

    async def _show_generation_success(self):
        """
        @doc
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

        Examples:
          python> await generator._show_generation_success()
          python> # –ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        result_response = await self.api_client.get_generation_task_result(self.current_task_id)
        
        with ui.dialog() as dialog:
            with ui.card().classes("text-center p-6"):
                with ui.card_section().classes("text-center py-8"):
                    # –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞
                    ui.icon("check_circle", size="4rem").classes("text-success mb-4")

                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    ui.label("üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!").classes(
                        "text-2xl font-bold text-success mb-2"
                    )
                    ui.label(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{self.selected_position}' –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è").classes(
                        "text-muted mb-6"
                    )

                    # –î–µ–π—Å—Ç–≤–∏—è
                    with ui.row().classes("gap-3 justify-center"):
                        ui.button(
                            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            icon="description",
                            on_click=lambda: self._view_profile_result(result_response, dialog),
                        ).props("color=primary")

                        ui.button(
                            "–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω",
                            icon="add",
                            on_click=lambda: self._create_another(dialog),
                        ).props("outlined")

        dialog.open()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.on_generation_complete and result_response:
            self.on_generation_complete(result_response)

        ui.notify("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!", type="positive", position="top")

    async def _show_generation_error(self, error_message: str):
        """
        @doc
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Examples:
          python> await generator._show_generation_error("Timeout error")
          python> # –ü–æ–∫–∞–∑–∞–Ω –¥–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞
        """
        with ui.dialog() as dialog:
            with ui.card().classes("bg-negative-1 border-l-4 border-negative p-4"):
                with ui.card_section().classes("py-6"):
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—à–∏–±–∫–∏
                    with ui.row().classes("items-center gap-3 mb-4"):
                        ui.icon("error", size="2rem").classes("text-error")
                        ui.label("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏").classes(
                            "text-lg font-bold text-error"
                        )

                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    ui.label(error_message).classes("text-sm text-muted mb-6")

                    # –î–µ–π—Å—Ç–≤–∏—è
                    with ui.row().classes("gap-3"):
                        ui.button(
                            "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                            icon="refresh",
                            on_click=lambda: self._retry_generation(dialog),
                        ).props("color=red")

                        ui.button("–ó–∞–∫—Ä—ã—Ç—å", on_click=dialog.close).props("outlined")

        dialog.open()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if self.on_generation_error:
            self.on_generation_error(error_message)

        ui.notify(f"‚ùå {error_message}", type="negative", position="top")

    def _view_profile_result(self, result, dialog):
        """
        @doc
        –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
            result: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ API
            dialog: –î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è

        Examples:
          python> generator._view_profile_result(result, dialog)
          python> # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """
        dialog.close()
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if self.on_generation_complete and result:
            self.on_generation_complete(result)

    def _create_another(self, dialog):
        """
        @doc
        –°–æ–∑–¥–∞–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

        Args:
            dialog: –î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è

        Examples:
          python> generator._create_another(dialog)
          python> # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        dialog.close()
        self._reset_generator()

    def _retry_generation(self, dialog):
        """
        @doc
        –ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.

        Args:
            dialog: –î–∏–∞–ª–æ–≥ –æ—à–∏–±–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è

        Examples:
          python> generator._retry_generation(dialog)
          python> # –ó–∞–ø—É—â–µ–Ω –ø–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        dialog.close()
        asyncio.create_task(self._start_generation())

    def _reset_generator(self):
        """
        @doc
        –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.

        –û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Examples:
          python> generator._reset_generator()
          python> # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        """
        self.selected_position = ""
        self.selected_department = ""
        self.current_task_id = None
        self.is_generating = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self._update_generation_ui_state()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç—É—Å–∞
        if self.generation_status_container:
            self.generation_status_container.clear()
        
        ui.notify("üîÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–±—Ä–æ—à–µ–Ω", type="info")

    def _cancel_generation(self):
        """
        @doc
        –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ backend.

        Examples:
          python> generator._cancel_generation()
          python> # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
        """
        if self.progress_dialog:
            self.progress_dialog.close()
            
        if self.current_task_id:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ backend
            asyncio.create_task(self._cancel_backend_task())
            
        self.current_task_id = None
        self.is_generating = False
        self._update_generation_ui_state()
        
        ui.notify("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", type="warning")

    async def _cancel_backend_task(self):
        """
        @doc
        –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ backend.

        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Examples:
          python> await generator._cancel_backend_task()
          python> # –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ backend
        """
        if self.current_task_id:
            try:
                await self.api_client.cancel_generation_task(self.current_task_id)
                logger.info(f"Cancelled generation task: {self.current_task_id}")
            except Exception as e:
                logger.error(f"Error cancelling generation task: {e}")

    def get_generation_status(self) -> Dict[str, Any]:
        """
        @doc
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Examples:
          python> status = generator.get_generation_status()
          python> print(status["is_generating"])  # True/False
        """
        return {
            "is_generating": self.is_generating,
            "task_id": self.current_task_id,
            "selected_position": self.selected_position,
            "selected_department": self.selected_department,
        }