"""
@doc
–ï–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ê101.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç:
- Smart Search –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –§–æ—Ä–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

Examples:
  python> generator = ProfileGeneratorComponent(api_client)
  python> await generator.render()
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional, Callable
from datetime import datetime

from nicegui import ui
from ..services.api_client import APIClient

logger = logging.getLogger(__name__)


class ProfileGeneratorComponent:
    """
    @doc
    –ï–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ñ–∏–≤–æ–π –ø–æ–∏—Å–∫ –ø–æ 4,376 –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    - –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º
    - –§–æ—Ä–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Examples:
      python> generator = ProfileGeneratorComponent(api_client)
      python> await generator.render()
    """

    def __init__(self, api_client: APIClient):
        self.api_client = api_client

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.search_input = None
        self.search_results_container = None
        self.selected_position_display = None
        self.employee_name_input = None
        self.temperature_slider = None
        self.generate_button = None
        self.progress_container = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_query = ""
        self.selected_position = None
        self.search_timer = None
        self.is_searching = False
        self.is_generating = False
        self.current_task_id = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ UI
        self.has_search_results = False
        self.has_selected_position = False
        self.can_generate = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.total_stats = {"departments": 0, "positions": 0}
        self.stats_text = "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏..."

    async def render(self) -> ui.column:
        """
        @doc
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π.

        Examples:
          python> component = await generator.render()
          python> component.classes("w-full max-w-4xl mx-auto")
        """
        with ui.column().classes("w-full space-y-4") as container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∏—Å—Ç–µ–º—ã
            await self._render_system_header()

            # –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
            with ui.card().classes("w-full"):
                with ui.card_section():
                    ui.label("üéØ –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–§–ò–õ–ï–ô (Smart Search)").classes(
                        "text-h5 font-bold text-primary mb-4"
                    )

                    # –ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                    await self._render_search_section()

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                    await self._render_selected_position()

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    await self._render_additional_params()

                    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    await self._render_generate_button()

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.progress_container = ui.column().classes("w-full mt-4")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._load_system_stats()

        return container

    async def _render_system_header(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        with ui.card().classes("w-full bg-blue-50"):
            with ui.card_section():
                with ui.row().classes("w-full items-center justify-between"):
                    ui.label("üìä –°–ò–°–¢–ï–ú–ê:").classes("font-bold text-gray-700")
                    self.stats_label = ui.label("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...").classes(
                        "text-gray-600"
                    )

    async def _render_search_section(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        with ui.row().classes("w-full items-center space-x-2 mb-4"):
            ui.label("üîç –ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:").classes("font-semibold min-w-fit")

            self.search_input = ui.input(
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏... (–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –º–µ–Ω–µ–¥–∂–µ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)"
            ).classes("flex-1")
            self.search_input.on("input", self._on_search_input)

            ui.button("üîç", on_click=self._trigger_search).props("flat").classes(
                "text-primary"
            )

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏
        with ui.row().classes("w-full items-center space-x-2 mb-4"):
            ui.label("–ò–õ–ò –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:").classes(
                "text-body2 text-gray-600 min-w-fit"
            )

            popular_searches = [
                "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
                "–î–∏—Ä–µ–∫—Ç–æ—Ä",
                "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "–ê–Ω–∞–ª–∏—Ç–∏–∫",
            ]
            for tag in popular_searches:
                ui.button(
                    f"#{tag}", on_click=lambda t=tag: self._quick_search(t)
                ).props("size=sm outlined color=primary").classes("text-xs")

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        with ui.column().classes("w-full"):
            ui.label("‚ö° Live —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:").classes(
                "font-semibold text-gray-700"
            ).bind_visibility_from(self, "has_search_results")
            self.search_results_container = ui.column().classes(
                "w-full space-y-1 max-h-48 overflow-y-auto"
            )

    async def _render_selected_position(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        with ui.column().classes("w-full mt-4"):
            self.selected_position_display = (
                ui.column()
                .classes("w-full")
                .bind_visibility_from(self, "has_selected_position")
            )

    async def _render_additional_params(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        with ui.column().classes("w-full mt-4").bind_visibility_from(
            self, "has_selected_position"
        ):
            ui.label("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:").classes("font-semibold text-gray-700 mb-3")

            # –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            with ui.row().classes("w-full items-center space-x-2 mb-3"):
                ui.label("–§–ò–û:").classes("min-w-fit font-medium")
                self.employee_name_input = ui.input(
                    placeholder="–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                ).classes("flex-1")

            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            with ui.row().classes("w-full items-center space-x-2 mb-3"):
                ui.label("–¢–æ—á–Ω–æ—Å—Ç—å:").classes("min-w-fit font-medium")
                with ui.column().classes("flex-1"):
                    self.temperature_slider = ui.slider(
                        min=0.0, max=1.0, step=0.1, value=0.1
                    ).classes("w-full")
                    ui.label().classes("text-caption text-gray-500").bind_text_from(
                        self.temperature_slider,
                        "value",
                        lambda v: f"{'–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è' if v <= 0.3 else '–£–º–µ—Ä–µ–Ω–Ω–∞—è' if v <= 0.7 else '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è'} ({v})",
                    )

    async def _render_generate_button(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        with ui.row().classes("w-full justify-center mt-6"):
            self.generate_button = (
                ui.button(
                    "üöÄ –°–û–ó–î–ê–¢–¨ –ü–†–û–§–ò–õ–¨ –î–û–õ–ñ–ù–û–°–¢–ò", on_click=self._start_generation
                )
                .props("size=lg color=primary")
                .classes("font-bold px-8 py-3")
            )
            self.generate_button.bind_visibility_from(self, "can_generate")

    async def _load_system_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_response = await self.api_client._make_request(
                "GET", "/api/catalog/stats"
            )

            if stats_response.get("success"):
                stats_data = stats_response["data"]
                self.total_stats = {
                    "departments": stats_data["departments"]["total_count"],
                    "positions": stats_data["positions"]["total_count"],
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if hasattr(self, "stats_label"):
                    self.stats_label.text = f"{self.total_stats['departments']:,} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {self.total_stats['positions']:,} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"

        except Exception as e:
            logger.error(f"Error loading system stats: {e}")
            self.total_stats = {"departments": 510, "positions": 4376}  # fallback

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º fallback
            if hasattr(self, "stats_label"):
                self.stats_label.text = f"{self.total_stats['departments']:,} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {self.total_stats['positions']:,} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"

    def _on_search_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ —Å debounce"""
        query = event.value.strip()

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.search_timer:
            self.search_timer.cancel()

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π
        if not query:
            self._clear_search_results()
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (200ms –¥–ª—è –∂–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        self.search_timer = asyncio.create_task(self._debounced_search(query))

    async def _debounced_search(self, query: str):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
        try:
            await asyncio.sleep(0.2)  # Debounce 200ms

            if query == self.current_query:
                return

            self.current_query = query
            await self._perform_search(query)

        except asyncio.CancelledError:
            pass
        except Exception as e:
            logger.error(f"Error in debounced search: {e}")

    async def _perform_search(self, query: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π"""
        if self.is_searching:
            return

        try:
            self.is_searching = True

            # –ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
            search_response = await self.api_client.search_positions(query)

            if search_response.get("success"):
                positions = search_response["data"]["positions"]
                await self._display_search_results(
                    positions[:8]
                )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 –¥–ª—è –∂–∏–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            else:
                self._clear_search_results()

        except Exception as e:
            logger.error(f"Error performing search: {e}")
            self._clear_search_results()
        finally:
            self.is_searching = False

    async def _display_search_results(self, positions: List[Dict]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.search_results_container.clear()

        if not positions:
            self.has_search_results = False
            return

        self.has_search_results = True

        with self.search_results_container:
            for position in positions:
                await self._render_position_result(position)

    async def _render_position_result(self, position: Dict):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
        level_colors = {1: "red", 2: "deep-orange", 3: "orange", 4: "green", 5: "blue"}
        level_color = level_colors.get(position["level"], "grey")

        with ui.row().classes(
            "w-full items-center justify-between p-2 hover:bg-gray-50 rounded-lg border-l-2 border-l-primary cursor-pointer"
        ).on("click", lambda pos=position: self._select_position(pos)):
            with ui.column().classes("flex-1"):
                with ui.row().classes("items-center space-x-2"):
                    ui.label(f"‚Ä¢ {position['name']}").classes("font-medium")
                    ui.chip(f"–£—Ä.{position['level']}", color=level_color).props(
                        "size=xs"
                    )

                ui.label(f"üìÅ {position['department']}").classes(
                    "text-caption text-gray-500"
                )

            ui.icon("chevron_right").classes("text-gray-400")

    def _select_position(self, position: Dict):
        """–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        self.selected_position = position
        self.has_selected_position = True
        self.can_generate = True

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        self._clear_search_results()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        if self.search_input:
            self.search_input.value = position["name"]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
        self._display_selected_position()

        ui.notify(f"–í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position['name']}", type="positive")

    def _display_selected_position(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if not self.selected_position:
            return

        self.selected_position_display.clear()

        with self.selected_position_display:
            with ui.card().classes("w-full border-l-4 border-l-green-500 bg-green-50"):
                with ui.card_section():
                    with ui.row().classes("w-full items-center justify-between"):
                        with ui.column().classes("flex-1"):
                            ui.label(
                                f"‚úÖ –í–´–ë–†–ê–ù–û: {self.selected_position['name']}"
                            ).classes("font-bold text-green-800")

                            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
                            dept_path = self.selected_position.get(
                                "department", "–ù–µ —É–∫–∞–∑–∞–Ω"
                            )
                            ui.label(f"üìç –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {dept_path}").classes(
                                "text-body2 text-green-700"
                            )

                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            level = self.selected_position.get("level", "–ù–µ —É–∫–∞–∑–∞–Ω")
                            category = self.selected_position.get(
                                "category", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                            )
                            ui.label(
                                f"‚öôÔ∏è –£—Ä–æ–≤–µ–Ω—å: {level} ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
                            ).classes("text-caption text-green-600")

                        ui.button(
                            "–ò–∑–º–µ–Ω–∏—Ç—å", icon="edit", on_click=self._clear_selection
                        ).props("size=sm outlined color=green")

    def _clear_selection(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        self.selected_position = None
        self.has_selected_position = False
        self.can_generate = False

        if self.search_input:
            self.search_input.value = ""

        self._clear_search_results()

    def _clear_search_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.current_query = ""
        self.has_search_results = False
        if self.search_results_container:
            self.search_results_container.clear()

    async def _quick_search(self, query: str):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É"""
        if self.search_input:
            self.search_input.value = query
        await self._perform_search(query)

    def _trigger_search(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫"""
        if self.search_input and self.search_input.value.strip():
            asyncio.create_task(self._perform_search(self.search_input.value.strip()))

    async def _start_generation(self):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        if not self.selected_position or self.is_generating:
            return

        try:
            self.is_generating = True
            self.generate_button.props("loading")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_data = {
                "department": self.selected_position["department"],
                "position": self.selected_position["name"],
                "employee_name": (
                    self.employee_name_input.value.strip()
                    if self.employee_name_input.value
                    else None
                ),
                "temperature": self.temperature_slider.value,
                "save_result": True,
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            response = await self.api_client.start_profile_generation(**generation_data)

            if response.get("success"):
                self.current_task_id = response["task_id"]
                ui.notify("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø—É—â–µ–Ω–∞!", type="positive")

                # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                await self._track_generation_progress()
            else:
                ui.notify("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", type="negative")

        except Exception as e:
            logger.error(f"Error starting generation: {e}")
            ui.notify(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", type="negative")
        finally:
            self.is_generating = False
            self.generate_button.props(remove="loading")

    async def _track_generation_progress(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not self.current_task_id:
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_container.clear()

        with self.progress_container:
            with ui.card().classes("w-full border-l-4 border-l-blue-500"):
                with ui.card_section():
                    ui.label("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è...").classes(
                        "font-bold text-blue-800 mb-2"
                    )

                    progress_bar = ui.linear_progress(value=0).classes("w-full")
                    status_label = ui.label("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...").classes(
                        "text-body2 text-blue-600"
                    )

                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    await self._poll_generation_status(progress_bar, status_label)

    async def _poll_generation_status(self, progress_bar, status_label):
        """–û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        max_attempts = 60  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        attempt = 0

        while attempt < max_attempts:
            try:
                status_response = await self.api_client.get_generation_task_status(
                    self.current_task_id
                )

                if not status_response.get("success"):
                    break

                task_data = status_response["task"]
                status = task_data["status"]
                progress = task_data.get("progress", 0)
                current_step = task_data.get("current_step", "–û–±—Ä–∞–±–æ—Ç–∫–∞...")

                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                progress_bar.value = progress / 100.0
                status_label.text = current_step

                if status == "completed":
                    await self._handle_generation_complete()
                    break
                elif status == "failed":
                    error_msg = task_data.get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await self._handle_generation_error(error_msg)
                    break
                elif status in ["cancelled"]:
                    status_label.text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    break

                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                attempt += 1

            except Exception as e:
                logger.error(f"Error polling generation status: {e}")
                await asyncio.sleep(5)
                attempt += 1

        if attempt >= max_attempts:
            await self._handle_generation_error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

    async def _handle_generation_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.progress_container.clear()

        with self.progress_container:
            with ui.card().classes("w-full border-l-4 border-l-green-500 bg-green-50"):
                with ui.card_section():
                    ui.label("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!").classes(
                        "font-bold text-green-800 mb-2"
                    )

                    with ui.row().classes("space-x-2"):
                        ui.button(
                            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                            icon="description",
                            on_click=lambda: self._view_generated_profile(),
                        ).props("color=green")

                        ui.button(
                            "–°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω",
                            icon="add_circle",
                            on_click=lambda: self._reset_generator(),
                        ).props("outlined color=green")

        ui.notify("üéâ –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤!", type="positive")

    async def _handle_generation_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.progress_container.clear()

        with self.progress_container:
            with ui.card().classes("w-full border-l-4 border-l-red-500 bg-red-50"):
                with ui.card_section():
                    ui.label("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏").classes(
                        "font-bold text-red-800 mb-2"
                    )
                    ui.label(error_message).classes("text-body2 text-red-600")

                    ui.button(
                        "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        icon="refresh",
                        on_click=lambda: self._retry_generation(),
                    ).props("color=red outlined")

        ui.notify(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_message}", type="negative")

    def _view_generated_profile(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è
        ui.navigate.to(f"/profiles/{self.current_task_id}")

    def _reset_generator(self):
        """–°–±—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        self._clear_selection()
        self.progress_container.clear()
        self.current_task_id = None

        if self.employee_name_input:
            self.employee_name_input.value = ""
        if self.temperature_slider:
            self.temperature_slider.value = 0.1

    def _retry_generation(self):
        """–ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.progress_container.clear()
        asyncio.create_task(self._start_generation())


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    print("‚úÖ Profile Generator component created!")
    print("üéØ Features:")
    print("  - Live search across 4,376 positions")
    print("  - One-click position selection")
    print("  - Integrated generation form")
    print("  - Real-time progress tracking")
