"""
@doc
Home Dashboard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã A101 HR Profile Generator.

–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã, –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

Examples:
  python> dashboard = DashboardComponent(api_client)
  python> await dashboard.create()
"""

from nicegui import ui
import asyncio
from typing import Dict, Any, List, Optional
import logging

logger = logging.getLogger(__name__)


class DashboardComponent:
    """
    @doc
    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (Home Dashboard) –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π, —Å—Ç–∞—Ç—É—Å—ã)
    - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∏—Å–∫, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
    - –ù–µ–¥–∞–≤–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏)
    - –°—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    
    Examples:
      python> dashboard = DashboardComponent(api_client)
      python> await dashboard.create()
    """
    
    def __init__(self, api_client):
        self.api_client = api_client
        self.stats_data = {}
        self.recent_activity = []
        self.departments_data = []
        self.active_tasks = []
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.stats_card = None
        self.activity_card = None
        self.departments_grid = None
        
    async def create(self):
        """
        @doc
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π dashboard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å backend –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        
        Examples:
          python> await dashboard.create()
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await self._load_dashboard_data()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._create_page_header()
        await self._create_system_stats()
        self._create_quick_actions()
        await self._create_recent_activity()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._start_background_updates()
    
    async def _load_dashboard_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dashboard"""
        try:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            tasks = [
                self._fetch_catalog_stats(),
                self._fetch_profiles_stats(),
                self._fetch_active_tasks()
            ]
            
            await asyncio.gather(*tasks, return_exceptions=True)
            logger.info("‚úÖ Dashboard data loaded successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to load dashboard data: {e}")
            ui.notify(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", type='negative')
    
    async def _fetch_catalog_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            response = await self.api_client.get_catalog_stats()
            if response and response.get('success'):
                self.stats_data['catalog'] = response['data']
        except Exception as e:
            logger.error(f"Failed to fetch catalog stats: {e}")
            self.stats_data['catalog'] = self._get_mock_catalog_stats()
    
    async def _fetch_profiles_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            response = await self.api_client.get_profiles(limit=1)
            if response:
                total = response.get('pagination', {}).get('total', 0)
                self.stats_data['profiles_count'] = total
        except Exception as e:
            logger.error(f"Failed to fetch profiles stats: {e}")
            self.stats_data['profiles_count'] = 0
    
    async def _fetch_active_tasks(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            response = await self.api_client.get_active_generation_tasks()
            if response:
                self.active_tasks = response[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á
        except Exception as e:
            logger.error(f"Failed to fetch active tasks: {e}")
            self.active_tasks = []
    
    
    def _create_page_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        with ui.row().classes('w-full items-center justify-between mb-6'):
            ui.label('üè¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π').classes('text-h4 text-weight-medium')
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            ui.button(
                icon='refresh',
                on_click=self._refresh_dashboard
            ).props('flat round').tooltip('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    
    async def _create_system_stats(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        with ui.card().classes('w-full mb-6'):
            ui.label('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã').classes('text-h6 q-mb-md')
            
            catalog_stats = self.stats_data.get('catalog', {})
            positions_stats = catalog_stats.get('positions', {})
            
            total_positions = positions_stats.get('total_count', 2844)  # Fallback
            profiles_count = self.stats_data.get('profiles_count', 0)
            in_progress = len(self.active_tasks)
            no_profiles = total_positions - profiles_count
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            coverage_percent = (profiles_count / total_positions * 100) if total_positions > 0 else 0
            
            self.stats_card = ui.row().classes('w-full')
            with self.stats_card:
                # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                with ui.card().classes('flex-1 text-center p-4'):
                    ui.label(str(total_positions)).classes('text-h4 text-weight-bold text-primary')
                    ui.label('–í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π').classes('text-caption text-grey-6')
                
                with ui.card().classes('flex-1 text-center p-4'):
                    ui.label(str(profiles_count)).classes('text-h4 text-weight-bold text-green')
                    ui.label(f'–° –ø—Ä–æ—Ñ–∏–ª—è–º–∏ ({coverage_percent:.1f}%)').classes('text-caption text-grey-6')
                
                with ui.card().classes('flex-1 text-center p-4'):
                    ui.label(str(in_progress)).classes('text-h4 text-weight-bold text-orange')
                    ui.label('–í –ø—Ä–æ—Ü–µ—Å—Å–µ').classes('text-caption text-grey-6')
                
                with ui.card().classes('flex-1 text-center p-4'):
                    ui.label(str(no_profiles)).classes('text-h4 text-weight-bold text-red')
                    ui.label(f'–ë–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π ({100-coverage_percent:.1f}%)').classes('text-caption text-grey-6')
    
    def _create_quick_actions(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        with ui.card().classes('w-full mb-6'):
            ui.label('üéØ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è').classes('text-h6 q-mb-md')
            
            with ui.row().classes('w-full q-gutter-md'):
                ui.button(
                    'üîç –ù–∞–π—Ç–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
                    on_click=lambda: ui.navigate.to('/search')
                ).classes('flex-1').props('size=lg color=primary')
                
                ui.button(
                    'üìã –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏', 
                    on_click=lambda: ui.navigate.to('/profiles')
                ).classes('flex-1').props('size=lg color=secondary')
                
                ui.button(
                    '‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
                    on_click=self._quick_generate
                ).classes('flex-1').props('size=lg color=positive')
                
                ui.button(
                    'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    on_click=lambda: ui.navigate.to('/analytics')
                ).classes('flex-1').props('size=lg color=info')
    
    async def _create_recent_activity(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω—Ç—ã –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        with ui.card().classes('w-full mb-6'):
            ui.label('üìà –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å').classes('text-h6 q-mb-md')
            
            self.activity_card = ui.column().classes('w-full')
            await self._update_activity_feed()
    
    async def _update_activity_feed(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.activity_card:
            return
            
        self.activity_card.clear()
        
        with self.activity_card:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if self.active_tasks:
                for task in self.active_tasks[:3]:
                    with ui.row().classes('w-full items-center q-py-sm'):
                        if task.get('status') == 'processing':
                            ui.icon('autorenew', color='orange').classes('q-mr-sm')
                            progress = task.get('progress', 0)
                            ui.label(f"‚öôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è: {task.get('current_step', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({progress}%)")
                        elif task.get('status') == 'completed':
                            ui.icon('check_circle', color='green').classes('q-mr-sm')
                            ui.label(f"‚úÖ –°–æ–∑–¥–∞–Ω: {task.get('position', '–ü—Ä–æ—Ñ–∏–ª—å')} ({self._format_time(task.get('completed_at'))})")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if not self.active_tasks:
                ui.label('–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏').classes('text-grey-6 q-py-md')
                ui.label('–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!').classes('text-caption text-grey-7')
    
    def _format_time(self, timestamp: Optional[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not timestamp:
            return "–Ω–µ–¥–∞–≤–Ω–æ"
        
        try:
            from datetime import datetime, timezone
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            diff = now - dt
            
            if diff.seconds < 60:
                return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            elif diff.seconds < 3600:
                return f"{diff.seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
            elif diff.days == 0:
                return f"{diff.seconds // 3600} —á–∞—Å –Ω–∞–∑–∞–¥"
            else:
                return f"{diff.days} –¥–Ω –Ω–∞–∑–∞–¥"
        except:
            return "–Ω–µ–¥–∞–≤–Ω–æ"
    
    def _start_background_updates(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        ui.timer(10.0, self._update_active_tasks)
    
    async def _update_active_tasks(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            await self._fetch_active_tasks()
            await self._update_activity_feed()
        except Exception as e:
            logger.error(f"Failed to update active tasks: {e}")
    
    async def _refresh_dashboard(self):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dashboard"""
        ui.notify('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', type='info')
        
        try:
            await self._load_dashboard_data()
            await self._update_activity_feed()
            ui.notify('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', type='positive')
        except Exception as e:
            ui.notify(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}', type='negative')
    
    def _quick_generate(self):
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞"""
        ui.notify('–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', type='info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–æ–¥–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    
    def _get_mock_catalog_stats(self) -> Dict[str, Any]:
        """Mock –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        return {
            'departments': {'total_count': 545},
            'positions': {'total_count': 2844},
            'cache_status': {'departments_cached': True}
        }


class DashboardPage:
    """
    @doc
    –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Dashboard –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ routing.
    
    Examples:
      python> page = DashboardPage(api_client)
      python> await page.render()
    """
    
    def __init__(self, api_client):
        self.api_client = api_client
        self.dashboard = DashboardComponent(api_client)
    
    async def render(self):
        """
        @doc
        –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã dashboard.
        
        Examples:
          python> await dashboard_page.render()
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        ui.page_title('Dashboard - A101 HR Profile Generator')
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        with ui.column().classes('w-full max-w-7xl mx-auto p-4'):
            await self.dashboard.create()


if __name__ == "__main__":
    print("‚úÖ Dashboard component created successfully!")
    print("üìã Components:")
    print("  - DashboardComponent: Main dashboard logic")
    print("  - DashboardPage: Full page wrapper")