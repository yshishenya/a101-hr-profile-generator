"""
@doc
–£–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –ê101.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü–æ–∏—Å–∫ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
- –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

Examples:
  python> search = SmartSearchComponent(api_client)
  python> await search.render()
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional, Callable
from datetime import datetime

from nicegui import ui
from ..services.api_client import APIClient

logger = logging.getLogger(__name__)


class SmartSearchComponent:
    """
    @doc
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
    - –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å debounce –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π

    Examples:
      python> search = SmartSearchComponent(api_client)
      python> search.on_position_selected = lambda pos: print(f"Selected: {pos['name']}")
      python> await search.render()
    """

    def __init__(self, api_client: APIClient):
        self.api_client = api_client

        # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.search_input = None
        self.results_container = None
        self.stats_display = None
        self.loading_indicator = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        self.current_query = ""
        self.search_results = {"departments": [], "positions": []}
        self.is_searching = False
        self.search_timer = None

        # Callbacks
        self.on_department_selected: Optional[Callable] = None
        self.on_position_selected: Optional[Callable] = None
        self.on_generate_profile: Optional[Callable] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ UX
        self.total_stats = {"departments": 0, "positions": 0}

    async def render(self) -> ui.column:
        """
        @doc
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.

        Examples:
          python> component = await search.render()
          python> component.classes("w-full max-w-4xl mx-auto")
        """
        with ui.column().classes("w-full space-y-4") as container:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await self._render_header()

            # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
            await self._render_search_input()

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            with ui.row().classes("w-full justify-center"):
                self.loading_indicator = ui.spinner(size="lg").classes("hidden")

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_container = ui.column().classes("w-full space-y-4")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._load_initial_stats()

        return container

    async def _render_header(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        with ui.card().classes("w-full"):
            with ui.card_section():
                ui.label("üîç –ü–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ").classes(
                    "text-h5 font-bold text-primary"
                )

                with ui.row().classes("items-center space-x-4 mt-2"):
                    self.stats_display = ui.label("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...").classes(
                        "text-caption text-gray-600"
                    )

                ui.label(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"
                ).classes("text-body2 text-gray-500 mt-2")

    async def _render_search_input(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        with ui.card().classes("w-full"):
            with ui.card_section():
                with ui.row().classes("w-full items-center space-x-2"):
                    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
                    self.search_input = ui.input(
                        label="–ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –î–ò–¢, –º–µ–Ω–µ–¥–∂–µ—Ä...",
                    ).classes("flex-1")

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                    self.search_input.on("input", self._on_search_input)

                    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
                    ui.button(icon="clear", on_click=self._clear_search).props(
                        "flat round"
                    ).classes("text-gray-500")

                # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                with ui.row().classes("mt-3 space-x-2 flex-wrap"):
                    ui.button(
                        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏",
                        on_click=lambda: self._quick_search("—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"),
                    ).props("size=sm outlined").classes("text-xs")
                    ui.button(
                        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏",
                        on_click=lambda: self._quick_search("—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"),
                    ).props("size=sm outlined").classes("text-xs")
                    ui.button(
                        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏", on_click=lambda: self._quick_search("–∞–Ω–∞–ª–∏—Ç–∏–∫")
                    ).props("size=sm outlined").classes("text-xs")
                    ui.button("–î–ò–¢", on_click=lambda: self._quick_search("–î–ò–¢")).props(
                        "size=sm outlined"
                    ).classes("text-xs")
                    ui.button(
                        "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π",
                        on_click=lambda: self._quick_search("–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π"),
                    ).props("size=sm outlined").classes("text-xs")

    async def _load_initial_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞
            stats_response = await self.api_client._make_request(
                "GET", "/api/catalog/stats"
            )

            if stats_response.get("success"):
                stats_data = stats_response["data"]
                dept_count = stats_data["departments"]["total_count"]
                pos_count = stats_data["positions"]["total_count"]

                self.total_stats = {"departments": dept_count, "positions": pos_count}

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.stats_display.text = f"üìä {dept_count:,} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ ‚Ä¢ {pos_count:,} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º"

        except Exception as e:
            logger.error(f"Error loading initial stats: {e}")
            self.stats_display.text = "üìä –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"

    def _on_search_input(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å debounce"""
        query = event.value.strip()

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.search_timer:
            self.search_timer.cancel()

        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π
        if not query:
            self._clear_results()
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è debounce (300ms)
        self.search_timer = asyncio.create_task(self._debounced_search(query))

    async def _debounced_search(self, query: str):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            await asyncio.sleep(0.3)  # Debounce 300ms

            if query == self.current_query:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                return

            self.current_query = query
            await self._perform_search(query)

        except asyncio.CancelledError:
            pass  # –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        except Exception as e:
            logger.error(f"Error in debounced search: {e}")

    async def _perform_search(self, query: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
        if self.is_searching:
            return

        try:
            self.is_searching = True
            self.loading_indicator.classes(remove="hidden")

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º
            dept_task = asyncio.create_task(self.api_client.search_departments(query))
            pos_task = asyncio.create_task(self.api_client.search_positions(query))

            dept_results, pos_results = await asyncio.gather(
                dept_task, pos_task, return_exceptions=True
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            departments = []
            positions = []

            if isinstance(dept_results, dict) and dept_results.get("success"):
                departments = dept_results["data"]["departments"]

            if isinstance(pos_results, dict) and pos_results.get("success"):
                positions = pos_results["data"]["positions"]

            self.search_results = {"departments": departments, "positions": positions}

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self._render_search_results()

        except Exception as e:
            logger.error(f"Error performing search: {e}")
            await self._render_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

        finally:
            self.is_searching = False
            self.loading_indicator.classes(add="hidden")

    async def _render_search_results(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.results_container.clear()

        departments = self.search_results["departments"]
        positions = self.search_results["positions"]

        total_results = len(departments) + len(positions)

        with self.results_container:
            if total_results == 0:
                await self._render_no_results()
                return

            # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with ui.card().classes("w-full"):
                with ui.card_section():
                    ui.label(
                        f"üéØ –ù–∞–π–¥–µ–Ω–æ: {len(positions)} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, {len(departments)} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"
                    ).classes("font-semibold text-primary")

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
            if positions:
                await self._render_positions_results(positions)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
            if departments:
                await self._render_departments_results(departments)

    async def _render_positions_results(self, positions: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
        with ui.card().classes("w-full"):
            with ui.card_section():
                ui.label(f"üë• –î–æ–ª–∂–Ω–æ—Å—Ç–∏ ({len(positions)})").classes(
                    "text-h6 font-bold mb-3"
                )

                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                positions_by_dept = {}
                for pos in positions:
                    dept = pos["department"]
                    if dept not in positions_by_dept:
                        positions_by_dept[dept] = []
                    positions_by_dept[dept].append(pos)

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º (–¥–æ 10 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                displayed_count = 0
                for dept_name, dept_positions in list(positions_by_dept.items())[:10]:
                    if displayed_count >= 20:  # –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        break

                    with ui.card().classes("w-full border-l-4 border-l-primary"):
                        with ui.card_section():
                            ui.label(f"üìÅ {dept_name}").classes(
                                "text-subtitle2 font-semibold text-primary mb-2"
                            )

                            for pos in dept_positions[
                                :3
                            ]:  # –î–æ 3 –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
                                if displayed_count >= 20:
                                    break

                                await self._render_position_item(pos)
                                displayed_count += 1

                            if len(dept_positions) > 3:
                                ui.label(
                                    f"... –∏ –µ—â–µ {len(dept_positions) - 3} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"
                                ).classes("text-caption text-gray-500 mt-1")

                if len(positions) > 20:
                    ui.label(
                        f"... –∏ –µ—â–µ {len(positions) - 20} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."
                    ).classes("text-caption text-gray-500 mt-3")

    async def _render_position_item(self, position: Dict):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        level_colors = {1: "red", 2: "orange", 3: "yellow", 4: "green", 5: "blue"}
        level_color = level_colors.get(position["level"], "gray")

        with ui.row().classes(
            "w-full items-center justify-between p-2 hover:bg-gray-50 rounded-lg"
        ):
            with ui.column().classes("flex-1"):
                with ui.row().classes("items-center space-x-2"):
                    ui.label(position["name"]).classes("font-medium")
                    ui.chip(f"–£—Ä–æ–≤–µ–Ω—å {position['level']}", color=level_color).props(
                        "size=sm"
                    )
                    ui.chip(position["category"], color="grey").props(
                        "size=sm outlined"
                    )

                ui.label(f"üìÅ {position['department']}").classes(
                    "text-caption text-gray-500"
                )

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            with ui.row().classes("space-x-1"):
                ui.button(
                    "–í—ã–±—Ä–∞—Ç—å",
                    icon="check_circle",
                    on_click=lambda pos=position: self._select_position(pos),
                ).props("size=sm color=primary")

                ui.button(
                    "–ü—Ä–æ—Ñ–∏–ª—å",
                    icon="description",
                    on_click=lambda pos=position: self._generate_profile(pos),
                ).props("size=sm color=secondary outlined")

    async def _render_departments_results(self, departments: List[Dict]):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"""
        with ui.card().classes("w-full"):
            with ui.card_section():
                ui.label(f"üè¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã ({len(departments)})").classes(
                    "text-h6 font-bold mb-3"
                )

                for dept in departments[:10]:  # –õ–∏–º–∏—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    with ui.row().classes(
                        "w-full items-center justify-between p-2 hover:bg-gray-50 rounded-lg"
                    ):
                        with ui.column().classes("flex-1"):
                            ui.label(dept["name"]).classes("font-medium")
                            ui.label(f"üóÇÔ∏è {dept['path']}").classes(
                                "text-caption text-gray-500"
                            )
                            ui.label(
                                f"üë• {dept['positions_count']} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"
                            ).classes("text-caption text-blue-600")

                        ui.button(
                            "–û–±–∑–æ—Ä",
                            icon="folder_open",
                            on_click=lambda d=dept: self._select_department(d),
                        ).props("size=sm color=primary outlined")

                if len(departments) > 10:
                    ui.label(
                        f"... –∏ –µ—â–µ {len(departments) - 10} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"
                    ).classes("text-caption text-gray-500 mt-2")

    async def _render_no_results(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with ui.card().classes("w-full text-center"):
            with ui.card_section():
                ui.icon("search_off", size="3rem").classes("text-gray-400 mb-2")
                ui.label(
                    f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{self.current_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                ).classes("text-h6 text-gray-600 mb-2")
                ui.label("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:").classes("text-body2 text-gray-500 mb-2")

                with ui.column().classes("space-y-1 text-left"):
                    ui.label("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å").classes(
                        "text-body2 text-gray-500"
                    )
                    ui.label(
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ä–∞–∑—Ä–∞–±' –≤–º–µ—Å—Ç–æ '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')"
                    ).classes("text-body2 text-gray-500")
                    ui.label("‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è").classes(
                        "text-body2 text-gray-500"
                    )

    async def _render_error(self, error_message: str):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞"""
        self.results_container.clear()

        with self.results_container:
            with ui.card().classes("w-full border-l-4 border-l-red-500"):
                with ui.card_section():
                    ui.icon("error", size="2rem").classes("text-red-500 mb-2")
                    ui.label("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞").classes("text-h6 text-red-600 font-bold")
                    ui.label(error_message).classes("text-body2 text-red-500")

    def _clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        if self.search_input:
            self.search_input.value = ""
        self._clear_results()

    def _clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.current_query = ""
        self.search_results = {"departments": [], "positions": []}
        if self.results_container:
            self.results_container.clear()

    async def _quick_search(self, query: str):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        if self.search_input:
            self.search_input.value = query
        await self._perform_search(query)

    def _select_position(self, position: Dict):
        """–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if self.on_position_selected:
            self.on_position_selected(position)

    def _select_department(self, department: Dict):
        """–í—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
        if self.on_department_selected:
            self.on_department_selected(department)

    def _generate_profile(self, position: Dict):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        if self.on_generate_profile:
            self.on_generate_profile(position)


class SmartSearchPage:
    """
    @doc
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–º–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ.

    Examples:
      python> page = SmartSearchPage(api_client)
      python> await page.render()
    """

    def __init__(self, api_client: APIClient):
        self.api_client = api_client
        self.search_component = SmartSearchComponent(api_client)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.search_component.on_position_selected = self._on_position_selected
        self.search_component.on_department_selected = self._on_department_selected
        self.search_component.on_generate_profile = self._on_generate_profile

    async def render(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞"""
        ui.page_title("üîç –ü–æ–∏—Å–∫ ‚Ä¢ A101 HR")

        with ui.column().classes("w-full max-w-6xl mx-auto p-4 space-y-6"):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            with ui.card().classes("w-full"):
                with ui.card_section():
                    ui.label("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏").classes(
                        "text-h4 font-bold text-primary"
                    )
                    ui.label(
                        "–ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"
                    ).classes("text-body1 text-gray-600")

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞
            await self.search_component.render()

            # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            with ui.card().classes("w-full"):
                with ui.card_section():
                    ui.label("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É").classes("text-h6 font-bold mb-3")

                    with ui.grid(columns=3).classes("gap-4"):
                        with ui.column().classes("space-y-2"):
                            ui.label("üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫").classes("font-semibold")
                            ui.label(
                                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"
                            ).classes("text-body2 text-gray-600")

                        with ui.column().classes("space-y-2"):
                            ui.label("üîç –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫").classes("font-semibold")
                            ui.label(
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è: '–∞—Ä—Ö–∏—Ç–µ–∫—Ç', '—Ä–∞–∑—Ä–∞–±', '–º–µ–Ω–µ–¥–∂–µ—Ä'"
                            ).classes("text-body2 text-gray-600")

                        with ui.column().classes("space-y-2"):
                            ui.label("‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã").classes("font-semibold")
                            ui.label(
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
                            ).classes("text-body2 text-gray-600")

    def _on_position_selected(self, position: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        logger.info(
            f"Position selected: {position['name']} in {position['department']}"
        )
        ui.notify(f"–í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position['name']}", type="positive")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –¥–µ—Ç–∞–ª—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ñ–æ—Ä–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    def _on_department_selected(self, department: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
        logger.info(f"Department selected: {department['name']}")
        ui.notify(f"–í—ã–±—Ä–∞–Ω –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department['name']}", type="info")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –æ–±–∑–æ—Ä—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

    def _on_generate_profile(self, position: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        logger.info(
            f"Profile generation requested for: {position['name']} in {position['department']}"
        )
        ui.notify(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è: {position['name']}", type="info")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Ñ–æ—Ä–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("‚úÖ Smart Search components created!")
    print("üîç Features:")
    print("  - Unified search across 4,376 positions and 510 departments")
    print("  - Real-time auto-complete with debounce")
    print("  - Quick filters for common searches")
    print("  - Integrated profile generation workflow")
