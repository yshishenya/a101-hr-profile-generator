"""
@doc
–ï–¥–∏–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è A101 HR Profile Generator.

–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º UltraThink:
- –û–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
- –û–¥–∏–Ω API –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ—Å—Ç–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
- –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–µ–∫—Ç–∞

Examples:
  python> stats = StatsComponent(api_client, "dashboard")
  python> await stats.render()
"""

from nicegui import ui
import logging
import asyncio
from typing import Literal, Optional

logger = logging.getLogger(__name__)


class StatsComponent:
    """
    @doc
    –ï–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.

    –°—Ç–∏–ª–∏:
    - "dashboard": –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π
    - "compact": –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    - "minimal": –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è header

    Examples:
      python> stats = StatsComponent(api_client, "dashboard")
      python> await stats.render()
    """

    def __init__(
        self,
        api_client,
        style: Literal["dashboard", "compact", "minimal"] = "dashboard",
    ):
        self.api_client = api_client
        self.style = style

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.positions_label = None
        self.profiles_label = None
        self.progress_text = None
        self.status_chip = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_data = None
        self.refresh_timer = None

    async def render(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        if self.style == "dashboard":
            await self._render_dashboard()
        elif self.style == "compact":
            await self._render_compact()
        elif self.style == "minimal":
            await self._render_minimal()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await self._load_and_update()
        self._setup_refresh()

    async def _render_dashboard(self):
        """–ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è dashboard"""
        with ui.card().classes("w-full mb-4 shadow-sm"):
            with ui.card_section().classes("p-4"):
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                with ui.row().classes("items-center justify-between mb-4"):
                    ui.label("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã").classes(
                        "text-h6 text-primary font-medium"
                    )
                    self.status_chip = ui.chip("–ó–∞–≥—Ä—É–∑–∫–∞", color="grey").props(
                        "size=sm"
                    )

                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É - –ï–î–ò–ù–û–û–ë–†–ê–ó–ù–û
                with ui.row().classes("w-full justify-between gap-4"):
                    # –î–æ–ª–∂–Ω–æ—Å—Ç–∏
                    with ui.column().classes("items-center"):
                        self.positions_label = ui.label("1,553").classes(
                            "text-h4 font-bold text-primary"
                        )
                        ui.label("–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π").classes("text-body2 text-grey-6")

                    # –ü—Ä–æ—Ñ–∏–ª–∏
                    with ui.column().classes("items-center"):
                        self.profiles_label = ui.label("2").classes(
                            "text-h4 font-bold text-primary"
                        )
                        ui.label("—Å–æ–∑–¥–∞–Ω–æ").classes("text-body2 text-grey-6")

                    # –ü–æ–∫—Ä—ã—Ç–∏–µ - –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
                    with ui.column().classes("items-center"):
                        self.progress_text = ui.label("0.1%").classes(
                            "text-h4 font-bold text-primary"
                        )
                        ui.label("–ø–æ–∫—Ä—ã—Ç–∏–µ").classes("text-body2 text-grey-6")

    async def _render_compact(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        with ui.card().classes("w-full mb-4 shadow-sm"):
            with ui.card_section().classes("p-3"):
                with ui.row().classes("items-center justify-between"):
                    ui.label("üìä –°–∏—Å—Ç–µ–º–∞").classes("text-h6 text-primary font-medium")
                    self.status_chip = ui.chip("–ì–æ—Ç–æ–≤", color="positive").props(
                        "size=xs"
                    )

                # –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
                with ui.row().classes("w-full justify-between mt-3"):
                    with ui.column().classes("items-center"):
                        self.positions_label = ui.label("1,553").classes(
                            "text-h6 font-bold text-primary"
                        )
                        ui.label("–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π").classes("text-caption text-grey-6")

                    with ui.column().classes("items-center"):
                        self.profiles_label = ui.label("2").classes(
                            "text-h6 font-bold text-primary"
                        )
                        ui.label("—Å–æ–∑–¥–∞–Ω–æ").classes("text-caption text-grey-6")

                    with ui.column().classes("items-center"):
                        self.progress_text = ui.label("0.1%").classes(
                            "text-h6 font-bold text-primary"
                        )
                        ui.label("–ø–æ–∫—Ä—ã—Ç–∏–µ").classes("text-caption text-grey-6")

    async def _render_minimal(self):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è header"""
        with ui.row().classes("items-center gap-3"):
            ui.icon("analytics", size="1rem").classes("text-white opacity-70")
            self.positions_label = ui.label("1,553").classes(
                "text-body2 text-white font-medium"
            )
            ui.label("–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π").classes("text-body2 text-white opacity-60")
            ui.label("‚Ä¢").classes("text-white opacity-40")
            self.profiles_label = ui.label("2").classes(
                "text-body2 text-white font-medium"
            )
            ui.label("–ø—Ä–æ—Ñ–∏–ª–µ–π").classes("text-body2 text-white opacity-60")

    async def _load_and_update(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = await self.api_client.get_dashboard_stats()
            if data:
                await self._update_ui(data)
                self.last_data = data
                logger.debug(
                    f"Stats updated: {data['profiles_count']} of {data['positions_count']}"
                )
        except Exception as e:
            logger.error(f"Error loading stats: {e}")
            await self._show_error_state()

    async def _update_ui(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        positions = data.get("positions_count", 1553)
        profiles = data.get("profiles_count", 0)
        completion = data.get("completion_percentage", 0)
        active_tasks = data.get("active_tasks_count", 0)

        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
        if self.positions_label:
            self.positions_label.text = f"{positions:,}"
        if self.profiles_label:
            self.profiles_label.text = f"{profiles:,}"
        if self.progress_text:
            self.progress_text.text = f"{completion:.1f}%"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if self.status_chip:
            if active_tasks > 0:
                self.status_chip.set_text(f"üîÑ {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                self.status_chip.props("color=orange")
            else:
                import time

                update_time = time.strftime("%H:%M")
                self.status_chip.set_text(f"‚úÖ {update_time}")
                self.status_chip.props("color=positive")

    async def _show_error_state(self):
        """–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        if self.status_chip:
            self.status_chip.set_text("‚ö†Ô∏è –û—à–∏–±–∫–∞")
            self.status_chip.props("color=negative")

    def _setup_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"""
        if self.style in ["dashboard", "compact"]:  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º minimal –≤ header
            self.refresh_timer = ui.timer(120, self._auto_refresh)

    async def _auto_refresh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            await self._load_and_update()
        except Exception as e:
            logger.error(f"Auto refresh failed: {e}")

    async def manual_refresh(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            await self._load_and_update()
            if self.style != "minimal":
                ui.notify("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", type="positive")
        except Exception as e:
            logger.error(f"Manual refresh failed: {e}")
            if self.style != "minimal":
                ui.notify("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", type="negative")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.refresh_timer:
            self.refresh_timer.cancel()


if __name__ == "__main__":
    print("‚úÖ StatsComponent - Simple unified statistics solution")
    print("üé® Styles: dashboard, compact, minimal")
    print("üöÄ Features: Single API call, auto-refresh, Material Design")
