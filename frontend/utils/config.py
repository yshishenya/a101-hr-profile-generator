"""
@doc
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è A101 HR Profile Generator.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ environment variables –¥–ª—è 
–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend API –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI.

Examples:
  python> config = FrontendConfig()
  python> print(config.BACKEND_URL)  # http://localhost:8022
"""

import os
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
  from dotenv import load_dotenv
  
  # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç frontend/)
  env_path = Path(__file__).parent.parent.parent / ".env"
  if env_path.exists():
    load_dotenv(env_path)
    print(f"‚úÖ Frontend loaded environment from: {env_path}")
  else:
    print(f"‚ö†Ô∏è  .env file not found at: {env_path}")
    
except ImportError:
  print("üì¶ python-dotenv not available, using system environment variables only")


class FrontendConfig:
  """
  @doc
  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
  
  –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ NiceGUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  —á–µ—Ä–µ–∑ environment variables.
  
  Examples:
    python> config = FrontendConfig()
    python> print(f"Backend: {config.BACKEND_URL}")
    python> print(f"Debug: {config.DEBUG}")
  """
  
  # =============================================================================
  # NiceGUI Server Settings
  # =============================================================================
  
  HOST: str = os.getenv("FRONTEND_HOST", "0.0.0.0")
  PORT: int = int(os.getenv("FRONTEND_PORT", "8033"))
  TITLE: str = os.getenv("FRONTEND_TITLE", "A101 HR Profile Generator")
  
  # =============================================================================
  # Environment & Debug
  # =============================================================================
  
  ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
  DEBUG: bool = ENVIRONMENT == "development"
  
  # =============================================================================
  # Backend Integration
  # =============================================================================
  
  BACKEND_HOST: str = os.getenv("BACKEND_HOST", "localhost")
  BACKEND_PORT: int = int(os.getenv("BACKEND_PORT", "8022"))
  
  @property
  def BACKEND_URL(self) -> str:
    """URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastAPI backend"""
    # –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    protocol = "http"
    return f"{protocol}://{self.BACKEND_HOST}:{self.BACKEND_PORT}"
  
  # =============================================================================
  # API Settings
  # =============================================================================
  
  API_TIMEOUT: int = int(os.getenv("API_TIMEOUT", "30"))  # seconds
  API_RETRY_ATTEMPTS: int = int(os.getenv("API_RETRY_ATTEMPTS", "3"))
  
  # =============================================================================
  # UI Settings
  # =============================================================================
  
  THEME: str = os.getenv("FRONTEND_THEME", "auto")  # auto, light, dark
  LANGUAGE: str = os.getenv("FRONTEND_LANGUAGE", "ru")  # ru, en
  
  # Material Design colors
  PRIMARY_COLOR: str = os.getenv("PRIMARY_COLOR", "blue")
  SECONDARY_COLOR: str = os.getenv("SECONDARY_COLOR", "grey")
  
  # =============================================================================
  # Session & Auth
  # =============================================================================
  
  SESSION_TIMEOUT_MINUTES: int = int(os.getenv("SESSION_TIMEOUT_MINUTES", "60"))
  AUTO_REFRESH_TOKEN: bool = os.getenv("AUTO_REFRESH_TOKEN", "true").lower() == "true"
  STORAGE_SECRET: str = os.getenv("STORAGE_SECRET", "a101hr-frontend-storage-secret-key")
  
  # =============================================================================
  # Features Flags
  # =============================================================================
  
  ENABLE_REGISTRATION: bool = os.getenv("ENABLE_REGISTRATION", "false").lower() == "true"
  ENABLE_PASSWORD_RESET: bool = os.getenv("ENABLE_PASSWORD_RESET", "false").lower() == "true"
  ENABLE_DARK_MODE_TOGGLE: bool = os.getenv("ENABLE_DARK_MODE_TOGGLE", "true").lower() == "true"
  
  # =============================================================================
  # Static Files
  # =============================================================================
  
  STATIC_DIR: str = os.getenv("FRONTEND_STATIC_DIR", "frontend/static")
  FAVICON_PATH: str = os.getenv("FAVICON_PATH", "üè¢")  # Emoji –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  
  # =============================================================================
  # Logging
  # =============================================================================
  
  LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
  ENABLE_REQUEST_LOGGING: bool = os.getenv("ENABLE_REQUEST_LOGGING", "false").lower() == "true"
  
  # =============================================================================
  # Development Settings
  # =============================================================================
  
  HOT_RELOAD: bool = DEBUG
  AUTO_OPEN_BROWSER: bool = DEBUG
  SHOW_NICEGUI_LOGS: bool = DEBUG
  
  # =============================================================================
  # Validation & Utilities
  # =============================================================================
  
  def validate(self) -> bool:
    """
    @doc
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    –¥–ª—è production –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Examples:
      python> config = FrontendConfig()
      python> if not config.validate(): print("Configuration issues found")
    """
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
    if not self.BACKEND_HOST or not self.BACKEND_PORT:
      issues.append("‚ùå Backend host/port –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º production –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if self.ENVIRONMENT == "production":
      if self.DEBUG:
        issues.append("‚ö†Ô∏è  DEBUG –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ production!")
      
      if self.HOST == "0.0.0.0" and self.PORT == 8033:
        issues.append("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ production!")
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if issues:
      print("üö® –ü–†–û–ë–õ–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò FRONTEND:")
      for issue in issues:
        print(f"  {issue}")
      return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è frontend –≤–∞–ª–∏–¥–Ω–∞")
    return True
  
  def print_summary(self):
    """
    @doc
    –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend.
    
    –í—ã–≤–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    
    Examples:
      python> config.print_summary()
      python> # –í—ã–≤–æ–¥–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    
    print(f"""
üé® A101 HR Frontend Configuration Summary:
   Environment: {self.ENVIRONMENT}
   Debug: {self.DEBUG}
   Server: {self.HOST}:{self.PORT}
   Backend: {self.BACKEND_URL}
   Theme: {self.THEME}
   Language: {self.LANGUAGE}
   API Timeout: {self.API_TIMEOUT}s
   Session Timeout: {self.SESSION_TIMEOUT_MINUTES}m
   Hot Reload: {self.HOT_RELOAD}
   Auto Open Browser: {self.AUTO_OPEN_BROWSER}
        """)
  
  def get_nicegui_config(self) -> dict:
    """
    @doc
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ui.run().
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ NiceGUI —Å–µ—Ä–≤–µ—Ä–∞.
    
    Examples:
      python> config = FrontendConfig()
      python> ui.run(**config.get_nicegui_config())
    """
    
    return {
      'host': self.HOST,
      'port': self.PORT,
      'title': self.TITLE,
      'favicon': self.FAVICON_PATH,
      'dark': self.THEME if self.THEME != 'auto' else None,
      'reload': self.HOT_RELOAD,
      'show': self.AUTO_OPEN_BROWSER
    }


# =============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
# =============================================================================

def get_version() -> str:
  """
  @doc
  –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ environment –∏–ª–∏ —Ñ–∞–π–ª–∞.
  
  –ò—â–µ—Ç –≤–µ—Ä—Å–∏—é –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è VERSION –∏–ª–∏ —Ñ–∞–π–ª–µ –≤–µ—Ä—Å–∏–∏.
  
  Examples:
    python> version = get_version()
    python> print(f"Version: {version}")
  """
  
  # –ò–∑ environment variable
  version = os.getenv("VERSION")
  if version:
    return version
  
  # –ò–∑ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
  try:
    version_file = Path(__file__).parent.parent.parent / "VERSION"
    if version_file.exists():
      return version_file.read_text().strip()
  except:
    pass
  
  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return "1.0.0-dev"


def is_production() -> bool:
  """–ü—Ä–æ–≤–µ—Ä–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
  return FrontendConfig().ENVIRONMENT == "production"


def is_development() -> bool:
  """–ü—Ä–æ–≤–µ—Ä–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
  return FrontendConfig().ENVIRONMENT == "development"


def get_static_path() -> Path:
  """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º"""
  return Path(__file__).parent.parent / "static"


# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# =============================================================================

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
config = FrontendConfig()


if __name__ == "__main__":
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  print("üß™ Testing A101 HR Frontend Configuration...")
  
  config.print_summary()
  config.validate()
  
  print(f"\nüìã NiceGUI config: {config.get_nicegui_config()}")
  print(f"üì¶ Version: {get_version()}")
  print(f"üè≠ Production: {is_production()}")
  print(f"üõ†Ô∏è  Development: {is_development()}")
  
  print("\n‚úÖ Frontend configuration test completed!")