#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ A101 HR Frontend
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞: local, docker, docker-compose

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "üé® A101 HR Frontend Starter"
    echo ""
    echo "Usage: $0 [mode] [options]"
    echo ""
    echo "Modes:"
    echo "  local         - –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ Python"
    echo "  docker        - –ó–∞–ø—É—Å–∫ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ (—Ç–æ–ª—å–∫–æ frontend)"
    echo "  compose       - –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose (frontend + backend)"
    echo "  compose-dev   - –ó–∞–ø—É—Å–∫ frontend —á–µ—Ä–µ–∑ docker-compose –≤ dev —Ä–µ–∂–∏–º–µ"
    echo ""
    echo "Options:"
    echo "  --build       - –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
    echo "  --logs        - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"
    echo "  --help, -h    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "Examples:"
    echo "  $0 local                    # –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ"
    echo "  $0 docker --build          # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤ Docker"
    echo "  $0 compose --logs          # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ compose —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ª–æ–≥–æ–≤"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    if [[ "$1" == "local" ]]; then
        if ! command -v python3 &> /dev/null; then
            log_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.11+"
            exit 1
        fi
        
        if ! python3 -c "import nicegui" &> /dev/null; then
            log_warning "NiceGUI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            pip install -r requirements.txt
        fi
    else
        if ! command -v docker &> /dev/null; then
            log_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker"
            exit 1
        fi
        
        if [[ "$1" == "compose"* ]]; then
            if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
                log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
                exit 1
            fi
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
check_backend() {
    local backend_url="$1"
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend: $backend_url"
    
    if curl -s -f "$backend_url/health" > /dev/null; then
        log_success "Backend –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        log_warning "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $backend_url"
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
start_local() {
    log_info "üöÄ –ó–∞–ø—É—Å–∫ A101 HR Frontend –ª–æ–∫–∞–ª—å–Ω–æ..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if [[ ! -f ".env" ]]; then
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–∑ .env.example"
        cp .env.example .env
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
    if ! check_backend "http://localhost:8022"; then
        log_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: python -m backend.main"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º frontend
    export PYTHONPATH="$PROJECT_ROOT"
    cd frontend
    python main.py
}

# –ó–∞–ø—É—Å–∫ –≤ Docker
start_docker() {
    local build_flag=""
    if [[ "$2" == "--build" ]]; then
        build_flag="--build"
        log_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    fi
    
    log_info "üê≥ –ó–∞–ø—É—Å–∫ A101 HR Frontend –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –Ω–∞ —Ö–æ—Å—Ç –º–∞—à–∏–Ω–µ
    if ! check_backend "http://localhost:8022"; then
        log_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º 'compose'"
    fi
    
    docker-compose -f docker-compose.frontend.yml up $build_flag
}

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose (–ø–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
start_compose() {
    local build_flag=""
    local logs_flag=""
    
    for arg in "$@"; do
        case $arg in
            --build)
                build_flag="--build"
                log_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
                ;;
            --logs)
                logs_flag="--follow"
                ;;
        esac
    done
    
    log_info "üê≥ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã A101 HR —á–µ—Ä–µ–∑ docker-compose..."
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if [[ -n "$logs_flag" ]]; then
        docker-compose up $build_flag --detach
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–µ"
        log_info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        echo ""
        log_info "üì± URLs:"
        log_info "  Frontend: http://localhost:8033"
        log_info "  Backend:  http://localhost:8022"
        echo ""
        log_info "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤..."
        docker-compose logs --follow
    else
        docker-compose up $build_flag
    fi
}

# –ó–∞–ø—É—Å–∫ frontend –≤ dev —Ä–µ–∂–∏–º–µ
start_compose_dev() {
    local build_flag=""
    
    if [[ "$2" == "--build" ]]; then
        build_flag="--build"
        log_info "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    fi
    
    log_info "üê≥ –ó–∞–ø—É—Å–∫ A101 HR Frontend –≤ dev —Ä–µ–∂–∏–º–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend –Ω–∞ —Ö–æ—Å—Ç –º–∞—à–∏–Ω–µ
    if ! check_backend "http://localhost:8022"; then
        log_error "Backend –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è dev —Ä–µ–∂–∏–º–∞"
        log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python -m backend.main"
        exit 1
    fi
    
    docker-compose -f docker-compose.frontend.yml up $build_flag
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local mode="${1:-local}"
    
    case "$mode" in
        "--help"|"-h")
            show_help
            exit 0
            ;;
        "local")
            check_dependencies "local"
            start_local
            ;;
        "docker")
            check_dependencies "docker"
            start_docker "$@"
            ;;
        "compose")
            check_dependencies "compose"
            start_compose "$@"
            ;;
        "compose-dev")
            check_dependencies "compose"
            start_compose_dev "$@"
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
trap 'echo -e "\n${YELLOW}[INFO]${NC} –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏..."; exit 0' INT

# –ó–∞–ø—É—Å–∫
log_info "üè¢ A101 HR Profile Generator - Frontend Starter"
main "$@"