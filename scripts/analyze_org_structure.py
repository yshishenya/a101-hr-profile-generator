#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ 100% KPI –º–∞–ø–ø–∏–Ω–≥–∞.

–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è.
"""

import sys
import json
from pathlib import Path
from collections import defaultdict
from typing import Dict, List, Any, Set

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from backend.core.organization_cache import organization_cache


def analyze_hierarchy_levels() -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–Ω–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
    """
    print("üîç Analyzing organization hierarchy levels...\n")

    all_depts = organization_cache.get_all_departments()
    dept_index = organization_cache.get_department_index()

    # –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—è–º
    levels_stats = defaultdict(list)
    max_depth = 0

    for dept_name in all_depts:
        dept_info = dept_index.get(dept_name)
        if not dept_info:
            continue

        path = dept_info["path"]
        # –£–±–∏—Ä–∞–µ–º "–ì–ö –ê101" –∏–∑ –ø–æ–¥—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π
        path_parts = [p.strip() for p in path.split("/") if p.strip() and p.strip() != "–ì–ö –ê101"]
        level = len(path_parts)
        max_depth = max(max_depth, level)

        levels_stats[level].append({
            'name': dept_name,
            'path': path,
            'path_parts': path_parts
        })

    return {
        'max_depth': max_depth,
        'levels': levels_stats,
        'total_departments': len(all_depts)
    }


def analyze_top_level_blocks() -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (Level 1).

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∞—Ö –∏ –∏—Ö –ø–æ–¥–¥–µ—Ä–µ–≤—å—è—Ö
    """
    print("üì¶ Analyzing top-level blocks...\n")

    all_depts = organization_cache.get_all_departments()
    dept_index = organization_cache.get_department_index()

    # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    blocks = defaultdict(lambda: {
        'subdepartments': [],
        'total_count': 0,
        'levels': defaultdict(int)
    })

    for dept_name in all_depts:
        dept_info = dept_index.get(dept_name)
        if not dept_info:
            continue

        path = dept_info["path"]
        path_parts = [p.strip() for p in path.split("/") if p.strip() and p.strip() != "–ì–ö –ê101"]

        if not path_parts:
            continue

        # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç = –±–ª–æ–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        block_name = path_parts[0]
        level = len(path_parts)

        blocks[block_name]['subdepartments'].append(dept_name)
        blocks[block_name]['total_count'] += 1
        blocks[block_name]['levels'][level] += 1

    return dict(blocks)


def analyze_kpi_files() -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ KPI —Ñ–∞–π–ª—ã.

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ KPI —Ñ–∞–π–ª–∞—Ö
    """
    print("üìÑ Analyzing existing KPI files...\n")

    kpi_dir = Path("data/KPI")
    kpi_files = list(kpi_dir.glob("KPI_*.md"))

    kpi_info = {}
    for kpi_file in kpi_files:
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        with open(kpi_file, 'r', encoding='utf-8') as f:
            first_lines = [f.readline().strip() for _ in range(5)]

        kpi_info[kpi_file.name] = {
            'path': str(kpi_file),
            'size': kpi_file.stat().st_size,
            'preview': first_lines
        }

    return kpi_info


def find_kpi_to_block_mapping(blocks: Dict[str, Any], kpi_files: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ KPI —Ñ–∞–π–ª–æ–≤ –∫ –±–ª–æ–∫–∞–º.

    Args:
        blocks: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∞—Ö
        kpi_files: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ KPI —Ñ–∞–π–ª–∞—Ö

    Returns:
        –ú–∞–ø–ø–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
    """
    print("üîó Mapping KPI files to blocks...\n")

    mapping = {}

    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö KPI
    known_mappings = {
        'KPI_–î–ò–¢.md': '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        'KPI_–î–†–†.md': '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
        'KPI_–î–ü–£.md': '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω',  # —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        'KPI_–£–í–ê–∏–ö.md': '–∞—É–¥–∏—Ç',
        'KPI_–ê–°.md': '–∞—Ä—Ö–∏—Ç–µ–∫—Ç',
        'KPI_–ü–†–ü.md': '–ø–µ—Ä—Å–æ–Ω–∞–ª',
        'KPI_–¶–∏—Ñ—Ä–∞.md': '—Ü–∏—Ñ—Ä–æ–≤',
        'KPI_–ó–∞–∫—É–ø–∫–∏.md': '–∑–∞–∫—É–ø–∫',
    }

    for kpi_file in kpi_files:
        mapped_blocks = []
        for block_name in blocks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
            for pattern in known_mappings.get(kpi_file, '').lower().split():
                if pattern in block_name.lower():
                    mapped_blocks.append(block_name)
                    break

        mapping[kpi_file] = mapped_blocks

    return mapping


def calculate_coverage_potential(
    blocks: Dict[str, Any],
    kpi_mapping: Dict[str, Any]
) -> Dict[str, Any]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ block-level –º–∞–ø–ø–∏–Ω–≥–µ.

    Returns:
        –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
    """
    print("üìä Calculating coverage potential...\n")

    covered_depts = set()
    uncovered_blocks = []

    for kpi_file, mapped_blocks in kpi_mapping.items():
        for block_name in mapped_blocks:
            if block_name in blocks:
                covered_depts.update(blocks[block_name]['subdepartments'])

    # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏
    for block_name, block_info in blocks.items():
        is_covered = False
        for mapped_blocks in kpi_mapping.values():
            if block_name in mapped_blocks:
                is_covered = True
                break

        if not is_covered:
            uncovered_blocks.append({
                'name': block_name,
                'departments_count': block_info['total_count']
            })

    return {
        'covered_departments': len(covered_depts),
        'uncovered_blocks': uncovered_blocks,
        'coverage_percentage': len(covered_depts) / 510 * 100 if 510 > 0 else 0
    }


def propose_100_percent_strategy(
    blocks: Dict[str, Any],
    kpi_files: Dict[str, Any],
    uncovered_blocks: List[Dict[str, Any]]
) -> Dict[str, Any]:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –ø–æ–∫—Ä—ã—Ç–∏—è.

    Returns:
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤—ã—Ö KPI –∏–ª–∏ –º–∞–ø–ø–∏–Ω–≥—É
    """
    print("üí° Proposing 100% coverage strategy...\n")

    strategies = []

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°–æ–∑–¥–∞—Ç—å KPI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø–æ–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞
    new_kpi_files_needed = []
    for block_info in uncovered_blocks:
        block_name = block_info['name']
        # –°–æ–∑–¥–∞–µ–º –∏–º—è KPI —Ñ–∞–π–ª–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª–æ–∫–∞

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É
        words = block_name.split()
        if len(words) >= 2:
            acronym = ''.join(w[0].upper() for w in words if w.lower() not in ['–∏', '–ø–æ', '–¥–ª—è', '—Å', '–≤'])
        else:
            acronym = block_name[:3].upper()

        suggested_filename = f"KPI_{acronym}.md"
        new_kpi_files_needed.append({
            'block': block_name,
            'suggested_filename': suggested_filename,
            'departments_count': block_info['departments_count'],
            'priority': 'high' if block_info['departments_count'] > 20 else 'medium'
        })

    strategies.append({
        'name': 'Create new KPI files for uncovered blocks',
        'description': f'–°–æ–∑–¥–∞—Ç—å {len(new_kpi_files_needed)} –Ω–æ–≤—ã—Ö KPI —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤',
        'new_files': new_kpi_files_needed,
        'coverage_impact': '100%'
    })

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π KPI
    # (–¥–ª—è –±–ª–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–ª–æ–∫-—É—Ä–æ–≤–Ω–µ–≤—ã–π fallback
    strategies.append({
        'name': 'Universal block-level fallback',
        'description': '–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π KPI_UNIVERSAL.md –¥–ª—è –≤—Å–µ—Ö –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –±–ª–æ–∫–æ–≤',
        'new_files': ['KPI_UNIVERSAL.md'],
        'coverage_impact': '100%'
    })

    return {
        'recommended_strategy': strategies[0],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã
        'alternative_strategies': strategies[1:],
        'total_new_files_needed': len(new_kpi_files_needed)
    }


def main():
    """Main entry point."""
    print("=" * 80)
    print("üî¨ DEEP ORGANIZATION STRUCTURE ANALYSIS")
    print("   Goal: Design 100% KPI coverage strategy")
    print("=" * 80)
    print()

    # 1. –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
    hierarchy = analyze_hierarchy_levels()
    print(f"üìä Hierarchy Depth: {hierarchy['max_depth']} levels")
    print(f"üìä Total Departments: {hierarchy['total_departments']}")
    print()

    for level in sorted(hierarchy['levels'].keys()):
        count = len(hierarchy['levels'][level])
        print(f"   Level {level}: {count} departments")
    print()

    # 2. –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    blocks = analyze_top_level_blocks()
    print(f"üì¶ Top-level Blocks: {len(blocks)}")
    print()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
    sorted_blocks = sorted(blocks.items(), key=lambda x: x[1]['total_count'], reverse=True)

    print("   Top 10 blocks by department count:")
    for i, (block_name, block_info) in enumerate(sorted_blocks[:10], 1):
        print(f"   {i:2d}. {block_name}")
        print(f"       ‚îî‚îÄ {block_info['total_count']} departments")
    print()

    print(f"   All {len(blocks)} blocks:")
    for block_name, block_info in sorted_blocks:
        print(f"   ‚Ä¢ {block_name}: {block_info['total_count']} depts")
    print()

    # 3. –ê–Ω–∞–ª–∏–∑ KPI —Ñ–∞–π–ª–æ–≤
    kpi_files = analyze_kpi_files()
    print(f"üìÑ Existing KPI Files: {len(kpi_files)}")
    for kpi_file in sorted(kpi_files.keys()):
        print(f"   ‚Ä¢ {kpi_file}")
    print()

    # 4. –ú–∞–ø–ø–∏–Ω–≥ KPI –∫ –±–ª–æ–∫–∞–º
    kpi_mapping = find_kpi_to_block_mapping(blocks, kpi_files)
    print("üîó KPI to Block Mapping:")
    for kpi_file, mapped_blocks in kpi_mapping.items():
        if mapped_blocks:
            print(f"   {kpi_file} ‚Üí {', '.join(mapped_blocks)}")
        else:
            print(f"   {kpi_file} ‚Üí ‚ö†Ô∏è No blocks matched")
    print()

    # 5. –†–∞—Å—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
    coverage = calculate_coverage_potential(blocks, kpi_mapping)
    print(f"üìä Current Block-Level Coverage Potential:")
    print(f"   Covered departments: {coverage['covered_departments']}/510")
    print(f"   Coverage: {coverage['coverage_percentage']:.1f}%")
    print(f"   Uncovered blocks: {len(coverage['uncovered_blocks'])}")
    print()

    if coverage['uncovered_blocks']:
        print("   Uncovered blocks (need KPI files):")
        sorted_uncovered = sorted(
            coverage['uncovered_blocks'],
            key=lambda x: x['departments_count'],
            reverse=True
        )
        for block_info in sorted_uncovered:
            print(f"   ‚ö†Ô∏è  {block_info['name']}: {block_info['departments_count']} depts")
        print()

    # 6. –°—Ç—Ä–∞—Ç–µ–≥–∏—è 100% –ø–æ–∫—Ä—ã—Ç–∏—è
    strategy = propose_100_percent_strategy(blocks, kpi_files, coverage['uncovered_blocks'])

    print("=" * 80)
    print("üí° RECOMMENDED 100% COVERAGE STRATEGY")
    print("=" * 80)
    print()

    rec_strategy = strategy['recommended_strategy']
    print(f"Strategy: {rec_strategy['name']}")
    print(f"Description: {rec_strategy['description']}")
    print(f"Impact: {rec_strategy['coverage_impact']} coverage")
    print()

    if 'new_files' in rec_strategy:
        print(f"üìù New KPI files needed: {len(rec_strategy['new_files'])}")
        print()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        high_priority = [f for f in rec_strategy['new_files'] if f.get('priority') == 'high']
        medium_priority = [f for f in rec_strategy['new_files'] if f.get('priority') == 'medium']

        if high_priority:
            print(f"   üî¥ HIGH PRIORITY ({len(high_priority)} files):")
            for file_info in sorted(high_priority, key=lambda x: x['departments_count'], reverse=True):
                print(f"      ‚Ä¢ {file_info['suggested_filename']}")
                print(f"        Block: {file_info['block']}")
                print(f"        Impact: {file_info['departments_count']} departments")
                print()

        if medium_priority:
            print(f"   üü° MEDIUM PRIORITY ({len(medium_priority)} files):")
            for file_info in sorted(medium_priority, key=lambda x: x['departments_count'], reverse=True):
                print(f"      ‚Ä¢ {file_info['suggested_filename']}")
                print(f"        Block: {file_info['block']}")
                print(f"        Impact: {file_info['departments_count']} departments")
                print()

    print("=" * 80)
    print("‚úÖ ANALYSIS COMPLETE")
    print("=" * 80)
    print()

    # Save detailed analysis
    output_path = Path("docs/analysis/100_PERCENT_KPI_STRATEGY.json")
    output_path.parent.mkdir(parents=True, exist_ok=True)

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump({
            'hierarchy': {
                'max_depth': hierarchy['max_depth'],
                'total_departments': hierarchy['total_departments'],
                'levels_distribution': {
                    str(k): len(v) for k, v in hierarchy['levels'].items()
                }
            },
            'blocks': {
                name: {
                    'total_count': info['total_count'],
                    'levels_distribution': dict(info['levels'])
                }
                for name, info in blocks.items()
            },
            'kpi_files': list(kpi_files.keys()),
            'coverage': coverage,
            'strategy': strategy
        }, f, ensure_ascii=False, indent=2)

    print(f"üìä Detailed analysis saved to: {output_path}")


if __name__ == "__main__":
    main()
