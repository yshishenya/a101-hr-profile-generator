#!/usr/bin/env python3
"""
–ù–∞—Ö–æ–¥–∏—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –∏–∑ KPI —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.

–ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¢–û–ß–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ KPI —Ñ–∞–π–ª–æ–≤ –∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º,
–±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞.
"""

import sys
import json
from pathlib import Path
from typing import Dict, List, Optional

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from backend.core.organization_cache import organization_cache


# –ú–∞–ø–ø–∏–Ω–≥ KPI —Ñ–∞–π–ª–æ–≤ –∫ –∏—Ö –†–ï–ê–õ–¨–ù–´–ú –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º (–∏–∑ headers —Ñ–∞–π–ª–æ–≤)
KPI_TO_REAL_DEPARTMENT = {
    'KPI_–î–ò–¢.md': [
        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        '–î–ò–¢',
    ],
    'KPI_–î–†–†.md': [
        '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
        '–î–†–†',
    ],
    'KPI_–î–ü–£.md': [
        '–î–∏—Ä–µ–∫—Ü–∏—è –ü–£',
        '–î–ü–£',
        '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω',
    ],
    'KPI_–£–í–ê–∏–ö.md': [
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞—É–¥–∏—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è',
        '–£–í–ê–∏–ö',
        '–∞—É–¥–∏—Ç',
        '–∫–æ–Ω—Ç—Ä–æ–ª—å',
    ],
    'KPI_–ê–°.md': [
        '–û—Ç–¥–µ–ª –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        '–∞–Ω–∞–ª–∏–∑–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
    ],
    'KPI_–ü–†–ü.md': [
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
    ],
    'KPI_–¶–∏—Ñ—Ä–∞.md': [
        '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è',
        '—Ü–∏—Ñ—Ä–æ–≤—ã—Ö',
    ],
    'KPI_–ó–∞–∫—É–ø–∫–∏.md': [
        '–∑–∞–∫—É–ø–∫',
        '–∑–∞–∫—É–ø–æ–∫',
    ],
    'KPI_DIT.md': [
        # Legacy —Ñ–∞–π–ª, –¥—É–±–ª–∏–∫–∞—Ç –î–ò–¢
    ],
}


def find_department_in_structure(keywords: List[str]) -> Optional[tuple]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.

    Args:
        keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞

    Returns:
        Tuple (dept_name, dept_info) –∏–ª–∏ None
    """
    all_depts = organization_cache.get_all_departments()
    dept_index = organization_cache.get_department_index()

    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for keyword in keywords:
        if keyword in all_depts:
            return (keyword, dept_index.get(keyword))

    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for keyword in keywords:
        keyword_lower = keyword.lower()
        for dept_name in all_depts:
            if keyword_lower in dept_name.lower():
                return (dept_name, dept_index.get(dept_name))

    return None


def extract_block(path: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏–∑ –ø—É—Ç–∏."""
    parts = [p.strip() for p in path.split('/') if p.strip()]

    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ "–ì–ö –ê101"
    for part in parts:
        if part != '–ì–ö –ê101':
            return part

    return None


def main():
    """Main entry point."""
    print("=" * 80)
    print("üîç –¢–û–ß–ù–´–ô –ü–û–ò–°–ö KPI –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–û–í –í –°–¢–†–£–ö–¢–£–†–ï")
    print("=" * 80)
    print()

    kpi_to_block_mapping = {}
    kpi_details = {}

    for kpi_file, keywords in KPI_TO_REAL_DEPARTMENT.items():
        print(f"üìÑ {kpi_file}")

        if not keywords:
            print(f"   ‚ö†Ô∏è  Legacy —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            print()
            continue

        # –ò—â–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        result = find_department_in_structure(keywords)

        if result:
            dept_name, dept_info = result
            path = dept_info['path']
            block = extract_block(path)

            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {dept_name}")
            print(f"   üìÇ –ü—É—Ç—å: {path}")
            print(f"   üè¢ –ë–ª–æ–∫: {block}")

            kpi_details[kpi_file] = {
                'department': dept_name,
                'path': path,
                'block': block,
                'keywords': keywords,
            }

            if block:
                kpi_to_block_mapping[block] = kpi_file
        else:
            print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!")
            print(f"   üîç –ò—Å–∫–∞–ª–∏ –ø–æ: {', '.join(keywords)}")
            kpi_details[kpi_file] = {
                'department': None,
                'path': None,
                'block': None,
                'keywords': keywords,
                'status': 'NOT_FOUND'
            }

        print()

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
    print("=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô BLOCK ‚Üí KPI –ú–ê–ü–ü–ò–ù–ì (–Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –¥–∞–Ω–Ω—ã—Ö)")
    print("=" * 80)
    print()

    if kpi_to_block_mapping:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:")
        print()
        for block, kpi_file in sorted(kpi_to_block_mapping.items()):
            dept_name = kpi_details[kpi_file]['department']
            print(f"   üè¢ {block}")
            print(f"      ‚îî‚îÄ {kpi_file}")
            print(f"         (—á–µ—Ä–µ–∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {dept_name})")
            print()
    else:
        print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–ª–æ–∫–æ–≤ –∫ KPI!")
        print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –±–ª–æ–∫–∏
    print("=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –í–°–ï–• –ë–õ–û–ö–û–í")
    print("=" * 80)
    print()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    all_depts = organization_cache.get_all_departments()
    dept_index = organization_cache.get_department_index()

    all_blocks = set()
    for dept_name in all_depts:
        dept_info = dept_index.get(dept_name)
        if dept_info:
            block = extract_block(dept_info['path'])
            if block:
                all_blocks.add(block)

    print(f"üì¶ –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {len(all_blocks)}")
    print()

    covered_blocks = set(kpi_to_block_mapping.keys())
    uncovered_blocks = all_blocks - covered_blocks

    print(f"‚úÖ –ë–ª–æ–∫–æ–≤ —Å KPI: {len(covered_blocks)} ({len(covered_blocks)/len(all_blocks)*100:.1f}%)")
    for block in sorted(covered_blocks):
        print(f"   ‚Ä¢ {block}")
    print()

    if uncovered_blocks:
        print(f"‚ö†Ô∏è  –ë–ª–æ–∫–æ–≤ –ë–ï–ó KPI: {len(uncovered_blocks)} ({len(uncovered_blocks)/len(all_blocks)*100:.1f}%)")
        for block in sorted(uncovered_blocks):
            # –°—á–∏—Ç–∞–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –±–ª–æ–∫–µ
            dept_count = sum(1 for d in all_depts
                            if dept_index.get(d) and extract_block(dept_index[d]['path']) == block)
            print(f"   ‚Ä¢ {block} ({dept_count} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤)")
        print()

    # –ê–Ω–∞–ª–∏–∑: –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?
    print("=" * 80)
    print("üí° –ê–ù–ê–õ–ò–ó: HIERARCHICAL INHERITANCE")
    print("=" * 80)
    print()

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–ø–æ–∫—Ä—ã—Ç–æ–≥–æ –±–ª–æ–∫–∞ –∏—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —Å KPI
    hierarchy_solutions = {}

    for block in uncovered_blocks:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
        block_depts = [d for d in all_depts
                      if dept_index.get(d) and extract_block(dept_index[d]['path']) == block]

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ KPI —á–µ—Ä–µ–∑ –∏–µ—Ä–∞—Ä—Ö–∏—é
        has_hierarchical = False
        for dept_name in block_depts[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            dept_info = dept_index[dept_name]
            path = dept_info['path']
            path_parts = [p.strip() for p in path.split('/') if p.strip()]

            # –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            for i in range(len(path_parts), 0, -1):
                parent = path_parts[i-1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ KPI –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
                for kpi_file, details in kpi_details.items():
                    if details.get('department') == parent:
                        has_hierarchical = True
                        if block not in hierarchy_solutions:
                            hierarchy_solutions[block] = []
                        hierarchy_solutions[block].append({
                            'example_dept': dept_name,
                            'parent_with_kpi': parent,
                            'kpi_file': kpi_file,
                        })
                        break

                if has_hierarchical:
                    break

            if has_hierarchical:
                break

    if hierarchy_solutions:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ hierarchical inheritance:")
        print()
        for block, solutions in hierarchy_solutions.items():
            print(f"   üè¢ {block}")
            for sol in solutions:
                print(f"      –ü—Ä–∏–º–µ—Ä: {sol['example_dept']}")
                print(f"      ‚Üí –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç: {sol['parent_with_kpi']}")
                print(f"      ‚Üí KPI: {sol['kpi_file']}")
            print()

    remaining_uncovered = uncovered_blocks - set(hierarchy_solutions.keys())

    if remaining_uncovered:
        print(f"‚ö†Ô∏è  –ë–ª–æ–∫–æ–≤ –±–µ–∑ —Ä–µ—à–µ–Ω–∏—è (–Ω—É–∂–µ–Ω fallback –∏–ª–∏ –Ω–æ–≤—ã–π KPI): {len(remaining_uncovered)}")
        for block in sorted(remaining_uncovered):
            dept_count = sum(1 for d in all_depts
                            if dept_index.get(d) and extract_block(dept_index[d]['path']) == block)
            print(f"   ‚Ä¢ {block} ({dept_count} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤)")
        print()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    print("=" * 80)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø 100% –ü–û–ö–†–´–¢–ò–Ø")
    print("=" * 80)
    print()

    print("‚úÖ TIER 1: Direct block mapping")
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {len(covered_blocks)}/{len(all_blocks)} –±–ª–æ–∫–æ–≤ ({len(covered_blocks)/len(all_blocks)*100:.1f}%)")
    print()

    print("‚úÖ TIER 2: Hierarchical inheritance")
    print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {len(hierarchy_solutions)} –±–ª–æ–∫–æ–≤")
    print()

    if remaining_uncovered:
        print("‚ö†Ô∏è  TIER 3: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ")
        print(f"   –ë–ª–æ–∫–æ–≤: {len(remaining_uncovered)}")
        print()
        print("   –í–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("   1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ KPI —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–∏—Ö –±–ª–æ–∫–æ–≤")
        print("   2. –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback (–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None)")
        print("   3. –£—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫–æ–π KPI –ø–æ–¥—Ö–æ–¥–∏—Ç")
        print()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_path = Path("docs/analysis/ACCURATE_KPI_MAPPING.json")
    output_path.parent.mkdir(parents=True, exist_ok=True)

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump({
            'kpi_details': kpi_details,
            'block_to_kpi_mapping': kpi_to_block_mapping,
            'all_blocks': sorted(list(all_blocks)),
            'covered_blocks': sorted(list(covered_blocks)),
            'uncovered_blocks': sorted(list(uncovered_blocks)),
            'hierarchy_solutions': hierarchy_solutions,
            'remaining_uncovered': sorted(list(remaining_uncovered)),
        }, f, ensure_ascii=False, indent=2)

    print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    print()
    print("=" * 80)


if __name__ == "__main__":
    main()
