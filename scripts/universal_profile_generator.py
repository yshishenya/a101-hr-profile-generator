#!/usr/bin/env python3
"""
üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–§–ò–õ–ï–ô –ê101 - ULTRATHINK MODE

–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –õ–Æ–ë–û–ì–û –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
- ‚úÖ –í—ã–±–æ—Ä –∏–∑ 567 –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü (–ª—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å: –±–ª–æ–∫ ‚Üí –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ‚Üí —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –æ—Ç–¥–µ–ª ‚Üí –≥—Ä—É–ø–ø–∞)
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–Ω–∏—Ç–µ + –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
- ‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –æ—Ç 1 –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å) –¥–æ 500+ (—Ü–µ–ª—ã–π –±–ª–æ–∫)
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ
- ‚úÖ Resume/restart —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
- ‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å production API pipeline

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã ULTRATHINK:
1. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–°–¢–¨ - –ª—é–±–æ–π —é–Ω–∏—Ç –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è
2. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥—Å—á–µ—Ç
3. –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
4. –ù–ê–î–ï–ñ–ù–û–°–¢–¨ - –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
5. –Æ–ó–ê–ë–ò–õ–ò–¢–ò - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞

Usage:
    python scripts/universal_profile_generator.py [--dry-run] [--batch-size N] [--unit-path "–ü—É—Ç—å/–ö/–Æ–Ω–∏—Ç—É"]
"""

import asyncio
import json
import logging
import os
import sys
import time
import zipfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Set
import aiohttp
import click
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.abspath('.'))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
from backend.core.organization_cache import organization_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('scripts/universal_generator.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PROGRESS_FILE = "scripts/.universal_generator_progress.json"
API_BASE_URL = "http://localhost:8022"
DEFAULT_BATCH_SIZE = 10
MAX_CONCURRENT = 10
REQUEST_TIMEOUT = 300
POLL_INTERVAL = 5


class BusinessUnitSelector:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö 567 –µ–¥–∏–Ω–∏—Ü

    –§—É–Ω–∫—Ü–∏–∏:
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å auto-complete
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
    """

    def __init__(self):
        self.organization_cache = organization_cache
        self.all_units = {}
        self.searchable_items = []

    def load_organization_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç—ã —á–µ—Ä–µ–∑ path-based –∏–Ω–¥–µ–∫—Å
            self.all_units = self.organization_cache.get_all_business_units_with_paths()

            # –ü–æ–ª—É—á–∞–µ–º searchable items –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ organization_cache
            self.searchable_items = self.organization_cache.get_searchable_items()

            logger.info(f"‚úÖ Loaded {len(self.all_units)} business units for selection")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error loading organization data: {e}")
            return False

    def display_selection_interface(self) -> Optional[str]:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞

        Returns:
            –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —é–Ω–∏—Ç—É –∏–ª–∏ None
        """
        print("\nüè¢ –í–´–ë–û–† –ë–ò–ó–ù–ï–°-–Æ–ù–ò–¢–ê –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–§–ò–õ–ï–ô")
        print("=" * 60)
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ: {len(self.searchable_items)} –±–∏–∑–Ω–µ—Å-–µ–¥–∏–Ω–∏—Ü")
        print(f"üéØ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–æ —Ü–µ–ª—ã—Ö –±–ª–æ–∫–æ–≤")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        by_levels = self._group_by_levels()

        print("\nüìã –í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨:")
        print("1. üè¢ –ë–ª–æ–∫–∏ (–≤–µ—Å—å –±–ª–æ–∫ —Ü–µ–ª–∏–∫–æ–º)")
        print("2. üè¨ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã")
        print("3. üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("4. üìÇ –û—Ç–¥–µ–ª—ã")
        print("5. üìÅ –ü–æ–¥-–æ—Ç–¥–µ–ª—ã")
        print("6. üë• –ì—Ä—É–ø–ø—ã")
        print("7. üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        print("0. ‚ùå –û—Ç–º–µ–Ω–∞")

        choice = click.prompt("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", type=int, default=7)

        if choice == 0:
            return None
        elif choice == 7:
            return self._search_units()
        elif 1 <= choice <= 6:
            level = choice - 1
            return self._select_from_level(level, by_levels.get(level, []))
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
            return self.display_selection_interface()

    def _group_by_levels(self) -> Dict[int, List[Dict]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —é–Ω–∏—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º"""
        by_levels = {}

        for item in self.searchable_items:
            level = item["level"]
            if level not in by_levels:
                by_levels[level] = []
            by_levels[level].append(item)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
        for level in by_levels:
            by_levels[level].sort(key=lambda x: x["name"])

        return by_levels

    def _select_from_level(self, level: int, units: List[Dict]) -> Optional[str]:
        """–í—ã–±–æ—Ä –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if not units:
            print(f"‚ùå –ù–µ—Ç —é–Ω–∏—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ {level + 1}")
            return self.display_selection_interface()

        level_names = ["–ë–ª–æ–∫", "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–û—Ç–¥–µ–ª", "–ü–æ–¥-–æ—Ç–¥–µ–ª", "–ì—Ä—É–ø–ø–∞"]
        level_name = level_names[level] if level < len(level_names) else f"–£—Ä–æ–≤–µ–Ω—å {level + 1}"

        print(f"\nüìã {level_name.upper()} ({len(units)} –¥–æ—Å—Ç—É–ø–Ω–æ):")
        print("-" * 50)

        for i, unit in enumerate(units[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            positions_text = f"({unit['positions_count']} –ø–æ–∑.)" if unit['positions_count'] > 0 else "(–Ω–µ—Ç –ø–æ–∑.)"
            headcount_text = f"[{unit.get('headcount', 0)} —á–µ–ª.]" if unit.get('headcount') else ""

            print(f"{i:2d}. {unit['name']} {positions_text} {headcount_text}")
            if unit.get('hierarchy'):
                print(f"     ‚îî‚îÄ‚îÄ {unit['hierarchy']}")

        if len(units) > 20:
            print(f"... –∏ –µ—â–µ {len(units) - 20} —é–Ω–∏—Ç–æ–≤")
            print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ (–æ–ø—Ü–∏—è 7)")

        print("\n0. ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è")

        choice = click.prompt("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä", type=int, default=0)

        if choice == 0:
            return self.display_selection_interface()
        elif 1 <= choice <= min(20, len(units)):
            selected_unit = units[choice - 1]
            return self._confirm_selection(selected_unit)
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
            return self._select_from_level(level, units)

    def _search_units(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —é–Ω–∏—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        print("\nüîç –ü–û–ò–°–ö –ë–ò–ó–ù–ï–°-–Æ–ù–ò–¢–û–í")
        print("-" * 30)

        search_term = click.prompt("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞", type=str, default="").strip()

        if not search_term:
            return self.display_selection_interface()

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
        matches = []
        search_lower = search_term.lower()

        for unit in self.searchable_items:
            if (search_lower in unit['name'].lower() or
                search_lower in unit.get('hierarchy', '').lower() or
                search_lower in unit['display_name'].lower()):
                matches.append(unit)

        if not matches:
            print(f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
            return self._search_units()

        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê '{search_term}' ({len(matches)} –Ω–∞–π–¥–µ–Ω–æ):")
        print("-" * 50)

        for i, unit in enumerate(matches[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            positions_text = f"({unit['positions_count']} –ø–æ–∑.)" if unit['positions_count'] > 0 else "(–Ω–µ—Ç –ø–æ–∑.)"
            level_names = ["–ë–ª–æ–∫", "–î–µ–ø–∞—Ä—Ç", "–£–ø—Ä–∞–≤–ª", "–û—Ç–¥–µ–ª", "–ü-–æ—Ç–¥", "–ì—Ä—É–ø–ø–∞"]
            level_text = level_names[unit['level']] if unit['level'] < len(level_names) else f"–£—Ä{unit['level']}"

            print(f"{i:2d}. [{level_text}] {unit['display_name']} {positions_text}")
            print(f"     ‚îî‚îÄ‚îÄ {unit['hierarchy']}")

        if len(matches) > 15:
            print(f"... –∏ –µ—â–µ {len(matches) - 15} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        print("\n0. ‚Üê –ù–æ–≤—ã–π –ø–æ–∏—Å–∫")

        choice = click.prompt("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä", type=int, default=0)

        if choice == 0:
            return self._search_units()
        elif 1 <= choice <= min(15, len(matches)):
            selected_unit = matches[choice - 1]
            return self._confirm_selection(selected_unit)
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
            return self._search_units()

    def _confirm_selection(self, unit: Dict) -> Optional[str]:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —é–Ω–∏—Ç–∞"""
        print("\n‚úÖ –í–´–ë–†–ê–ù–ù–´–ô –ë–ò–ó–ù–ï–°-–Æ–ù–ò–¢:")
        print("=" * 40)
        print(f"üìç –ù–∞–∑–≤–∞–Ω–∏–µ: {unit['name']}")
        print(f"üèóÔ∏è –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {unit['full_path']}")
        print(f"üìä –£—Ä–æ–≤–µ–Ω—å: {unit['level'] + 1} –∏–∑ 6")
        print(f"üë• –ü–æ–∑–∏—Ü–∏–π –≤ —é–Ω–∏—Ç–µ: {unit['positions_count']}")

        if unit.get('headcount'):
            print(f"üßë‚Äçüíº –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å: {unit['headcount']} —á–µ–ª–æ–≤–µ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
        print(f"üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è: {unit['hierarchy']}")

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏
        total_positions = self._calculate_total_positions(unit['full_path'])

        if total_positions > unit['positions_count']:
            child_positions = total_positions - unit['positions_count']
            print(f"üìà –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π (—Å –¥–æ—á–µ—Ä–Ω–∏–º–∏): {total_positions}")
            print(f"   ‚îú‚îÄ‚îÄ –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–Ω–∏—Ç–µ: {unit['positions_count']}")
            print(f"   ‚îî‚îÄ‚îÄ –í –¥–æ—á–µ—Ä–Ω–∏—Ö —é–Ω–∏—Ç–∞—Ö: {child_positions}")

        print(f"\nüéØ –ë–£–î–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û: {total_positions} –ø—Ä–æ—Ñ–∏–ª–µ–π")

        if click.confirm("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞?"):
            return unit['full_path']
        else:
            return self.display_selection_interface()

    def _calculate_total_positions(self, unit_path: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π –≤ —é–Ω–∏—Ç–µ –∏ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö"""
        total = 0

        # –°—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–∞–º–æ–º —é–Ω–∏—Ç–µ
        unit_data = self.all_units.get(unit_path)
        if unit_data:
            total += len(unit_data.get('positions', []))

        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —é–Ω–∏—Ç–∞—Ö
        for path, data in self.all_units.items():
            if path.startswith(unit_path + "/"):  # –≠—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π —é–Ω–∏—Ç
                total += len(data.get('positions', []))

        return total


class UniversalPositionsExtractor:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π –∏–∑ –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
    - –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º
    """

    def __init__(self):
        self.organization_cache = organization_cache
        self.all_units = {}

    def load_organization_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.all_units = self.organization_cache.get_all_business_units_with_paths()

    def extract_positions_from_unit(self, unit_path: str, include_children: bool = True) -> List[Tuple[str, str]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞

        Args:
            unit_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç—É
            include_children: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        Returns:
            List[(department_path, position_name)]
        """
        positions = []

        # –ü–æ–∑–∏—Ü–∏–∏ –≤ —Å–∞–º–æ–º —é–Ω–∏—Ç–µ
        unit_data = self.all_units.get(unit_path)
        if unit_data:
            for position in unit_data.get('positions', []):
                if position.strip():
                    positions.append((unit_path, position))

        # –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —é–Ω–∏—Ç–∞—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if include_children:
            for path, data in self.all_units.items():
                if path.startswith(unit_path + "/"):  # –≠—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π —é–Ω–∏—Ç
                    for position in data.get('positions', []):
                        if position.strip():
                            positions.append((path, position))

        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {unit_path}" +
                   (f" (—Å –¥–æ—á–µ—Ä–Ω–∏–º–∏)" if include_children else ""))

        return positions

    def get_unit_hierarchy_info(self, unit_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–Ω–∏—Ç–µ"""
        unit_data = self.all_units.get(unit_path)
        if not unit_data:
            return {}

        # –°—á–∏—Ç–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —é–Ω–∏—Ç—ã
        children_count = sum(1 for path in self.all_units.keys()
                           if path.startswith(unit_path + "/"))

        return {
            "name": unit_data.get("name"),
            "path": unit_path,
            "level": unit_data.get("level"),
            "positions_count": len(unit_data.get("positions", [])),
            "children_count": children_count,
            "headcount": unit_data.get("headcount"),
        }


class UniversalProgressManager:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ª—é–±—ã—Ö –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–æ–≤

    –û—Ç–ª–∏—á–∏—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:
    - –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–Ω–∏—Ç–µ
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (–æ—Ç 1 –¥–æ 1000+)
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤
    """

    def __init__(self, progress_file: str = PROGRESS_FILE):
        self.progress_file = Path(progress_file)
        self.progress = {
            "selected_unit": None,
            "total_positions": 0,
            "completed_positions": [],
            "failed_positions": [],
            "in_progress": [],
            "started_at": None,
            "last_updated": None,
            "session_id": None,
            "unit_info": {}  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–Ω–∏—Ç–µ
        }

    def set_selected_unit(self, unit_path: str, unit_info: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞"""
        self.progress["selected_unit"] = unit_path
        self.progress["unit_info"] = unit_info

    def reset_progress_for_unit(self, unit_path: str, total_positions: int, unit_info: Dict[str, Any]):
        """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —é–Ω–∏—Ç–∞"""
        self.progress = {
            "selected_unit": unit_path,
            "total_positions": total_positions,
            "completed_positions": [],
            "failed_positions": [],
            "in_progress": [],
            "started_at": datetime.now().isoformat(),
            "last_updated": None,
            "session_id": datetime.now().strftime("%Y%m%d_%H%M%S"),
            "unit_info": unit_info
        }
        self.save_progress()

    def print_progress_summary(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        total = self.progress["total_positions"]
        completed = len(self.progress["completed_positions"])
        failed = len(self.progress["failed_positions"])
        remaining = total - completed - failed

        print(f"\nüìä –ü–†–û–ì–†–ï–°–° –ì–ï–ù–ï–†–ê–¶–ò–ò:")

        if self.progress.get("selected_unit"):
            unit_name = self.progress["unit_info"].get("name", "Unknown")
            print(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —é–Ω–∏—Ç: {unit_name}")
            print(f"üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {self.progress['selected_unit']}")

        print(f"üìà –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total}")
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
        print(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")

        if completed > 0 and total > 0:
            percentage = (completed / total) * 100
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {percentage:.1f}%")

        # –î—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—É...

    def load_progress(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.progress_file.exists():
            try:
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    self.progress = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ {self.progress_file}")
                return self.progress
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return self.progress

    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        try:
            self.progress_file.parent.mkdir(exist_ok=True)
            self.progress["last_updated"] = datetime.now().isoformat()

            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(self.progress, f, ensure_ascii=False, indent=2)

            logger.debug(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.progress_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def get_remaining_positions(self, all_positions: List[Tuple[str, str]]) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å"""
        completed_keys = {
            f"{pos['department']}::{pos['position']}"
            for pos in self.progress["completed_positions"]
        }
        failed_keys = {
            f"{pos['department']}::{pos['position']}"
            for pos in self.progress["failed_positions"]
        }

        remaining = [
            (dept, pos) for dept, pos in all_positions
            if f"{dept}::{pos}" not in completed_keys and f"{dept}::{pos}" not in failed_keys
        ]

        return remaining


class UniversalAPIClient:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API generation endpoints

    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª—é–±—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –∏–∑ path-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    """

    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url.rstrip('/')
        self.session: Optional[aiohttp.ClientSession] = None
        self.auth_token: Optional[str] = None

    async def __aenter__(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º None –¥–ª—è sock_read —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ LLM –∑–∞–ø—Ä–æ—Å—ã
        timeout = aiohttp.ClientTimeout(
            total=REQUEST_TIMEOUT,      # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç (300s)
            connect=30,                 # –¢–∞–π–º–∞—É—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            sock_connect=10,            # –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–æ–∫–µ—Ç
            sock_read=None              # –ë–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ (–¥–ª—è –¥–æ–ª–≥–∏—Ö LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º connector –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connector = aiohttp.TCPConnector(
            limit=100,                  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            limit_per_host=30,          # –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Ö–æ—Å—Ç
            ttl_dns_cache=300,          # –ö—ç—à DNS –Ω–∞ 5 –º–∏–Ω—É—Ç
            force_close=False,          # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            enable_cleanup_closed=True  # –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        )

        self.session = aiohttp.ClientSession(
            timeout=timeout,
            connector=connector,
            raise_for_status=False      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Ä—É—á–Ω—É—é
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def authenticate(self) -> bool:
        """–ü–æ–ª—É—á–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
            admin_username = os.getenv('ADMIN_USERNAME', 'admin')
            admin_password = os.getenv('ADMIN_PASSWORD', 'admin123')

            # –ü—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
            auth_data = {
                "username": admin_username,
                "password": admin_password
            }

            async with self.session.post(f"{self.base_url}/api/auth/login", json=auth_data) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    self.auth_token = result.get('access_token')
                    logger.info("üîë –ü–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: HTTP {resp.status}")
                    return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def start_generation(self, department_path: str, position: str, max_retries: int = 3) -> Optional[str]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±—ã–µ –ø—É—Ç–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤)

        Args:
            department_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è)
            position: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

        Returns:
            task_id –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.auth_token:
            logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None

        headers = {"Authorization": f"Bearer {self.auth_token}"}
        payload = {
            "department": department_path,  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
            "position": position,
            "employee_name": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {position}",
            "temperature": 0.1,
            "save_result": True
        }

        # Retry logic –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
        for attempt in range(max_retries):
            try:
                async with self.session.post(
                    f"{self.base_url}/api/generation/start",
                    json=payload,
                    headers=headers
                ) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        task_id = result.get('task_id')
                        logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {position} –≤ {department_path} (task: {task_id[:8]}...)")
                        return task_id
                    else:
                        error_text = await resp.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {position}: HTTP {resp.status} - {error_text}")
                        return None

            except (aiohttp.ClientError, aiohttp.ServerDisconnectedError, asyncio.TimeoutError) as e:
                # –¢—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # Exponential backoff: 1s, 2s, 4s
                    logger.warning(
                        f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {position} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__}: {e}. "
                        f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å..."
                    )
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    logger.error(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {position}: {type(e).__name__}: {e}")
                    return None

            except Exception as e:
                # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {position}: {type(e).__name__}: {e}")
                return None

        return None

    async def get_task_status(self, task_id: str, max_retries: int = 3) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å retry logic

        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        if not self.auth_token:
            return {"status": "error", "error": "No auth token"}

        headers = {"Authorization": f"Bearer {self.auth_token}"}

        # Retry logic –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        for attempt in range(max_retries):
            try:
                async with self.session.get(
                    f"{self.base_url}/api/generation/{task_id}/status",
                    headers=headers
                ) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    else:
                        error_text = await resp.text()
                        return {"status": "error", "error": f"HTTP {resp.status}: {error_text}"}

            except (aiohttp.ClientError, aiohttp.ServerDisconnectedError, asyncio.TimeoutError) as e:
                # –¢—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # Exponential backoff
                    logger.warning(
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id[:8]} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__}. "
                        f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å..."
                    )
                    await asyncio.sleep(wait_time)
                    continue
                else:
                    return {"status": "error", "error": f"Network error after {max_retries} attempts: {str(e)}"}

            except Exception as e:
                return {"status": "error", "error": str(e)}

        return {"status": "error", "error": "Max retries exceeded"}


class UniversalBatchProcessor:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–π

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –û—Ç 1 –¥–æ 1000+ –ø–æ–∑–∏—Ü–∏–π
    - –ü–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    """

    def __init__(self, api_client: UniversalAPIClient, progress_manager: UniversalProgressManager):
        self.api_client = api_client
        self.progress_manager = progress_manager

    async def process_batch(self, positions_batch: List[Tuple[str, str]]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤

        Args:
            positions_batch: –°–ø–∏—Å–æ–∫ (department_path, position_name)

        Returns:
            {"successful": int, "failed": int, "results": List[Dict]}
        """
        batch_start = time.time()
        logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(positions_batch)} –ø–æ–∑–∏—Ü–∏–π")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        departments_in_batch = set()
        for dept_path, pos in positions_batch:
            departments_in_batch.add(dept_path.split('/')[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—É—Ç–∏

        logger.info(f"üè¢ –ü–∞–∫–µ—Ç –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç {len(departments_in_batch)} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π")

        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {len(positions_batch)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        start_tasks = [
            self.api_client.start_generation(dept_path, pos)
            for dept_path, pos in positions_batch
        ]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        task_ids = await asyncio.gather(*start_tasks, return_exceptions=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        tasks = []
        for (dept_path, pos), task_id in zip(positions_batch, task_ids):
            if isinstance(task_id, Exception):
                tasks.append({
                    "task_id": None,
                    "department": dept_path,
                    "position": pos,
                    "status": "failed",
                    "error": f"Failed to start generation: {str(task_id)}"
                })
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {pos} - {task_id}")
            elif task_id:
                tasks.append({
                    "task_id": task_id,
                    "department": dept_path,
                    "position": pos,
                    "status": "processing",
                    "started_at": time.time()
                })
                logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {pos} –≤ {dept_path.split('/')[-1]} (task: {task_id[:8]}...)")
            else:
                tasks.append({
                    "task_id": None,
                    "department": dept_path,
                    "position": pos,
                    "status": "failed",
                    "error": "Failed to start generation"
                })
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {pos}")

        # 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        completed_tasks = await self._wait_for_completion(tasks)

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for task in completed_tasks if task["status"] == "completed")
        failed = len(completed_tasks) - successful

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for task in completed_tasks:
            if task["status"] == "completed":
                self.progress_manager.progress["completed_positions"].append({
                    "department": task["department"],
                    "position": task["position"],
                    "task_id": task["task_id"],
                    "completed_at": datetime.now().isoformat()
                })
            else:
                self.progress_manager.progress["failed_positions"].append({
                    "department": task["department"],
                    "position": task["position"],
                    "task_id": task.get("task_id"),
                    "error": task.get("error", "Unknown error"),
                    "failed_at": datetime.now().isoformat()
                })

        self.progress_manager.save_progress()

        batch_time = time.time() - batch_start
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.1f}—Å: ‚úÖ{successful} ‚ùå{failed}")

        return {
            "successful": successful,
            "failed": failed,
            "duration": batch_time,
            "results": completed_tasks,
            "departments_processed": len(departments_in_batch)
        }

    async def _wait_for_completion(self, tasks: List[Dict]) -> List[Dict]:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–µ"""
        pending_tasks = [task for task in tasks if task["task_id"] is not None]
        max_wait_time = 600  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–¥–∞—á—É –º–∞–∫—Å–∏–º—É–º

        while pending_tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            for task in pending_tasks[:]:  # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if task["task_id"] is None:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout
                if time.time() - task["started_at"] > max_wait_time:
                    task["status"] = "failed"
                    task["error"] = f"Timeout after {max_wait_time}s"
                    pending_tasks.remove(task)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                status_result = await self.api_client.get_task_status(task["task_id"])

                if "task" in status_result:
                    api_status = status_result["task"]["status"]
                    task["api_status"] = api_status

                    if api_status == "completed":
                        task["status"] = "completed"
                        pending_tasks.remove(task)
                        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task['position']} ({task['department'].split('/')[-1]})")
                    elif api_status in ["failed", "cancelled"]:
                        task["status"] = "failed"
                        task["error"] = status_result["task"].get("error_message", "API reported failure")
                        pending_tasks.remove(task)
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {task['position']} - {task['error']}")
                else:
                    # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {task['position']}")

            if pending_tasks:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(pending_tasks)} –∑–∞–¥–∞—á...")
                await asyncio.sleep(POLL_INTERVAL)

        return tasks


class UniversalArchiveBuilder:
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ –±–∏–ª–¥–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤—ã –æ—Ç 1 —Ñ–∞–π–ª–∞ –¥–æ —Ç—ã—Å—è—á
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤
    """

    @staticmethod
    def create_unit_archive(unit_path: str, unit_name: str) -> bool:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞

        Args:
            unit_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
            unit_name: –ù–∞–∑–≤–∞–Ω–∏–µ —é–Ω–∏—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞

        Returns:
            True –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —é–Ω–∏—Ç–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_unit_name = unit_name.replace(" ", "_").replace("/", "_")[:50]
            archive_name = f"{safe_unit_name}_Profiles_{timestamp}.zip"

            archive_dir = Path("archive")
            archive_dir.mkdir(exist_ok=True)
            archive_path = archive_dir / archive_name

            generated_dir = Path("generated_profiles")
            if not generated_dir.exists():
                logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è generated_profiles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —é–Ω–∏—Ç–æ–º
            unit_files = []
            for root, _, files in os.walk(generated_dir):
                root_path = Path(root)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
                root_str = str(root_path).replace("\\", "/")
                unit_components = [comp.replace(" ", "_") for comp in unit_path.split("/")]

                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—Å—Ç—å –≤ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
                if any(comp in root_str for comp in unit_components):
                    for file in files:
                        file_path = root_path / file
                        if file_path.suffix.lower() in ['.json', '.md', '.docx']:
                            if file_path.exists() and os.access(file_path, os.R_OK):
                                unit_files.append(file_path)

            if not unit_files:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —é–Ω–∏—Ç–∞ {unit_name}")
                return False

            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(unit_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞ {unit_name}")

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path in unit_files:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ generated_profiles
                        arcname = file_path.relative_to(generated_dir)
                        zipf.write(file_path, arcname)
                        logger.debug(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω: {arcname}")
                    except Exception as file_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {file_error}")
                        continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if archive_path.exists():
                archive_size = archive_path.stat().st_size
                size_mb = archive_size / 1024 / 1024

                logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path} ({size_mb:.2f} MB)")
                return True
            else:
                logger.error("‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –¥–ª—è {unit_name}: {e}")
            return False


# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–ö–†–ò–ü–¢–ê

@click.command()
@click.option('--dry-run', is_flag=True, help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
@click.option('--batch-size', default=DEFAULT_BATCH_SIZE, help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞')
@click.option('--api-url', default=API_BASE_URL, help='URL API —Å–µ—Ä–≤–µ—Ä–∞')
@click.option('--unit-path', default=None, help='–ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —é–Ω–∏—Ç—É (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)')
def main(dry_run: bool, batch_size: int, api_url: str, unit_path: Optional[str]):
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    return asyncio.run(_main_async(dry_run, batch_size, api_url, unit_path))


async def _main_async(dry_run: bool, batch_size: int, api_url: str, unit_path: Optional[str]):
    """üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""

    global API_BASE_URL, DEFAULT_BATCH_SIZE
    API_BASE_URL = api_url
    DEFAULT_BATCH_SIZE = batch_size

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    selector = BusinessUnitSelector()
    extractor = UniversalPositionsExtractor()
    progress_manager = UniversalProgressManager()

    try:
        print("üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–§–ò–õ–ï–ô –ê101")
        print("=" * 55)
        print("üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –õ–Æ–ë–û–ì–û –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç–∞")
        print("üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ—Ç 1 –ø–æ–∑–∏—Ü–∏–∏ –¥–æ 1000+ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("üå≥ –£—Ä–æ–≤–Ω–∏: –±–ª–æ–∫ ‚Üí –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç ‚Üí —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Üí –æ—Ç–¥–µ–ª ‚Üí –ø–æ–¥-–æ—Ç–¥–µ–ª ‚Üí –≥—Ä—É–ø–ø–∞")

        if dry_run:
            print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–û–í–û–ì–û –ó–ê–ü–£–°–ö–ê")

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìã –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        if not selector.load_organization_data():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return 1

        extractor.load_organization_data()

        # 2. –í—ã–±–∏—Ä–∞–µ–º –±–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä)
        if unit_path:
            selected_unit_path = unit_path
            print(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å: {unit_path}")
        else:
            selected_unit_path = selector.display_selection_interface()

        if not selected_unit_path:
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return 0

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–Ω–∏—Ç–µ
        unit_info = extractor.get_unit_hierarchy_info(selected_unit_path)
        if not unit_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ: {selected_unit_path}")
            return 1

        # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —é–Ω–∏—Ç–∞
        print(f"\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ '{unit_info['name']}'...")
        all_positions = extractor.extract_positions_from_unit(selected_unit_path, include_children=True)

        if not all_positions:
            print(f"‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —é–Ω–∏—Ç–µ '{unit_info['name']}' –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return 1

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_positions)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

        # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        progress_manager.load_progress()
        progress_manager.set_selected_unit(selected_unit_path, unit_info)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –ª–∏ —é–Ω–∏—Ç –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        has_progress = bool(progress_manager.progress.get("completed_positions") or
                          progress_manager.progress.get("failed_positions"))

        same_unit = (progress_manager.progress.get("selected_unit") == selected_unit_path)

        if has_progress and same_unit:
            progress_manager.print_progress_summary()
            if not dry_run:
                restart = click.confirm("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ? (–ù–µ—Ç = –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)")
            else:
                restart = True
                print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        else:
            restart = True

        if restart:
            progress_manager.reset_progress_for_unit(selected_unit_path, len(all_positions), unit_info)

        # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        remaining_positions = progress_manager.get_remaining_positions(all_positions)

        if not remaining_positions:
            print("üéâ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            if click.confirm("–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤?"):
                if UniversalArchiveBuilder.create_unit_archive(selected_unit_path, unit_info['name']):
                    print("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            return 0

        # 7. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if dry_run:
            profiles_to_generate = min(3, len(remaining_positions))
            print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {profiles_to_generate} –ø–æ–∑–∏—Ü–∏–π")
        else:
            print(f"\nüìù –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(remaining_positions)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            profiles_to_generate = click.prompt(
                f"–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å? (–º–∞–∫—Å–∏–º—É–º {len(remaining_positions)})",
                type=int,
                default=min(batch_size, len(remaining_positions))
            )
            profiles_to_generate = min(max(profiles_to_generate, 1), len(remaining_positions))

        selected_positions = remaining_positions[:profiles_to_generate]

        # 8. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        batches = (len(selected_positions) + batch_size - 1) // batch_size

        print(f"\nüéØ –ü–õ–ê–ù –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"   üè¢ –ë–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç: {unit_info['name']}")
        print(f"   üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(selected_positions)}")
        print(f"   üì¶ –ü–∞–∫–µ—Ç–æ–≤: {batches} (–ø–æ {batch_size})")
        print(f"   ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {len(selected_positions) * 0.75:.0f} –º–∏–Ω")

        if dry_run:
            print(f"\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –°–ü–ò–°–û–ö –ü–û–ó–ò–¶–ò–ô:")
            for i, (dept, pos) in enumerate(selected_positions[:10], 1):
                print(f"   {i}. {pos}")
                print(f"      ‚îî‚îÄ‚îÄ –≤ {dept}")
            if len(selected_positions) > 10:
                print(f"   ... –∏ –µ—â–µ {len(selected_positions) - 10} –ø–æ–∑–∏—Ü–∏–π")

            print(f"\n‚úÖ –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(selected_positions)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            return 0

        if not click.confirm("\n–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é?"):
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return 0

        # 9. –†–ï–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        async with UniversalAPIClient(api_url) as api_client:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("\nüîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ...")
            if not await api_client.authenticate():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                return 1

            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏
            batch_processor = UniversalBatchProcessor(api_client, progress_manager)

            total_successful = 0
            total_failed = 0
            total_departments_processed = set()
            start_time = time.time()

            for i in range(0, len(selected_positions), batch_size):
                batch = selected_positions[i:i + batch_size]
                batch_num = (i // batch_size) + 1
                total_batches = (len(selected_positions) + batch_size - 1) // batch_size

                print(f"\nüì¶ –ü–ê–ö–ï–¢ {batch_num}/{total_batches} ({len(batch)} –ø–æ–∑–∏—Ü–∏–π)")
                print("-" * 50)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ø–∞–∫–µ—Ç–µ
                batch_departments = set()
                for dept_path, pos in batch:
                    dept_name = dept_path.split('/')[-1]
                    batch_departments.add(dept_name)

                print(f"üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ –ø–∞–∫–µ—Ç–µ: {', '.join(sorted(batch_departments))}")

                batch_result = await batch_processor.process_batch(batch)

                total_successful += batch_result["successful"]
                total_failed += batch_result["failed"]
                total_departments_processed.update(batch_departments)

                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {batch_result['successful']}")
                print(f"   ‚ùå –û—à–∏–±–∫–∏: {batch_result['failed']}")
                print(f"   üè¢ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: {batch_result.get('departments_processed', 0)}")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {batch_result['duration']:.1f}—Å")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + batch_size < len(selected_positions):
                    print("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏...")
                    await asyncio.sleep(3)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        total_time = time.time() - start_time
        print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   üéØ –ë–∏–∑–Ω–µ—Å-—é–Ω–∏—Ç: {unit_info['name']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_successful}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_failed}")
        print(f"   üè¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: {len(total_departments_processed)}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_manager.print_progress_summary()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤
        if total_successful > 0 and click.confirm("\nüì¶ –°–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤?"):
            if UniversalArchiveBuilder.create_unit_archive(selected_unit_path, unit_info['name']):
                print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –¥–ª—è {unit_info['name']}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞")

        return 0

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        progress_manager.save_progress()
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import aiohttp
        import click
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiohttp click")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ click
    sys.exit(main())