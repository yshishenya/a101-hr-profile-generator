#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_generate_profile.py "–ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä" "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"
"""

import asyncio
import json
import logging
import sys
import time
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from backend.core.config import config
from backend.core.profile_generator import ProfileGenerator
from backend.core.data_loader import DataLoader
from backend.core.llm_client import LLMClient
from backend.models.database import initialize_db_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def generate_profile(position_title: str, department: str) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

    Args:
        position_title: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        department: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ
    """
    start_time = time.time()

    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è: {position_title} / {department}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    db_manager = initialize_db_manager(config.database_path)
    db_manager.create_schema()

    # ProfileGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∏–∑ config
    generator = ProfileGenerator()

    logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è: {position_title}")

    try:
        result = await generator.generate_profile(
            department=department,
            position=position_title
        )

        generation_time = time.time() - start_time

        logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {generation_time:.2f} —Å–µ–∫")

        return {
            "status": "success",
            "position_title": position_title,
            "department": department,
            "file_path": result.get("file_path", ""),
            "profile_id": result.get("profile_id", ""),
            "generation_time": generation_time,
            "result": result
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        return {
            "status": "error",
            "position_title": position_title,
            "department": department,
            "error": str(e),
            "generation_time": time.time() - start_time
        }


def analyze_profile_file(file_path: str) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ—Ñ–∏–ª—è

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
    """
    logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            profile = json.load(f)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        skills_categories = profile.get("skills", [])
        total_skills = sum(len(cat.get("items", [])) for cat in skills_categories)
        category_names = [cat.get("category", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") for cat in skills_categories]

        responsibilities = profile.get("responsibilities", [])
        total_responsibilities = len(responsibilities)

        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = Path(file_path).stat().st_size

        return {
            "categories_count": len(skills_categories),
            "total_skills": total_skills,
            "category_names": category_names,
            "responsibilities_count": total_responsibilities,
            "file_size_bytes": file_size,
            "file_size_kb": round(file_size / 1024, 2)
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: {e}")
        return {
            "error": str(e)
        }


def print_report(generation_result: Dict[str, Any], stats: Dict[str, Any]) -> None:
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        generation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
    """
    print("\n" + "="*80)
    print(f"–ü–†–û–§–ò–õ–¨: {generation_result['position_title']}")
    print(f"–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢: {generation_result['department']}")
    print(f"–ü–£–¢–¨: {generation_result.get('file_path', 'N/A')}")

    if generation_result['status'] == 'success':
        print(f"–°–¢–ê–¢–£–°: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        print(f"–°–¢–ê–¢–£–°: ‚ùå –û—à–∏–±–∫–∞ - {generation_result.get('error', 'Unknown')}")
        print("="*80 + "\n")
        return

    print(f"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"- –ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–≤—ã–∫–æ–≤: {stats.get('categories_count', 0)}")
    print(f"- –ù–∞–≤—ã–∫–æ–≤ –≤—Å–µ–≥–æ: {stats.get('total_skills', 0)}")
    print(f"- –û–±–ª–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: {stats.get('responsibilities_count', 0)}")

    print(f"\n–ö–ê–¢–ï–ì–û–†–ò–ò –ù–ê–í–´–ö–û–í:")
    for i, category in enumerate(stats.get('category_names', []), 1):
        print(f"{i}. {category}")

    print(f"\n–†–ê–ó–ú–ï–† –§–ê–ô–õ–ê: {stats.get('file_size_kb', 0)} KB")
    print(f"–í–†–ï–ú–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò: {generation_result['generation_time']:.2f} —Å–µ–∫—É–Ω–¥")
    print("="*80 + "\n")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/test_generate_profile.py <–¥–æ–ª–∂–Ω–æ—Å—Ç—å> <–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç>")
        print('–ü—Ä–∏–º–µ—Ä: python scripts/test_generate_profile.py "–ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä" "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç"')
        sys.exit(1)

    position_title = sys.argv[1]
    department = sys.argv[2]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    result = await generate_profile(position_title, department)

    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
    stats = {}
    if result['status'] == 'success' and result.get('file_path'):
        stats = analyze_profile_file(result['file_path'])

    # –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞
    print_report(result, stats)

    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if result['status'] == 'success' else 1)


if __name__ == "__main__":
    asyncio.run(main())
