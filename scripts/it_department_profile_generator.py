#!/usr/bin/env python3
"""
üöÄ –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–§–ò–õ–ï–ô –ò–¢-–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê –ê101 - ULTRATHINK MODE

–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤—Å–µ—Ö 95 –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ production pipeline.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API endpoints
- ‚úÖ 95 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
- ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 10 —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
- ‚úÖ Resume/restart —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- ‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- ‚úÖ –ü–æ–ª–Ω—ã–π pipeline: JSON + MD + DOCX + –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

Usage:
    python scripts/it_department_profile_generator.py [--dry-run] [--batch-size N]
"""

import asyncio
import json
import logging
import os
import sys
import time
import zipfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import aiohttp
import click
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('scripts/it_generator.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PROGRESS_FILE = "scripts/.it_dept_generator_progress.json"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
API_BASE_URL = "http://localhost:8022"  # –ë–∞–∑–æ–≤—ã–π URL API —Å–µ—Ä–≤–µ—Ä–∞
STRUCTURE_FILE = "data/structure.json"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
IT_DEPT_NAME = "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
BATCH_SIZE = 10  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
MAX_CONCURRENT = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
REQUEST_TIMEOUT = 300  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç –¥–ª—è LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
POLL_INTERVAL = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


class ITPositionsExtractor:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∏–∑ structure.json"""

    def __init__(self, structure_file: str = STRUCTURE_FILE):
        self.structure_file = Path(structure_file)
        self.positions = []

    def extract_positions(self) -> List[Tuple[str, str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤

        Returns:
            List[(department_path, position_name)]
        """
        try:
            with open(self.structure_file, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –ù–∞—Ö–æ–¥–∏–º –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
            it_dept = data['organization']['–ë–ª–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞']['children'][IT_DEPT_NAME]

            positions = []

            def extract_recursive(node: Dict, path: str = ""):
                """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—É—Ç—è–º–∏"""
                if 'positions' in node and node['positions']:
                    for position in node['positions']:
                        if position.strip():
                            positions.append((path, position))

                if 'children' in node:
                    for child_name, child_node in node['children'].items():
                        child_path = f"{path}/{child_name}" if path else child_name
                        extract_recursive(child_node, child_path)

            # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            extract_recursive(it_dept, IT_DEPT_NAME)

            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ {IT_DEPT_NAME}")
            return positions

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            raise


class ProgressManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - resume/restart"""

    def __init__(self, progress_file: str = PROGRESS_FILE):
        self.progress_file = Path(progress_file)
        self.progress = {
            "total_positions": 0,
            "completed_positions": [],
            "failed_positions": [],
            "in_progress": [],
            "started_at": None,
            "last_updated": None,
            "session_id": None
        }

    def load_progress(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.progress_file.exists():
            try:
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    self.progress = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ {self.progress_file}")
                return self.progress
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

        return self.progress

    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        try:
            self.progress_file.parent.mkdir(exist_ok=True)
            self.progress["last_updated"] = datetime.now().isoformat()

            with open(self.progress_file, 'w', encoding='utf-8') as f:
                json.dump(self.progress, f, ensure_ascii=False, indent=2)

            logger.debug(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.progress_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def reset_progress(self, total_positions: int):
        """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        self.progress = {
            "total_positions": total_positions,
            "completed_positions": [],
            "failed_positions": [],
            "in_progress": [],
            "started_at": datetime.now().isoformat(),
            "last_updated": None,
            "session_id": datetime.now().strftime("%Y%m%d_%H%M%S")
        }
        self.save_progress()

    def get_remaining_positions(self, all_positions: List[Tuple[str, str]]) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å"""
        completed_keys = {
            f"{pos['department']}::{pos['position']}"
            for pos in self.progress["completed_positions"]
        }
        failed_keys = {
            f"{pos['department']}::{pos['position']}"
            for pos in self.progress["failed_positions"]
        }

        remaining = [
            (dept, pos) for dept, pos in all_positions
            if f"{dept}::{pos}" not in completed_keys and f"{dept}::{pos}" not in failed_keys
        ]

        return remaining

    def print_progress_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É"""
        total = self.progress["total_positions"]
        completed = len(self.progress["completed_positions"])
        failed = len(self.progress["failed_positions"])
        in_progress = len(self.progress["in_progress"])
        remaining = total - completed - failed

        print(f"\nüìä –ü–†–û–ì–†–ï–°–° –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–¢-–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê:")
        print(f"   üìà –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π: {total}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print(f"   ‚ùå –û—à–∏–±–∫–∏: {failed}")
        print(f"   üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}")
        print(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")

        if self.progress["started_at"]:
            print(f"   üïê –ù–∞—á–∞—Ç–æ: {self.progress['started_at']}")
        if self.progress["session_id"]:
            print(f"   üîñ –°–µ—Å—Å–∏—è: {self.progress['session_id']}")


class APIClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API endpoints —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url.rstrip('/')
        self.session: Optional[aiohttp.ClientSession] = None
        self.auth_token: Optional[str] = None

    async def __aenter__(self):
        timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        self.session = aiohttp.ClientSession(timeout=timeout)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def authenticate(self) -> bool:
        """–ü–æ–ª—É—á–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env
            admin_username = os.getenv('ADMIN_USERNAME', 'admin')
            admin_password = os.getenv('ADMIN_PASSWORD', 'admin123')

            # –ü—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
            auth_data = {
                "username": admin_username,
                "password": admin_password
            }

            async with self.session.post(f"{self.base_url}/api/auth/login", json=auth_data) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    self.auth_token = result.get('access_token')
                    logger.info("üîë –ü–æ–ª—É—á–µ–Ω JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: HTTP {resp.status}")
                    return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def start_generation(self, department: str, position: str) -> Optional[str]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API

        Returns:
            task_id –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.auth_token:
            logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None

        headers = {"Authorization": f"Bearer {self.auth_token}"}
        payload = {
            "department": department,
            "position": position,
            "employee_name": f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {position}",
            "temperature": 0.1,
            "save_result": True
        }

        try:
            async with self.session.post(
                f"{self.base_url}/api/generation/start",
                json=payload,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    result = await resp.json()
                    task_id = result.get('task_id')
                    logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {position} –≤ {department} (task: {task_id[:8]}...)")
                    return task_id
                else:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {position}: HTTP {resp.status} - {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {position}: {e}")
            return None

    async def get_task_status(self, task_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not self.auth_token:
            return {"status": "error", "error": "No auth token"}

        headers = {"Authorization": f"Bearer {self.auth_token}"}

        try:
            async with self.session.get(
                f"{self.base_url}/api/generation/{task_id}/status",
                headers=headers
            ) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    error_text = await resp.text()
                    return {"status": "error", "error": f"HTTP {resp.status}: {error_text}"}

        except Exception as e:
            return {"status": "error", "error": str(e)}


class BatchProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ 10 –ø–æ–∑–∏—Ü–∏–π —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º"""

    def __init__(self, api_client: APIClient, progress_manager: ProgressManager):
        self.api_client = api_client
        self.progress_manager = progress_manager

    async def process_batch(self, positions_batch: List[Tuple[str, str]]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –ø–æ–∑–∏—Ü–∏–π

        Returns:
            {"successful": int, "failed": int, "results": List[Dict]}
        """
        batch_start = time.time()
        logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–∞ –∏–∑ {len(positions_batch)} –ø–æ–∑–∏—Ü–∏–π")

        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for dept, pos in positions_batch:
            task_id = await self.api_client.start_generation(dept, pos)
            if task_id:
                tasks.append({
                    "task_id": task_id,
                    "department": dept,
                    "position": pos,
                    "status": "processing",
                    "started_at": time.time()
                })
            else:
                tasks.append({
                    "task_id": None,
                    "department": dept,
                    "position": pos,
                    "status": "failed",
                    "error": "Failed to start generation"
                })

        # 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        completed_tasks = await self._wait_for_completion(tasks)

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = sum(1 for task in completed_tasks if task["status"] == "completed")
        failed = len(completed_tasks) - successful

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for task in completed_tasks:
            if task["status"] == "completed":
                self.progress_manager.progress["completed_positions"].append({
                    "department": task["department"],
                    "position": task["position"],
                    "task_id": task["task_id"],
                    "completed_at": datetime.now().isoformat()
                })
            else:
                self.progress_manager.progress["failed_positions"].append({
                    "department": task["department"],
                    "position": task["position"],
                    "task_id": task.get("task_id"),
                    "error": task.get("error", "Unknown error"),
                    "failed_at": datetime.now().isoformat()
                })

        self.progress_manager.save_progress()

        batch_time = time.time() - batch_start
        logger.info(f"üì¶ –ü–∞–∫–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.1f}—Å: ‚úÖ{successful} ‚ùå{failed}")

        return {
            "successful": successful,
            "failed": failed,
            "duration": batch_time,
            "results": completed_tasks
        }

    async def _wait_for_completion(self, tasks: List[Dict]) -> List[Dict]:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–µ"""
        pending_tasks = [task for task in tasks if task["task_id"] is not None]
        max_wait_time = 600  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–¥–∞—á—É –º–∞–∫—Å–∏–º—É–º

        while pending_tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            for task in pending_tasks[:]:  # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if task["task_id"] is None:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout
                if time.time() - task["started_at"] > max_wait_time:
                    task["status"] = "failed"
                    task["error"] = f"Timeout after {max_wait_time}s"
                    pending_tasks.remove(task)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                status_result = await self.api_client.get_task_status(task["task_id"])

                if "task" in status_result:
                    api_status = status_result["task"]["status"]
                    task["api_status"] = api_status

                    if api_status == "completed":
                        task["status"] = "completed"
                        pending_tasks.remove(task)
                        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task['position']}")
                    elif api_status in ["failed", "cancelled"]:
                        task["status"] = "failed"
                        task["error"] = status_result["task"].get("error_message", "API reported failure")
                        pending_tasks.remove(task)
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {task['position']} - {task['error']}")
                else:
                    # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è
                    logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {task['position']}")

            if pending_tasks:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(pending_tasks)} –∑–∞–¥–∞—á...")
                await asyncio.sleep(POLL_INTERVAL)

        return tasks


class ArchiveBuilder:
    """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""

    @staticmethod
    def create_archive(archive_path: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞

        Args:
            archive_path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É –∞—Ä—Ö–∏–≤—É

        Returns:
            True –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É archive –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            archive_dir = Path("archive")
            archive_dir.mkdir(exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            safe_archive_path = archive_dir / Path(archive_path).name

            generated_dir = Path("generated_profiles")
            if not generated_dir.exists():
                logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è generated_profiles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            it_files = []
            for root, _, files in os.walk(generated_dir):
                root_path = Path(root)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª—ã –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
                if IT_DEPT_NAME.replace(" ", "_") in str(root_path):
                    for file in files:
                        file_path = root_path / file
                        if file_path.suffix.lower() in ['.json', '.md', '.docx']:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                            try:
                                if file_path.exists() and os.access(file_path, os.R_OK):
                                    it_files.append(file_path)
                                else:
                                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {file_path}")
                            except (FileNotFoundError, PermissionError) as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {file_path}: {e}")
                            except OSError as e:
                                logger.warning(f"‚ö†Ô∏è OS –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                            except Exception as e:
                                logger.exception(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

            if not it_files:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(it_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞")

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            with zipfile.ZipFile(safe_archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for file_path in it_files:
                    try:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç generated_profiles
                        arcname = file_path.relative_to(generated_dir)
                        zipf.write(file_path, arcname)
                        logger.debug(f"üìÑ –î–æ–±–∞–≤–ª–µ–Ω: {arcname}")
                    except Exception as file_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {file_error}")
                        continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
            if safe_archive_path.exists():
                archive_size = safe_archive_path.stat().st_size
                size_mb = archive_size / 1024 / 1024

                logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {safe_archive_path} ({size_mb:.2f} MB)")
                return True
            else:
                logger.error("‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False

        except PermissionError as perm_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {perm_error}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
            return False


class InteractiveInterface:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""

    @staticmethod
    def print_header():
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üöÄ –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–§–ò–õ–ï–ô –ò–¢-–î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê –ê101")
        print("=" * 55)
        print(f"üìä –¶–µ–ª—å: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ '{IT_DEPT_NAME}'")
        print(f"üîß API: {API_BASE_URL}")
        print(f"üì¶ –ü–∞–∫–µ—Ç—ã –ø–æ: {BATCH_SIZE} –ø–æ–∑–∏—Ü–∏–π")
        print()

    @staticmethod
    def ask_restart_choice(has_previous_progress: bool) -> bool:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ restart/resume

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞, False - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        """
        if not has_previous_progress:
            return True

        print("üîç –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        choice = click.confirm("–ù–∞—á–∞—Ç—å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞? (–ù–µ—Ç = –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

        if choice:
            print("üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞.")
        else:
            print("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        return choice

    @staticmethod
    def ask_batch_size(max_available: int, default_size: int = BATCH_SIZE) -> int:
        """
        –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        print(f"\nüìù –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {max_available} –ø—Ä–æ—Ñ–∏–ª–µ–π")

        profiles_count = click.prompt(
            f"–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å? (–º–∞–∫—Å–∏–º—É–º {max_available})",
            type=int,
            default=min(default_size, max_available)
        )

        return min(max(profiles_count, 1), max_available)

    @staticmethod
    def confirm_generation(count: int, batch_size: int) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        batches = (count + batch_size - 1) // batch_size
        print(f"\nüéØ –ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {count}")
        print(f"   üì¶ –ü–∞–∫–µ—Ç–æ–≤: {batches} (–ø–æ {batch_size})")
        print(f"   ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {count * 0.75:.0f} –º–∏–Ω")

        return click.confirm("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é?")


@click.command()
@click.option('--dry-run', is_flag=True, help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
@click.option('--batch-size', default=BATCH_SIZE, help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞')
@click.option('--api-url', default=API_BASE_URL, help='URL API —Å–µ—Ä–≤–µ—Ä–∞')
def main(dry_run: bool, batch_size: int, api_url: str):
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
    return asyncio.run(_main_async(dry_run, batch_size, api_url))


async def _main_async(dry_run: bool, batch_size: int, api_url: str):
    """
    üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    global API_BASE_URL, BATCH_SIZE
    API_BASE_URL = api_url
    BATCH_SIZE = batch_size

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    positions_extractor = ITPositionsExtractor()
    progress_manager = ProgressManager()
    interface = InteractiveInterface()

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        interface.print_header()

        if dry_run:
            print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–û–í–û–ì–û –ó–ê–ü–£–°–ö–ê")
            print()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        print("üìã –ò–∑–≤–ª–µ–∫–∞—é –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        all_positions = positions_extractor.extract_positions()

        if not all_positions:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∑–∏—Ü–∏–∏ –ò–¢-–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞")
            return 1

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_positions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_manager.load_progress()
        progress_manager.progress["total_positions"] = len(all_positions)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_manager.print_progress_summary()

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        has_progress = bool(progress_manager.progress["completed_positions"] or
                          progress_manager.progress["failed_positions"])

        if dry_run:
            restart = True  # –í dry-run –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        else:
            restart = interface.ask_restart_choice(has_progress)

        if restart:
            progress_manager.reset_progress(len(all_positions))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        remaining_positions = progress_manager.get_remaining_positions(all_positions)

        if not remaining_positions:
            print("üéâ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            if click.confirm("–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤?"):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                archive_path = f"IT_Department_Profiles_{timestamp}.zip"
                if ArchiveBuilder.create_archive(archive_path):
                    safe_path = Path("archive") / archive_path
                    print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {safe_path}")
            return 0

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–≤ dry-run –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º)
        if dry_run:
            profiles_to_generate = min(5, len(remaining_positions))
            print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {profiles_to_generate} –ø–æ–∑–∏—Ü–∏–π")
        else:
            profiles_to_generate = interface.ask_batch_size(len(remaining_positions), batch_size)

        selected_positions = remaining_positions[:profiles_to_generate]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤ dry-run –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ yes)
        if not dry_run and not interface.confirm_generation(len(selected_positions), batch_size):
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return 0

        if dry_run:
            print(f"\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô:")
            print(f"   üìä –ü–æ–∑–∏—Ü–∏–π –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(selected_positions)}")
            for i, (dept, pos) in enumerate(selected_positions, 1):
                print(f"   {i}. {pos}")
                print(f"      ‚îî‚îÄ‚îÄ –≤ {dept}")
            print(f"\n‚úÖ –°–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(selected_positions)} –ø–æ–∑–∏—Ü–∏–π")
            return 0

        # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        async with APIClient(api_url) as api_client:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print("\nüîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ...")
            if not await api_client.authenticate():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                return 1

            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞–º–∏
            batch_processor = BatchProcessor(api_client, progress_manager)

            total_successful = 0
            total_failed = 0
            start_time = time.time()

            for i in range(0, len(selected_positions), batch_size):
                batch = selected_positions[i:i + batch_size]
                batch_num = (i // batch_size) + 1
                total_batches = (len(selected_positions) + batch_size - 1) // batch_size

                print(f"\nüì¶ –ü–ê–ö–ï–¢ {batch_num}/{total_batches} ({len(batch)} –ø–æ–∑–∏—Ü–∏–π)")
                print("-" * 50)

                batch_result = await batch_processor.process_batch(batch)

                total_successful += batch_result["successful"]
                total_failed += batch_result["failed"]

                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {batch_result['successful']}")
                print(f"   ‚ùå –û—à–∏–±–∫–∏: {batch_result['failed']}")
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {batch_result['duration']:.1f}—Å")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + batch_size < len(selected_positions):
                    print("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏...")
                    await asyncio.sleep(3)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        total_time = time.time() - start_time
        print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {total_successful}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_failed}")
        print(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω")

        progress_manager.print_progress_summary()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤
        if total_successful > 0 and click.confirm("\nüì¶ –°–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤?"):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            archive_path = f"IT_Department_Profiles_{timestamp}.zip"
            if ArchiveBuilder.create_archive(archive_path):
                safe_path = Path("archive") / archive_path
                print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {safe_path}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞")

        return 0

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        progress_manager.save_progress()
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import aiohttp
        import click
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiohttp click")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ click
    sys.exit(main())