"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è A101 HR Profile Generator.

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ environment variables.
–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
from typing import Optional
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    env_path = Path(__file__).parent.parent.parent / ".env"
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ Loaded environment from: {env_path}")
    else:
        print(f"‚ö†Ô∏è  .env file not found at: {env_path}")

except ImportError:
    print("üì¶ python-dotenv not installed, using system environment variables only")


class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è A101 HR."""

    # =============================================================================
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # =============================================================================

    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    DEBUG: bool = ENVIRONMENT == "development"

    # =============================================================================
    # –ü—É—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # =============================================================================

    BASE_DATA_PATH: str = os.getenv("BASE_DATA_PATH", "/app")

    # =============================================================================
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    # =============================================================================

    DATABASE_URL: str = os.getenv("DATABASE_URL", "sqlite:///data/profiles.db")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –¥–ª—è SQLite
    @property
    def database_path(self) -> str:
        """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite."""
        if self.DATABASE_URL.startswith("sqlite:///"):
            return self.DATABASE_URL.replace("sqlite:///", "")
        return "data/profiles.db"  # fallback

    # =============================================================================
    # JWT Authentication
    # =============================================================================

    JWT_SECRET_KEY: str = os.getenv(
        "JWT_SECRET_KEY", "a101-hr-profile-generator-secret-key-change-in-production"
    )
    JWT_ALGORITHM: str = os.getenv("JWT_ALGORITHM", "HS256")
    JWT_ACCESS_TOKEN_EXPIRE_MINUTES: int = int(
        os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", "1440")
    )  # 24 hours

    # =============================================================================
    # Default User Credentials (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)
    # =============================================================================

    ADMIN_USERNAME: str = os.getenv("ADMIN_USERNAME", "admin")
    ADMIN_PASSWORD: str = os.getenv("ADMIN_PASSWORD", "admin123")
    ADMIN_FULL_NAME: str = os.getenv("ADMIN_FULL_NAME", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã")

    HR_USERNAME: str = os.getenv("HR_USERNAME", "hr")
    HR_PASSWORD: str = os.getenv("HR_PASSWORD", "hr123")
    HR_FULL_NAME: str = os.getenv("HR_FULL_NAME", "HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")

    # =============================================================================
    # OpenRouter API (LLM)
    # =============================================================================

    OPENROUTER_API_KEY: Optional[str] = os.getenv("OPENROUTER_API_KEY")
    OPENROUTER_MODEL: str = os.getenv(
        "OPENROUTER_MODEL", "google/gemini-2.0-flash-exp:free"
    )
    OPENROUTER_BASE_URL: str = os.getenv(
        "OPENROUTER_BASE_URL", "https://openrouter.ai/api/v1"
    )

    @property
    def openrouter_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ OpenRouter API."""
        return bool(self.OPENROUTER_API_KEY)

    # =============================================================================
    # Langfuse (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
    # =============================================================================

    LANGFUSE_PUBLIC_KEY: Optional[str] = os.getenv("LANGFUSE_PUBLIC_KEY")
    LANGFUSE_SECRET_KEY: Optional[str] = os.getenv("LANGFUSE_SECRET_KEY")
    LANGFUSE_HOST: str = os.getenv("LANGFUSE_HOST", "https://cloud.langfuse.com")

    @property
    def langfuse_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Langfuse."""
        return bool(self.LANGFUSE_PUBLIC_KEY and self.LANGFUSE_SECRET_KEY)

    # =============================================================================
    # FastAPI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # =============================================================================

    API_PREFIX: str = os.getenv("API_PREFIX", "/api")
    API_HOST: str = os.getenv("API_HOST", "0.0.0.0")
    API_PORT: int = int(os.getenv("API_PORT", "8022"))

    # CORS origins
    CORS_ORIGINS: list = os.getenv(
        "CORS_ORIGINS", "http://localhost:8033,http://127.0.0.1:8033"
    ).split(",")

    # Trusted hosts –¥–ª—è middleware
    TRUSTED_HOSTS: list = os.getenv(
        "TRUSTED_HOSTS", "localhost,127.0.0.1,0.0.0.0,49.12.122.181"
    ).split(",")

    # =============================================================================
    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    # =============================================================================

    DATA_DIR: str = os.getenv("DATA_DIR", "data")
    TEMPLATES_DIR: str = os.getenv("TEMPLATES_DIR", "templates")
    GENERATED_PROFILES_DIR: str = os.getenv(
        "GENERATED_PROFILES_DIR", "generated_profiles"
    )
    LOGS_DIR: str = os.getenv("LOGS_DIR", "logs")
    STATIC_DIR: str = os.getenv("STATIC_DIR", "backend/static")

    # =============================================================================
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    # =============================================================================

    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Å–µ–∫—Ä–µ—Ç –≤ production
        if self.ENVIRONMENT == "production" and self.JWT_SECRET_KEY.endswith(
            "-change-in-production"
        ):
            issues.append("‚ùå JWT_SECRET_KEY –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ production!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ production
        if self.ENVIRONMENT == "production":
            if self.ADMIN_PASSWORD == "admin123":
                issues.append("‚ùå ADMIN_PASSWORD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ production!")
            if self.HR_PASSWORD == "hr123":
                issues.append("‚ùå HR_PASSWORD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ production!")

        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if issues:
            print("üö® –ü–†–û–ë–õ–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            for issue in issues:
                print(f"  {issue}")
            return False

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        return True

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)."""
        print(
            f"""
üîß A101 HR Configuration Summary:
   Environment: {self.ENVIRONMENT}
   Debug: {self.DEBUG}
   Database: {self.database_path}
   API: {self.API_HOST}:{self.API_PORT}
   OpenRouter: {'‚úÖ Configured' if self.openrouter_configured else '‚ùå Not configured'}
   Langfuse: {'‚úÖ Configured' if self.langfuse_configured else '‚ùå Not configured'}
   CORS Origins: {len(self.CORS_ORIGINS)} origins
   Data Directory: {self.DATA_DIR}
        """
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üß™ Testing A101 HR Configuration...")
    config.print_summary()
    config.validate()
