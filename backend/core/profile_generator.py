"""
–ì–ª–∞–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ê101.

–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
- DataLoader –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- LLMClient –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini 2.5 Flash
- –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Langfuse –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

from .data_loader import DataLoader
from .llm_client import LLMClient

logger = logging.getLogger(__name__)


class ProfileGenerator:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ê101.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–æ–ª–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ Langfuse.
    """
    
    def __init__(self, 
                 openrouter_api_key: str,
                 langfuse_public_key: Optional[str] = None,
                 langfuse_secret_key: Optional[str] = None,
                 base_data_path: str = "/home/yan/A101/HR"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        
        Args:
            openrouter_api_key: API –∫–ª—é—á –¥–ª—è OpenRouter
            langfuse_public_key: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Langfuse (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            langfuse_secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á Langfuse (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            base_data_path: –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –ê101
        """
        self.base_data_path = Path(base_data_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.data_loader = DataLoader(str(self.base_data_path))
        self.llm_client = LLMClient(
            api_key=openrouter_api_key,
            model="google/gemini-2.0-flash-exp:free"
        )
        
        # Langfuse –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.langfuse_enabled = bool(langfuse_public_key and langfuse_secret_key)
        if self.langfuse_enabled:
            try:
                from langfuse import Langfuse
                self.langfuse = Langfuse(
                    public_key=langfuse_public_key,
                    secret_key=langfuse_secret_key
                )
                logger.info("Langfuse integration enabled")
            except ImportError:
                logger.warning("Langfuse not installed, monitoring disabled")
                self.langfuse_enabled = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç —à–∞–±–ª–æ–Ω
        self.prompt_template = self._load_prompt_template()
        
        logger.info("ProfileGenerator initialized successfully")
    
    async def generate_profile(self, 
                             department: str, 
                             position: str,
                             employee_name: Optional[str] = None,
                             temperature: float = 0.1,
                             save_result: bool = True) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        
        Args:
            department: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
            position: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏  
            employee_name: –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM
            save_result: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            
        Returns:
            –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        generation_start = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º trace –≤ Langfuse –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        trace = None
        if self.langfuse_enabled:
            trace = self.langfuse.trace(
                name="profile_generation",
                input={
                    "department": department,
                    "position": position,
                    "employee_name": employee_name
                }
            )
        
        try:
            logger.info(f"Starting profile generation: {department} - {position}")
            
            # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataLoader
            logger.info("üìä Preparing data with deterministic logic...")
            variables = self.data_loader.prepare_langfuse_variables(
                department=department,
                position=position,
                employee_name=employee_name
            )
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM
            logger.info("ü§ñ Generating profile through LLM...")
            llm_result = await self.llm_client.generate_profile(
                prompt=self.prompt_template,
                variables=variables,
                temperature=temperature
            )
            
            # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info("‚úÖ Validating generated profile...")
            validation_result = self._validate_and_enhance_profile(llm_result)
            
            # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            final_result = {
                "success": validation_result["success"],
                "profile": validation_result["profile"],
                "metadata": {
                    "generation": {
                        "department": department,
                        "position": position,
                        "employee_name": employee_name,
                        "timestamp": generation_start.isoformat(),
                        "duration": (datetime.now() - generation_start).total_seconds(),
                        "temperature": temperature
                    },
                    "llm": llm_result["metadata"],
                    "validation": validation_result["validation"],
                    "data_sources": variables.get("estimated_input_tokens", 0)
                },
                "errors": validation_result.get("errors", []),
                "warnings": validation_result.get("warnings", [])
            }
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if save_result and final_result["success"]:
                saved_path = self._save_result(final_result, department, position)
                final_result["metadata"]["saved_path"] = str(saved_path)
                logger.info(f"üíæ Result saved to: {saved_path}")
            
            # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Langfuse
            if trace:
                trace.update(
                    output=final_result,
                    metadata=final_result["metadata"]
                )
            
            duration = final_result["metadata"]["generation"]["duration"]
            success_emoji = "‚úÖ" if final_result["success"] else "‚ùå"
            
            logger.info(f"{success_emoji} Profile generation completed in {duration:.2f}s")
            
            return final_result
            
        except Exception as e:
            error_result = {
                "success": False,
                "profile": None,
                "metadata": {
                    "generation": {
                        "department": department,
                        "position": position,
                        "employee_name": employee_name,
                        "timestamp": generation_start.isoformat(),
                        "duration": (datetime.now() - generation_start).total_seconds(),
                        "error": str(e)
                    }
                },
                "errors": [f"Generation failed: {str(e)}"],
                "warnings": []
            }
            
            if trace:
                trace.update(
                    output=error_result,
                    level="ERROR"
                )
            
            logger.error(f"‚ùå Profile generation failed: {e}")
            return error_result
    
    def _load_prompt_template(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ Langfuse –∏–ª–∏ —Ñ–∞–π–ª–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞
        
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-—ç–∫—Å–ø–µ—Ä—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ê101 ‚Äî –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤ –†–æ—Å—Å–∏–∏, –≤—Ö–æ–¥—è—â–µ–≥–æ –≤ –ü–§–ì "–°–ê–§–ú–ê–†" –∏ –ø–µ—Ä–µ—á–µ–Ω—å —Å–∏—Å—Ç–µ–º–æ–æ–±—Ä–∞–∑—É—é—â–∏—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –†–æ—Å—Å–∏–∏.

# –ö–û–ù–¢–ï–ö–°–¢ –ö–û–ú–ü–ê–ù–ò–ò –ê101

{{company_map}}

# –û–†–ì–ê–ù–ò–ó–ê–¶–ò–û–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê

–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å):
```json
{{org_structure}}
```

–°–æ–∑–¥–∞–≤–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏: **{{department_path}}**

# –¶–ï–õ–ï–í–ê–Ø –î–û–õ–ñ–ù–û–°–¢–¨

**–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:** {{department}}
**–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {{position}}
**–§–ò–û:** {{employee_name}}
**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {{generation_timestamp}}

# KPI –ò –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê

{{kpi_data}}

# IT –°–ò–°–¢–ï–ú–´ –ò –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–ê

{{it_systems}}

---

# üéØ –ó–ê–î–ê–ß–ê

–°–æ–∑–¥–∞–π **–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ "{{position}}"** –≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ "{{department}}" –∫–æ–º–ø–∞–Ω–∏–∏ –ê101.

## –ö–†–ò–¢–ï–†–ò–ò –ö–ê–ß–ï–°–¢–í–ê:

### 1. **–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –†–ï–ê–õ–¨–ù–û–°–¢–ò –ê101**
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ê101 –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã, IT —Å–∏—Å—Ç–µ–º—ã –∏ OKR –∫–æ–º–ø–∞–Ω–∏–∏
- –ü—Ä–∏–º–µ–Ω—è–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –ê101

### 2. **–ì–õ–£–ë–ò–ù–ê –ò –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø**
- –ö–∞–∂–¥–∞—è –æ–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å —á–µ—Ç–∫–∏–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏

### 3. **–ö–û–ù–¢–ï–ö–°–¢–ù–û–°–¢–¨ –ò –õ–û–ì–ò–ß–ù–û–°–¢–¨**
- –£—á–∏—Ç—ã–≤–∞–π –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ KPI –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
- –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ IT —Å–∏—Å—Ç–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å
- –û–±–µ—Å–ø–µ—á—å –ª–æ–≥–∏—á–Ω—ã–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏ (–¥–æ–Ω–æ—Ä—Å–∫–∏–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏)

### 4. **–°–¢–†–£–ö–¢–£–†–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨**
- –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π JSON —Å—Ö–µ–º–µ
- –ó–∞–ø–æ–ª–Ω–∏ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enum –ø–æ–ª–µ–π

## –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –ü–†–û–§–ò–õ–Ø:

- **–û–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏**: –ú–∏–Ω–∏–º—É–º 3-5 –æ–±–ª–∞—Å—Ç–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
- **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏**: –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ü–µ–ª–µ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
- **–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏**: –í—ã–±–µ—Ä–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ –ê101
- **–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞**: 5-8 –∫–∞—á–µ—Å—Ç–≤, –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–ª—è —É—Å–ø–µ—Ö–∞ –≤ —Ä–æ–ª–∏
- **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç**: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
- **–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏**: –õ–æ–≥–∏—á–Ω—ã–µ –¥–æ–Ω–æ—Ä—Å–∫–∏–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –ê101
- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ IT —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

---

# üìã –°–•–ï–ú–ê –í–´–•–û–î–ù–û–ì–û JSON

{{json_schema}}

---

**–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ö–µ–º–µ –≤—ã—à–µ.**"""
    
    def _validate_and_enhance_profile(self, llm_result: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        
        if not llm_result["metadata"]["success"]:
            return {
                "success": False,
                "profile": None,
                "validation": {"is_valid": False, "errors": ["LLM generation failed"]},
                "errors": [llm_result["metadata"].get("error", "Unknown LLM error")]
            }
        
        profile = llm_result["profile"]
        
        if not profile or "error" in profile:
            return {
                "success": False,
                "profile": profile,
                "validation": {"is_valid": False, "errors": ["Invalid profile structure"]},
                "errors": ["Failed to parse valid profile from LLM response"]
            }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM –∫–ª–∏–µ–Ω—Ç
        validation = self.llm_client.validate_profile_structure(profile)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è
        enhanced_profile = self._enhance_profile_data(profile)
        
        return {
            "success": validation["is_valid"] and validation["completeness_score"] > 0.7,
            "profile": enhanced_profile,
            "validation": validation,
            "errors": validation.get("errors", []),
            "warnings": validation.get("warnings", [])
        }
    
    def _enhance_profile_data(self, profile: Dict[str, Any]) -> Dict[str, Any]:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
        enhanced = profile.copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if "metadata" not in enhanced:
            enhanced["metadata"] = {}
        
        enhanced["metadata"].update({
            "generated_by": "A101 HR Profile Generator v1.0",
            "generation_method": "LLM + Deterministic Logic",
            "data_version": "v1.0",
            "last_updated": datetime.now().isoformat()
        })
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if "basic_info" in enhanced and isinstance(enhanced["basic_info"], dict):
            basic_info = enhanced["basic_info"]
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if "employment_type" not in basic_info:
                basic_info["employment_type"] = "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å"
            
            if "salary_range" not in basic_info and "salary_from" in basic_info:
                salary_from = basic_info.get("salary_from", 0)
                salary_to = basic_info.get("salary_to", salary_from * 1.3)
                basic_info["salary_range"] = f"{salary_from:,.0f} - {salary_to:,.0f} —Ä—É–±."
        
        return enhanced
    
    def _save_result(self, result: Dict[str, Any], department: str, position: str) -> Path:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        results_dir = self.base_data_path / "generated_profiles"
        results_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
        dept_dir = results_dir / self._sanitize_filename(department)
        dept_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{self._sanitize_filename(position)}_{timestamp}.json"
        
        file_path = dept_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        return file_path
    
    def _sanitize_filename(self, name: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        sanitized = name.replace(" ", "_")
        sanitized = sanitized.replace("/", "_")
        sanitized = sanitized.replace("\\", "_")
        sanitized = sanitized.replace(":", "_")
        sanitized = sanitized.replace("*", "_")
        sanitized = sanitized.replace("?", "_")
        sanitized = sanitized.replace("<", "_")
        sanitized = sanitized.replace(">", "_")
        sanitized = sanitized.replace("|", "_")
        
        return sanitized
    
    def get_available_departments(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤"""
        return self.data_loader.get_available_departments()
    
    def get_positions_for_department(self, department: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"""
        return self.data_loader.get_positions_for_department(department)
    
    async def validate_system(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        validation_result = {
            "system_ready": True,
            "components": {},
            "warnings": [],
            "errors": []
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        data_sources = self.data_loader.validate_data_sources()
        validation_result["components"]["data_sources"] = data_sources
        
        missing_sources = [name for name, status in data_sources.items() if not status]
        if missing_sources:
            validation_result["errors"].extend([f"Missing data source: {source}" for source in missing_sources])
            validation_result["system_ready"] = False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            llm_test = await self.llm_client.test_connection()
            validation_result["components"]["llm_connection"] = llm_test
            
            if not llm_test["success"]:
                validation_result["errors"].append(f"LLM connection failed: {llm_test['error']}")
                validation_result["system_ready"] = False
        except Exception as e:
            validation_result["components"]["llm_connection"] = {"success": False, "error": str(e)}
            validation_result["errors"].append(f"LLM connection test failed: {e}")
            validation_result["system_ready"] = False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Langfuse
        validation_result["components"]["langfuse"] = {"enabled": self.langfuse_enabled}
        if not self.langfuse_enabled:
            validation_result["warnings"].append("Langfuse monitoring not configured")
        
        return validation_result


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProfileGenerator
    import os
    import asyncio
    
    logging.basicConfig(level=logging.INFO)
    
    async def test_profile_generator():
        api_key = os.getenv("OPENROUTER_API_KEY")
        
        if not api_key:
            print("‚ùå OPENROUTER_API_KEY not set")
            return
        
        generator = ProfileGenerator(openrouter_api_key=api_key)
        
        print("=== –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã ===")
        validation = await generator.validate_system()
        
        print(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞: {'‚úÖ' if validation['system_ready'] else '‚ùå'}")
        
        for component, status in validation["components"].items():
            if isinstance(status, dict) and "success" in status:
                emoji = "‚úÖ" if status["success"] else "‚ùå"
                print(f"  {component}: {emoji}")
            else:
                print(f"  {component}: {status}")
        
        if validation["errors"]:
            print("–û—à–∏–±–∫–∏:")
            for error in validation["errors"]:
                print(f"  ‚ùå {error}")
        
        if validation["warnings"]:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in validation["warnings"]:
                print(f"  ‚ö†Ô∏è {warning}")
        
        if validation["system_ready"]:
            print("\n=== –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è ===")
            result = await generator.generate_profile(
                department="–î–ò–¢",
                position="–°–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä",
                employee_name="–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á"
            )
            
            if result["success"]:
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result['metadata']['generation']['duration']:.2f}s")
                print(f"üìä –ü–æ–ª–Ω–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {result['metadata']['validation']['completeness_score']:.2%}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
                for error in result["errors"]:
                    print(f"  {error}")
    
    # asyncio.run(test_profile_generator())