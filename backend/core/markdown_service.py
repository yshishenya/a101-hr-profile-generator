"""
@doc
Core service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤—ã—Ö Markdown –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ JSON –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.

–ü–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ services –≤ core –∫–∞–∫ domain service - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è markdown
—è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, –Ω–µ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º.

–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —á–∏—Ç–∞–µ–º—ã–µ MD –¥–æ–∫—É–º–µ–Ω—Ç—ã
—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Ç–∞–±–ª–∏—Ü–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.

Examples:
  python> generator = ProfileMarkdownService()
  python> md_content = generator.generate_from_json(profile_data)
  python> generator.save_md_file("profile.md", md_content)
"""

import os
from datetime import datetime
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class ProfileMarkdownService:
    """
    @doc
    Core service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Markdown –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ JSON –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.

    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ MD —Ñ–∞–π–ª—ã —Å:
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
    - –¢–∞–±–ª–∏—Ü–∞–º–∏ –Ω–∞–≤—ã–∫–æ–≤
    - –°–ø–∏—Å–∫–∞–º–∏ –∑–∞–¥–∞—á –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    - –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

    Examples:
      python> service = ProfileMarkdownService()
      python> md_text = service.generate_from_json(json_profile)
    """

    def __init__(self):
        # –ë–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è MD —Ñ–∞–π–ª–æ–≤
        # MD —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ä—è–¥–æ–º —Å JSON –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        self.output_dir = None

    def generate_from_json(self, profile_data: Dict[str, Any]) -> str:
        """
        @doc
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ JSON –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
          profile_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

        Returns:
          str: –ì–æ—Ç–æ–≤—ã–π Markdown –¥–æ–∫—É–º–µ–Ω—Ç

        Examples:
          python> md = service.generate_from_json({"position_title": "–ê–Ω–∞–ª–∏—Ç–∏–∫ BI"})
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å "profile", –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä—è–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            if "profile" in profile_data:
                profile = profile_data.get("profile", {})
            else:
                profile = profile_data
            

            md_content = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            # Generating header...")
            md_content.append(self._generate_header(profile))

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            # Generating basic_info...")
            md_content.append(self._generate_basic_info(profile))

            # –û–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            # Generating responsibilities...")
            md_content.append(self._generate_responsibilities(profile))

            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            # Generating skills...")
            md_content.append(self._generate_skills(profile))

            # –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
            # Generating personal_qualities...")
            md_content.append(self._generate_personal_qualities(profile))

            # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
            # Generating corporate_competencies...")
            md_content.append(self._generate_corporate_competencies(profile))

            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç
            # Generating education...")
            md_content.append(self._generate_education(profile))

            # –ö–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ (–∫–∞—Ä—å–µ—Ä–æ–≥—Ä–∞–º–º–∞)
            # Generating career_development...")
            md_content.append(self._generate_career_development(profile))

            # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
            # Generating workplace_provisioning...")
            md_content.append(self._generate_workplace_provisioning(profile))

            # –ú–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            # Generating performance_metrics...")
            md_content.append(self._generate_performance_metrics(profile))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            # Generating additional_info...")
            md_content.append(self._generate_additional_info(profile))

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            # Generating metadata...")
            md_content.append(self._generate_metadata(profile_data))

            return "\n\n".join(md_content)

        except Exception as e:
            logger.error(f"Error generating MD from JSON: {e}")
            return f"# –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n**–û—à–∏–±–∫–∞:** {str(e)}"

    def _generate_header(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        title = profile.get("position_title", "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        department = profile.get("department_specific", "")

        header = f"# üìã {title}\n\n"
        if department:
            header += f"**–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:** {department}\n\n"

        header += "---\n*–ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π A101 HR Profile Generator*"
        return header

    def _generate_basic_info(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
        content = ["## üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]

        basic_info = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", profile.get("position_title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
            ("–ë–ª–æ–∫", profile.get("department_broad", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
            ("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç/–û—Ç–¥–µ–ª", profile.get("department_specific", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
            (
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                profile.get("position_category", profile.get("category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")),
            ),
            (
                "–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
                profile.get("direct_manager", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            ),
            (
                "–¢–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                profile.get(
                    "primary_activity_type",
                    profile.get("primary_activity", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                ),
            ),
        ]

        # –ü–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–µ
        subordinates = profile.get("subordinates", {})
        if isinstance(subordinates, dict):
            departments = subordinates.get("departments", 0)
            people = subordinates.get("direct_reports", subordinates.get("people", 0))
            subordinates_text = f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤: {departments}, –ß–µ–ª–æ–≤–µ–∫: {people}"
        else:
            subordinates_text = str(subordinates)

        basic_info.append(("–ü–æ–¥—á–∏–Ω–µ–Ω–Ω—ã–µ", subordinates_text))

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        content.append("\n| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |")
        content.append("|----------|----------|")
        for param, value in basic_info:
            content.append(f"| **{param}** | {value} |")

        return "\n".join(content)

    def _generate_responsibilities(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"""
        content = ["## üéØ –û–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"]

        responsibilities = profile.get("responsibility_areas", [])
        if not responsibilities:
            return "\n".join(content + ["\n*–û–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        for i, area in enumerate(responsibilities, 1):
            # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
            if isinstance(area, dict):
                area_name = area.get("area")
                if area_name is None:
                    area_name = area.get("title", f"–û–±–ª–∞—Å—Ç—å {i}")
                elif isinstance(area_name, list):
                    area_name = area_name[0] if area_name else f"–û–±–ª–∞—Å—Ç—å {i}"

                content.append(f"\n### {i}. {area_name}")

                # –ó–∞–¥–∞—á–∏
                tasks = area.get("tasks", [])
                if tasks:
                    for task in tasks:
                        content.append(f"- {task}")
            elif isinstance(area, list):
                # –ï—Å–ª–∏ area —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
                content.append(f"\n### {i}. –û–±–ª–∞—Å—Ç—å {i}")
                for task in area:
                    content.append(f"- {task}")
            else:
                content.append(f"\n### {i}. {str(area)}")

        return "\n".join(content)

    def _generate_skills(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"""
        content = ["## üõ†Ô∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"]

        skills = profile.get("professional_skills", [])
        if not skills:
            return "\n".join(content + ["\n*–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        for skill_category in skills:
            if isinstance(skill_category, dict):
                category_name = skill_category.get(
                    "skill_category",
                    skill_category.get("category", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"),
                )
                content.append(f"\n### {category_name}")

                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
                specific_skills = skill_category.get(
                    "specific_skills", skill_category.get("skills", [])
                )
            elif isinstance(skill_category, list):
                # –ï—Å–ª–∏ skill_category —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤
                content.append(f"\n### –ù–∞–≤—ã–∫–∏")
                specific_skills = skill_category
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
                content.append(f"\n### {str(skill_category)}")
                specific_skills = []

            if specific_skills and len(specific_skills) > 0 and isinstance(specific_skills[0], dict):
                # –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å —É—Ä–æ–≤–Ω—è–º–∏
                content.append("\n| –ù–∞–≤—ã–∫ | –£—Ä–æ–≤–µ–Ω—å | –û–ø–∏—Å–∞–Ω–∏–µ |")
                content.append("|-------|---------|----------|")

                for skill in specific_skills:
                    name = skill.get("skill_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–≤—ã–∫")
                    level = skill.get(
                        "proficiency_level", skill.get("target_level", "–ù–µ —É–∫–∞–∑–∞–Ω")
                    )
                    description = skill.get(
                        "proficiency_description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤ —Ç–µ–∫—Å—Ç
                    if isinstance(level, int):
                        level_map = {
                            1: "–ë–∞–∑–æ–≤—ã–π",
                            2: "–°—Ä–µ–¥–Ω–∏–π",
                            3: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                            4: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
                        }
                        level_text = level_map.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}")
                    else:
                        level_text = str(level)

                    content.append(f"| **{name}** | {level_text} | {description} |")
            else:
                # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤
                for skill in specific_skills:
                    content.append(f"- {skill}")

        return "\n".join(content)

    def _generate_personal_qualities(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
        content = ["## üë§ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞"]

        qualities = profile.get("personal_qualities", [])
        if not qualities:
            return "\n".join(content + ["\n*–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        content.append("")
        for i in range(0, len(qualities), 3):
            row_qualities = qualities[i : i + 3]
            quality_badges = []
            for q in row_qualities:
                if isinstance(q, dict):
                    quality_name = q.get("quality", q.get("name", "–ö–∞—á–µ—Å—Ç–≤–æ"))
                    quality_badges.append(f"üîπ **{quality_name.capitalize()}**")
                else:
                    quality_badges.append(f"üîπ **{str(q).capitalize()}**")
            content.append(" | ".join(quality_badges))

        return "\n".join(content)

    def _generate_corporate_competencies(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"""
        content = ["## üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"]

        competencies = profile.get("corporate_competencies", [])
        if not competencies:
            return "\n".join(content + ["\n*–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        content.append("")
        for i in range(0, len(competencies), 2):
            row_competencies = competencies[i : i + 2]
            competency_badges = []
            for comp in row_competencies:
                if isinstance(comp, dict):
                    comp_name = comp.get("competency", comp.get("name", "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è"))
                    competency_badges.append(f"üéØ **{comp_name}**")
                else:
                    competency_badges.append(f"üéØ **{str(comp)}**")
            content.append(" | ".join(competency_badges))

        return "\n".join(content)

    def _generate_education(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é"""
        content = ["## üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"]

        education = profile.get(
            "experience_and_education",
            profile.get("education_requirements", profile.get("education", {})),
        )
        if not education:
            return "\n".join(content + ["\n*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        edu_info = []

        # –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if "education_level" in education:
            edu_info.append(("–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education["education_level"]))

        # –û–±–ª–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        field_of_study = education.get("field_of_study")
        if field_of_study:
            edu_info.append(("–û–±–ª–∞—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", field_of_study))

        # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ)
        total_work_experience = education.get(
            "total_work_experience", education.get("total_experience")
        )
        if total_work_experience:
            edu_info.append(("–û–±—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", total_work_experience))

        previous_position_experience = education.get("previous_position_experience")
        if previous_position_experience:
            edu_info.append(("–û–ø—ã—Ç –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏", previous_position_experience))

        # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ)
        if "relevant_experience" in education:
            edu_info.append(("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç", education["relevant_experience"]))

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        specializations = education.get(
            "preferred_specializations", education.get("specialties")
        )
        if specializations:
            if isinstance(specializations, list):
                spec_text = ", ".join(specializations)
            else:
                spec_text = str(specializations)
            edu_info.append(("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", spec_text))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        certs = education.get(
            "additional_certifications", education.get("additional_education")
        )
        if certs:
            if isinstance(certs, list):
                content.append("\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã:**")
                for cert in certs:
                    content.append(f"- {cert}")
            else:
                edu_info.append(("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", str(certs)))

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if edu_info:
            content.append("\n| –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ |")
            content.append("|------------|----------|")
            for req, desc in edu_info:
                content.append(f"| **{req}** | {desc} |")

        return "\n".join(content)

    def _generate_career_development(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—å–µ—Ä–æ–≥—Ä–∞–º–º—É (–∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ)"""
        content = ["## üìà –ö–∞—Ä—å–µ—Ä–æ–≥—Ä–∞–º–º–∞"]

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É careerogram –∏ —Å—Ç–∞—Ä—É—é
        # career_development/career_path
        careerogram = profile.get("careerogram", {})
        career_legacy = profile.get(
            "career_development", profile.get("career_path", {})
        )

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        career_data = {**career_legacy, **careerogram}

        if not career_data:
            return "\n".join(
                content + ["\n*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞*"]
            )

        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ careerogram: source_positions –∏ target_pathways
        source_positions = career_data.get("source_positions", {})
        target_pathways = career_data.get("target_pathways", {})
        
        if source_positions:
            content.append("\n### üö™ –í—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É source_positions
            if isinstance(source_positions, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
                content.append("\n**–ü—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:**")
                for pos in source_positions:
                    content.append(f"- {pos}")
            elif isinstance(source_positions, dict):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
                # –ü—Ä—è–º—ã–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏
                direct_predecessors = source_positions.get("direct_predecessors", [])
                if direct_predecessors:
                    content.append("\n**–ü—Ä—è–º—ã–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏:**")
                    for pos in direct_predecessors:
                        content.append(f"- {pos}")
                
                # –°–º–µ–∂–Ω—ã–µ –≤—Ö–æ–¥—ã
                cross_functional = source_positions.get("cross_functional_entrants", [])
                content.append("\n**–°–º–µ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:**")
                for pos in cross_functional:
                    content.append(f"- {pos}")

        if target_pathways:
            content.append("\n### üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏")
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
            vertical_growth = target_pathways.get("vertical_growth", [])
            if vertical_growth:
                content.append("\n#### ‚¨ÜÔ∏è –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
                for position in vertical_growth:
                    if isinstance(position, dict):
                        target = position.get("target_position", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                        department = position.get("target_department", "")
                        rationale = position.get("rationale", "")
                        
                        content.append(f"\n**{target}**")
                        if department:
                            content.append(f"*–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:* {department}")
                        if rationale:
                            content.append(f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* {rationale}")
                        
                        # –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                        competency_bridge = position.get("competency_bridge", {})
                        if competency_bridge:
                            strengthen = competency_bridge.get("strengthen_skills", [])
                            if strengthen:
                                content.append("*–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:*")
                                for skill in strengthen:
                                    content.append(f"- {skill}")
                            
                            acquire = competency_bridge.get("acquire_skills", [])
                            if acquire:
                                content.append("*–ù–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:*")
                                for skill in acquire:
                                    content.append(f"- {skill}")
                    else:
                        content.append(f"- {position}")

            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
            horizontal_growth = target_pathways.get("horizontal_growth", [])
            if horizontal_growth:
                content.append("\n#### ‚ÜîÔ∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
                for position in horizontal_growth:
                    if isinstance(position, dict):
                        target = position.get("target_position", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                        department = position.get("target_department", "")
                        rationale = position.get("rationale", "")
                        
                        content.append(f"\n**{target}**")
                        if department:
                            content.append(f"*–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:* {department}")
                        if rationale:
                            content.append(f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* {rationale}")
                        
                        # –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                        competency_bridge = position.get("competency_bridge", {})
                        if competency_bridge:
                            strengthen = competency_bridge.get("strengthen_skills", [])
                            if strengthen:
                                content.append("*–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:*")
                                for skill in strengthen:
                                    content.append(f"- {skill}")
                            
                            acquire = competency_bridge.get("acquire_skills", [])
                            if acquire:
                                content.append("*–ù–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:*")
                                for skill in acquire:
                                    content.append(f"- {skill}")
                    else:
                        content.append(f"- {position}")

            # –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–æ—Å—Ç
            expert_growth = target_pathways.get("expert_growth", [])
            if expert_growth:
                content.append("\n#### üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–æ—Å—Ç")
                for position in expert_growth:
                    if isinstance(position, dict):
                        target = position.get("target_position", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                        department = position.get("target_department", "")
                        rationale = position.get("rationale", "")
                        
                        content.append(f"\n**{target}**")
                        if department:
                            content.append(f"*–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:* {department}")
                        if rationale:
                            content.append(f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:* {rationale}")
                        
                        # –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                        competency_bridge = position.get("competency_bridge", {})
                        if competency_bridge:
                            strengthen = competency_bridge.get("strengthen_skills", [])
                            if strengthen:
                                content.append("*–ù–∞–≤—ã–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:*")
                                for skill in strengthen:
                                    content.append(f"- {skill}")
                            
                            acquire = competency_bridge.get("acquire_skills", [])
                            if acquire:
                                content.append("*–ù–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:*")
                                for skill in acquire:
                                    content.append(f"- {skill}")
                    else:
                        content.append(f"- {position}")

        # –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if not source_positions and not target_pathways:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: career_pathways
            career_pathways = career_data.get("career_pathways", [])
            if career_pathways:
                for pathway in career_pathways:
                    pathway_type = pathway.get("pathway_type", "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å")
                    content.append(f"\n### üõ§Ô∏è {pathway_type}")

                    # –í—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
                    entry_positions = pathway.get("entry_positions", [])
                    if entry_positions:
                        content.append("\n**–í—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**")
                        for pos in entry_positions:
                            content.append(f"- {pos}")

                    # –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
                    advancement_positions = pathway.get("advancement_positions", [])
                    if advancement_positions:
                        content.append("\n**–ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:**")
                        for pos in advancement_positions:
                            content.append(f"- {pos}")
            else:
                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                entry_positions = career_data.get(
                    "career_entry_positions", career_data.get("donor_positions", [])
                )
                if entry_positions:
                    content.append("\n### üö™ –í—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
                    for pos in entry_positions:
                        content.append(f"- {pos}")

                # –ü–æ–∑–∏—Ü–∏–∏ —Ä–æ—Å—Ç–∞
                growth_positions = career_data.get(
                    "career_growth_positions", career_data.get("target_positions", [])
                )
                if growth_positions:
                    content.append("\n### üöÄ –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç")
                    for pos in growth_positions:
                        content.append(f"- {pos}")

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
        dev_priorities = career_data.get("development_priorities", [])
        if dev_priorities:
            content.append("\n### üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è")
            for priority in dev_priorities:
                content.append(f"- {priority}")

        # –ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ
        mentoring = career_data.get("mentoring_opportunities")
        if mentoring:
            content.append(f"\n### üë• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞\n{mentoring}")

        return "\n".join(content)

    def _generate_workplace_provisioning(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"""
        content = ["## üíª –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"]

        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ workplace_provisioning –∏ —Å—Ç–∞—Ä–∞—è
        # technical_requirements –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        workplace = profile.get("workplace_provisioning", {})
        tech_req_legacy = profile.get("technical_requirements", {})

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        provisioning_data = {**tech_req_legacy, **workplace}

        if not provisioning_data:
            return "\n".join(
                content + ["\n*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"]
            )

        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø—Ä—è–º—ã–µ software –∏ hardware —Å–µ–∫—Ü–∏–∏
        software_info = provisioning_data.get("software", {})
        hardware_info = provisioning_data.get("hardware", {})
        
        if software_info:
            content.append("\n### üì± –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
            standard_package = software_info.get("standard_package", [])
            if standard_package:
                content.append("\n**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç:**")
                for sw in standard_package:
                    content.append(f"- {sw}")
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            specialized_tools = software_info.get("specialized_tools", [])
            if specialized_tools:
                content.append("\n**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**")
                for tool in specialized_tools:
                    content.append(f"- {tool}")

        if hardware_info:
            content.append("\n### üñ•Ô∏è –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ
            standard_workstation = hardware_info.get("standard_workstation", "")
            if standard_workstation:
                content.append(f"\n**–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ:** {standard_workstation}")
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            specialized_equipment = hardware_info.get("specialized_equipment", [])
            if specialized_equipment:
                content.append("\n**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**")
                for eq in specialized_equipment:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                    if eq.lower() != "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è":
                        content.append(f"- {eq}")
                    else:
                        content.append(f"- {eq}")

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        if not software_info and not hardware_info:
            # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            software_hardware = provisioning_data.get("software_hardware", {})
            if software_hardware:
                # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
                software = software_hardware.get("software_systems", [])
                if software:
                    content.append("\n### üì± –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
                    for sw in software:
                        content.append(f"- {sw}")

                # –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
                hardware = software_hardware.get("hardware_equipment", [])
                if hardware:
                    content.append("\n### üñ•Ô∏è –ê–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
                    for hw in hardware:
                        content.append(f"- {hw}")
            else:
                # –ï—â–µ –±–æ–ª–µ–µ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ
                software = provisioning_data.get(
                    "software_systems", provisioning_data.get("software", [])
                )
                if software:
                    content.append("\n### üì± –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ")
                    for sw in software:
                        content.append(f"- {sw}")

                # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                equipment = provisioning_data.get(
                    "equipment_tools", provisioning_data.get("equipment", [])
                )
                if equipment:
                    content.append("\n### üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
                    for eq in equipment:
                        content.append(f"- {eq}")

        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–∏ –≤ –Ω–æ–≤–æ–π, –∏ –≤ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
        permissions = provisioning_data.get("access_permissions", [])
        if permissions:
            content.append("\n### üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
            for perm in permissions:
                content.append(f"- {perm}")

        return "\n".join(content)

    def _generate_performance_metrics(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        content = ["## üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]

        metrics = profile.get("performance_metrics", {})
        if not metrics:
            return "\n".join(content + ["\n*–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã*"])

        # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        methodology = metrics.get("evaluation_methodology")
        if methodology:
            content.append(f"\n**–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏:** {methodology}")

        # –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ü–µ–Ω–∫–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        frequency = metrics.get("evaluation_frequency")
        if frequency:
            content.append(f"\n**–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ü–µ–Ω–∫–∏:** {frequency}")

        # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—Ö–∞ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        success_indicators = metrics.get("success_indicators", [])
        if success_indicators:
            content.append("\n### üéØ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—Ö–∞")
            for indicator in success_indicators:
                content.append(f"- {indicator}")

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ KPI (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        quantitative = metrics.get("quantitative_kpis", [])
        if quantitative:
            content.append("\n### üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            for kpi in quantitative:
                content.append(f"- {kpi}")

        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        qualitative = metrics.get("qualitative_indicators", [])
        if qualitative:
            content.append("\n### üìã –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            for indicator in qualitative:
                content.append(f"- {indicator}")

        # –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
        development_plans = metrics.get("development_plans", [])
        if development_plans:
            content.append("\n### üöÄ –ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è")
            for plan in development_plans:
                content.append(f"- {plan}")

        return "\n".join(content)

    def _generate_additional_info(self, profile: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        content = ["## ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]

        additional = profile.get("additional_information", {})
        if not additional:
            return "\n".join(content + ["\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*"])

        # –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        working_conditions = additional.get("working_conditions", {})
        if working_conditions:
            content.append("\n### üè¢ –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã")

            schedule = working_conditions.get("work_schedule")
            if schedule:
                content.append(f"**–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:** {schedule}")

            remote = working_conditions.get("remote_work_options")
            if remote:
                content.append(f"**–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:** {remote}")

            travel = working_conditions.get("business_travel")
            if travel:
                content.append(f"**–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏:** {travel}")

        # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        risks = additional.get("risk_factors", [])
        if risks:
            content.append("\n### ‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞")
            for risk in risks:
                content.append(f"- {risk}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        special_req = additional.get("special_requirements", [])
        if special_req:
            content.append("\n### üìã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
            for req in special_req:
                content.append(f"- {req}")

        return "\n".join(content)

    def _generate_metadata(self, profile_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        content = ["## üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"]

        profile_meta = profile_data.get("profile", {}).get("metadata", {})
        generation_meta = profile_data.get("metadata", {})

        metadata_info = []

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        if "creation_date" in profile_meta:
            metadata_info.append(
                ("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", profile_meta["creation_date"])
            )

        if "version" in profile_meta:
            metadata_info.append(("–í–µ—Ä—Å–∏—è –ø—Ä–æ—Ñ–∏–ª—è", profile_meta["version"]))

        if "profile_author" in profile_meta:
            metadata_info.append(("–ê–≤—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è", profile_meta["profile_author"]))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_info = generation_meta.get("generation", {})
        if generation_info:
            if "timestamp" in generation_info:
                metadata_info.append(("–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", generation_info["timestamp"]))

            if "duration" in generation_info:
                duration = generation_info["duration"]
                metadata_info.append(("–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", f"{duration:.2f} —Å–µ–∫"))

        # LLM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        llm_info = generation_meta.get("llm", {})
        if llm_info:
            if "model" in llm_info:
                metadata_info.append(("–ú–æ–¥–µ–ª—å LLM", llm_info["model"]))

            if "tokens" in llm_info:
                tokens = llm_info["tokens"]
                total_tokens = tokens.get("total", 0)
                metadata_info.append(("–¢–æ–∫–µ–Ω—ã", f"{total_tokens:,}"))

        # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation = generation_meta.get("validation", {})
        if validation:
            is_valid = validation.get("is_valid", False)
            status = "‚úÖ –í–∞–ª–∏–¥–µ–Ω" if is_valid else "‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏"
            metadata_info.append(("–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏", status))

            if "completeness_score" in validation:
                score = validation["completeness_score"]
                metadata_info.append(("–ü–æ–ª–Ω–æ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è", f"{score:.0%}"))

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if metadata_info:
            content.append("\n| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |")
            content.append("|----------|----------|")
            for param, value in metadata_info:
                content.append(f"| **{param}** | {value} |")

        # –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MD
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        content.append(f"\n---\n*MD –¥–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {current_time}*")

        return "\n".join(content)

    def save_md_file(self, filename: str, content: str) -> str:
        """
        @doc
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç MD –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª.

        Args:
          filename: –ò–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏)
          content: MD –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
          str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

        Examples:
          python> path = service.save_md_file("profile.md", md_content)
        """
        filepath = os.path.join(self.output_dir, filename)

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(content)

            logger.info(f"MD file saved: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"Error saving MD file: {e}")
            raise

    def generate_filename(self, profile_data: Dict[str, Any]) -> str:
        """
        @doc
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.

        Args:
          profile_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è

        Returns:
          str: –ò–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Department_Position_YYYYMMDD_HHMMSS.md

        Examples:
          python> filename = service.generate_filename(profile_json)
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å "profile", –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä—è–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å  
            if "profile" in profile_data:
                profile = profile_data.get("profile", {})
            else:
                profile = profile_data

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            position = profile.get("position_title", "Unknown_Position")
            department_specific = profile.get("department_specific", "")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ (–≥—Ä—É–ø–ø–∞)
            if department_specific:
                dept_parts = department_specific.split(", ")
                department = dept_parts[-1] if dept_parts else "Unknown_Department"
            else:
                department = "Unknown_Department"

            # –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
            position = "".join(
                c for c in position if c.isalnum() or c in " _-"
            ).replace(" ", "_")
            department = "".join(
                c for c in department if c.isalnum() or c in " _-"
            ).replace(" ", "_")

            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

            return f"{department}_{position}_{timestamp}.md"

        except Exception as e:
            logger.error(f"Error generating filename: {e}")
            return f"profile_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"


if __name__ == "__main__":
    print(
        "‚úÖ ProfileMarkdownService - Convert JSON profiles to beautiful MD documents"
    )
    print("üìù Features: Structured sections, skill tables, metadata")
    print("üé® Output: Clean, readable Markdown files")