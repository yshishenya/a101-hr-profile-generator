"""
@doc
–£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π,
–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö —Å–∏—Å—Ç–µ–º—ã.
"""

from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


def determine_position_level(position_name: str, return_type: str = "string") -> Any:
    """
    @doc
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è.

    Args:
        position_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        return_type: –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ("string" –∏–ª–∏ "number")

    Returns:
        str –∏–ª–∏ int: –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Examples:
        python> level = determine_position_level("–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞")
        python> # "senior"
        python> level = determine_position_level("–î–∏—Ä–µ–∫—Ç–æ—Ä", "number")
        python> # 1
    """
    position_lower = position_name.lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if any(
        keyword in position_lower
        for keyword in ["—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Ä–µ–∫—Ç–æ—Ä", "—É–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–Ω–∞—á–∞–ª—å–Ω–∏–∫"]
    ):
        level_str = "senior"
        level_num = 1
    elif any(
        keyword in position_lower
        for keyword in ["–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–∑–∞–º", "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"]
    ):
        level_str = "deputy"
        level_num = 2
    elif any(
        keyword in position_lower for keyword in ["–≤–µ–¥—É—â–∏–π", "–≥–ª–∞–≤–Ω—ã–π", "—Å—Ç–∞—Ä—à–∏–π"]
    ):
        level_str = "lead"
        level_num = 3
    elif any(
        keyword in position_lower
        for keyword in ["—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–∞–Ω–∞–ª–∏—Ç–∏–∫", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–∏–Ω–∂–µ–Ω–µ—Ä"]
    ):
        level_str = "middle"
        level_num = 4
    elif any(
        keyword in position_lower for keyword in ["–º–ª–∞–¥—à–∏–π", "–ø–æ–º–æ—â–Ω–∏–∫", "—Å—Ç–∞–∂–µ—Ä"]
    ):
        level_str = "junior"
        level_num = 5
    else:
        level_str = "middle"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        level_num = 4

    if return_type == "number":
        return level_num
    else:
        return level_str


def determine_position_category(position_name: str) -> str:
    """
    @doc
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è.

    Args:
        position_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Returns:
        str: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Examples:
        python> category = determine_position_category("–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        python> # "analytical"
    """
    position_lower = position_name.lower()

    if any(
        keyword in position_lower
        for keyword in ["—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–∏—Ä–µ–∫—Ç–æ—Ä", "—É–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–Ω–∞—á–∞–ª—å–Ω–∏–∫"]
    ):
        return "management"
    elif any(
        keyword in position_lower
        for keyword in ["–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "—Ç–µ—Ö–Ω–∏–∫", "–∏–Ω–∂–µ–Ω–µ—Ä"]
    ):
        return "technical"
    elif any(
        keyword in position_lower for keyword in ["–∞–Ω–∞–ª–∏—Ç–∏–∫", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"]
    ):
        return "analytical"
    elif any(
        keyword in position_lower
        for keyword in ["–ø—Ä–æ–¥–∞–∂", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π"]
    ):
        return "sales"
    elif any(
        keyword in position_lower
        for keyword in ["hr", "–∫–∞–¥—Ä", "–ø–µ—Ä—Å–æ–Ω–∞–ª", "—Ä–µ–∫—Ä—É—Ç–µ—Ä"]
    ):
        return "hr"
    elif any(
        keyword in position_lower
        for keyword in ["—Ñ–∏–Ω–∞–Ω—Å", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "—ç–∫–æ–Ω–æ–º–∏—Å—Ç"]
    ):
        return "finance"
    elif any(
        keyword in position_lower
        for keyword in ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º", "pr", "brand"]
    ):
        return "marketing"
    elif any(
        keyword in position_lower
        for keyword in ["—é—Ä–∏—Å—Ç", "–ø—Ä–∞–≤–æ–≤", "legal"]
    ):
        return "legal"
    else:
        return "specialist"


def get_position_characteristics(position_name: str) -> Dict[str, Any]:
    """
    @doc
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.

    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–¥–Ω–æ–º –≤—ã–∑–æ–≤–µ.

    Args:
        position_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Returns:
        Dict: –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏

    Examples:
        python> chars = get_position_characteristics("–í–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫")
        python> # {"level": "lead", "level_num": 3, "category": "analytical"}
    """
    return {
        "level": determine_position_level(position_name, "string"),
        "level_num": determine_position_level(position_name, "number"),
        "category": determine_position_category(position_name)
    }


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
POSITION_LEVELS = {
    1: "senior",
    2: "deputy", 
    3: "lead",
    4: "middle",
    5: "junior"
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
POSITION_CATEGORIES = [
    "management",
    "technical", 
    "analytical",
    "sales",
    "hr",
    "finance",
    "marketing",
    "legal",
    "specialist"
]


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç
    test_positions = [
        "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞",
        "–í–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
        "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É", 
        "–ú–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ position_utils...")
    for position in test_positions:
        chars = get_position_characteristics(position)
        print(f"üìã {position}:")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {chars['level']} ({chars['level_num']})")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {chars['category']}")
        print()