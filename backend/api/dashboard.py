"""
@doc Dashboard API - –µ–¥–∏–Ω–æ–µ API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoint'—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API –≤—ã–∑–æ–≤–æ–≤ –∏ —É–ª—É—á—à–∞–µ—Ç UX.

Examples:
  python> # GET /api/dashboard/stats - –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  python> # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: departments, positions, profiles, active_tasks
"""

from fastapi import APIRouter, Depends, HTTPException, status
from typing import Dict, Any, List
import logging
import sqlite3
from datetime import datetime

from ..models.database import get_db_manager
from ..core.config import config
from ..api.auth import get_current_user
from ..models.schemas import (
    DashboardStatsResponse,
    DashboardStatsData,
    DashboardSummary,
    DashboardDepartments,
    DashboardPositions,
    DashboardProfiles,
    DashboardActiveTask,
    DashboardMetadata,
    DataSources,
    DashboardMinimalStatsResponse,
    DashboardMinimalStatsData,
    DashboardActivityResponse,
    DashboardActivityData,
    DashboardActivitySummary,
    RecentProfile,
)

logger = logging.getLogger(__name__)


def get_catalog_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ catalog_service"""
    from ..services.catalog_service import catalog_service
    if catalog_service is None:
        raise RuntimeError("CatalogService not initialized. Check main.py lifespan initialization.")
    return catalog_service

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è dashboard endpoints
dashboard_router = APIRouter(prefix="/api/dashboard", tags=["Dashboard"])


@dashboard_router.get("/stats", response_model=DashboardStatsResponse)
async def get_dashboard_stats(current_user: dict = Depends(get_current_user)):
    """
    @doc
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.
    
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π endpoint, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π (–∏–∑ –∫—ç—à–∞ –∫–∞—Ç–∞–ª–æ–≥–∞)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (–∏–∑ –±–∞–∑—ã)
    - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    
    ### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```bash
    curl -X GET "http://localhost:8001/api/dashboard/stats" \
      -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ```
    
    ### –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    ```json
    {
      "success": true,
      "message": "Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
      "data": {
        "summary": {
          "departments_count": 510,
          "positions_count": 1487,
          "profiles_count": 8,
          "completion_percentage": 0.5,
          "active_tasks_count": 0
        },
        "departments": {
          "total": 510,
          "with_positions": 488,
          "average_positions": 2.9
        },
        "positions": {
          "total": 1487,
          "with_profiles": 8,
          "without_profiles": 1479,
          "coverage_percent": 0.5
        },
        "profiles": {
          "total": 8,
          "percentage_complete": 0.5
        },
        "active_tasks": [],
        "metadata": {
          "last_updated": "2025-09-10T03:17:54.377302",
          "data_sources": {
            "catalog": "cached",
            "profiles": "database",
            "tasks": "memory"
          }
        }
      }
    }
    ```
    
    ### üìä –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:
    - **summary**: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ dashboard
    - **departments**: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º
    - **positions**: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    - **profiles**: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö
    - **active_tasks**: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (TODO: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å generation manager)
    - **metadata**: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Returns:
        Dict —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è dashboard
        
    Examples:
        python> response = await get_dashboard_stats()
        python> # {'success': True, 'data': {'summary': {'departments_count': 510, 'positions_count': 1487}}}
    """
    try:
        logger.info(f"Getting dashboard stats for user {current_user['username']}")

        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –±—ã—Å—Ç—Ä–æ)
        catalog_service = get_catalog_service()
        departments = catalog_service.get_departments()

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        total_positions = 0
        for dept in departments:
            positions = catalog_service.get_positions(dept["name"])
            total_positions += len(positions)

        # 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π (–æ–¥–Ω–∏–º SQL –∑–∞–ø—Ä–æ—Å–æ–º)
        conn = get_db_manager().get_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM profiles")
        profiles_count_result = cursor.fetchone()
        profiles_count = profiles_count_result[0] if profiles_count_result else 0

        # 3. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞ - TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ generation manager)
        active_tasks = []
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å generation manager –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
        # try:
        #     all_tasks = generation_manager.get_all_tasks()
        #     ...
        # except Exception as e:
        #     logger.warning(f"Could not get active tasks: {e}")
        #     active_tasks = []

        # 4. –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        completion_percentage = (
            (profiles_count / total_positions * 100) if total_positions > 0 else 0
        )
        departments_with_profiles = len(
            set([dept["name"] for dept in departments if dept["positions_count"] > 0])
        )

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
        response = DashboardStatsResponse(
            success=True,
            message="Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
            data=DashboardStatsData(
                summary=DashboardSummary(
                    departments_count=len(departments),
                    positions_count=total_positions,
                    profiles_count=profiles_count,
                    completion_percentage=round(completion_percentage, 1),
                    active_tasks_count=len(active_tasks),
                ),
                departments=DashboardDepartments(
                    total=len(departments),
                    with_positions=departments_with_profiles,
                    average_positions=(
                        round(total_positions / len(departments), 1)
                        if departments
                        else 0
                    ),
                ),
                positions=DashboardPositions(
                    total=total_positions,
                    with_profiles=profiles_count,
                    without_profiles=total_positions - profiles_count,
                    coverage_percent=round(completion_percentage, 1),
                ),
                profiles=DashboardProfiles(
                    total=profiles_count,
                    percentage_complete=round(completion_percentage, 1),
                ),
                active_tasks=active_tasks,
                metadata=DashboardMetadata(
                    last_updated=datetime.now().isoformat(),
                    data_sources=DataSources(
                        catalog="cached",
                        profiles="database",
                        tasks="memory",
                    ),
                ),
            ),
        )

        logger.info(
            f"Dashboard stats: {len(departments)} depts, {total_positions} positions, {profiles_count} profiles, {len(active_tasks)} active tasks"
        )
        return response

    except Exception as e:
        logger.error(f"Error getting dashboard stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard: {str(e)}",
        )


@dashboard_router.get("/stats/minimal", response_model=DashboardMinimalStatsResponse)
async def get_minimal_stats(current_user: dict = Depends(get_current_user)):
    """
    @doc
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
    - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π  
    - –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è UX –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    
    ### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```bash
    curl -X GET "http://localhost:8001/api/dashboard/stats/minimal" \
      -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ```
    
    ### –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    ```json
    {
      "success": true,
      "data": {
        "positions_count": 1487,
        "profiles_count": 8,
        "completion_percentage": 0.5,
        "active_tasks_count": 0,
        "last_updated": "2025-09-10T03:18:00.094062"
      }
    }
    ```
    
    ### ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    - –û–¥–∏–Ω SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
    - –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    ### üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ UI:
    - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã dashboard
    - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
    - –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    
    Returns:
        Dict —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        
    Examples:
        python> response = await get_minimal_stats()
        python> # {'success': True, 'data': {'positions_count': 1487, 'profiles_count': 8, 'completion_percentage': 0.5}}
    """
    try:
        logger.info(f"Getting minimal stats for user {current_user['username']}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_service = get_catalog_service()
        departments = catalog_service.get_departments()
        total_positions = sum(dept["positions_count"] for dept in departments)

        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
        conn = get_db_manager().get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM profiles")
        profiles_count = cursor.fetchone()[0]

        # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–∑–∞–≥–ª—É—à–∫–∞)
        active_tasks_count = 0
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å generation manager
        # try:
        #     all_tasks = generation_manager.get_all_tasks()
        #     active_tasks_count = len([...])
        # except:
        #     active_tasks_count = 0

        completion_percentage = (
            (profiles_count / total_positions * 100) if total_positions > 0 else 0
        )

        response = DashboardMinimalStatsResponse(
            success=True,
            message="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
            data=DashboardMinimalStatsData(
                positions_count=total_positions,
                profiles_count=profiles_count,
                completion_percentage=round(completion_percentage, 1),
                active_tasks_count=active_tasks_count,
                last_updated=datetime.now().isoformat(),
            ),
        )

        logger.info(
            f"Minimal stats: {total_positions} positions, {profiles_count} profiles, {completion_percentage:.1f}% complete"
        )
        return response

    except Exception as e:
        logger.error(f"Error getting minimal stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
        )


@dashboard_router.get("/stats/activity", response_model=DashboardActivityResponse)
async def get_activity_stats(current_user: dict = Depends(get_current_user)):
    """
    @doc
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–µ–Ω—Ç—ã dashboard.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    - –ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    
    ### –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    ```bash
    curl -X GET "http://localhost:8001/api/dashboard/stats/activity" \
      -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ```
    
    ### –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
    ```json
    {
      "success": true,
      "data": {
        "active_tasks": [],
        "recent_profiles": [
          {
            "department": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ —Å–≤—è–∑—è–º —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é",
            "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–≤—è–∑—è–º —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é",
            "employee_name": null,
            "created_at": "2025-09-09T18:47:26.337714",
            "status": "completed",
            "created_by": "admin"
          },
          {
            "department": "–ì—Ä—É–ø–ø–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "position": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ v2",
            "employee_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
            "created_at": "2025-09-09T18:18:52.529865",
            "status": "completed",
            "created_by": "admin"
          }
        ],
        "summary": {
          "active_tasks_count": 0,
          "recent_profiles_count": 8,
          "has_activity": true
        },
        "last_updated": "2025-09-10T03:18:05.749119"
      }
    }
    ```
    
    ### üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
    - **active_tasks**: –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (TODO: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å generation manager)
    - **recent_profiles**: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    - **summary**: –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    - **has_activity**: –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    
    ### üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:
    - Endpoint –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    - –î–∞–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (DESC)
    - –í–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è employee_name
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
    Examples:
        python> response = await get_activity_stats()
        python> # {'success': True, 'data': {'recent_profiles': [...], 'has_activity': True}}
    """
    try:
        logger.info(f"Getting activity stats for user {current_user['username']}")

        # 1. –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        active_tasks = []
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å generation manager
        # try:
        #     all_tasks = generation_manager.get_all_tasks()
        #     active_tasks = [...]
        # except:
        #     active_tasks = []

        # 2. –ù–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        conn = get_db_manager().get_connection()
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT p.department, p.position, p.employee_name, p.created_at, p.status,
                   u.username as created_by
            FROM profiles p
            LEFT JOIN users u ON p.created_by = u.id
            ORDER BY p.created_at DESC
            LIMIT 10
        """
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        recent_profiles = [
            RecentProfile(
                department=row["department"],
                position=row["position"],
                employee_name=row["employee_name"],
                created_at=row["created_at"],
                status=row["status"],
                created_by=row["created_by"],
            )
            for row in cursor.fetchall()
        ]

        response = DashboardActivityResponse(
            success=True,
            message="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞",
            data=DashboardActivityData(
                active_tasks=active_tasks,
                recent_profiles=recent_profiles,
                summary=DashboardActivitySummary(
                    active_tasks_count=len(active_tasks),
                    recent_profiles_count=len(recent_profiles),
                    has_activity=len(active_tasks) > 0 or len(recent_profiles) > 0,
                ),
                last_updated=datetime.now().isoformat(),
            ),
        )

        logger.info(
            f"Activity stats: {len(active_tasks)} active tasks, {len(recent_profiles)} recent profiles"
        )
        return response

    except Exception as e:
        logger.error(f"Error getting activity stats: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}",
        )


if __name__ == "__main__":
    print("‚úÖ Dashboard API endpoints created!")
    print("üìç Available endpoints:")
    print("  - GET /api/dashboard/stats - Full dashboard statistics")
    print("  - GET /api/dashboard/stats/minimal - Essential metrics only")
    print("  - GET /api/dashboard/stats/activity - Activity feed data")
