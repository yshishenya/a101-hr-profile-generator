"""
@doc Request Logging Middleware

Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ API layer.

Examples:
    python>
    app.add_middleware(RequestLoggingMiddleware)
    # –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

from fastapi import Request
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from datetime import datetime
import time
import logging

from ...services.auth_service import auth_service

logger = logging.getLogger(__name__)


class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """
    @doc Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤

    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ main.py.
    –†–∞–∑–º–µ—â–µ–Ω –≤ API layer —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP requests.

    Examples:
        python>
        app.add_middleware(RequestLoggingMiddleware)
        # üì• GET /api/profiles - user:admin from 127.0.0.1
        # üì§ GET /api/profiles - ‚úÖ 200 - user:admin - 0.123s
    """

    def __init__(self, app):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        """
        @doc –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏

        Examples:
            python>
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π HTTP –∑–∞–ø—Ä–æ—Å
            # –í–∫–ª—é—á–∞–µ—Ç IP, user agent, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        """

        start_time = time.time()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        method = request.method
        url = str(request.url)
        path = request.url.path
        client_ip = request.client.host if request.client else "unknown"
        user_agent = request.headers.get("user-agent", "unknown")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        user_info = "anonymous"
        auth_header = request.headers.get("Authorization")

        if auth_header and auth_header.startswith("Bearer "):
            token = auth_header.split(" ")[1]
            try:
                if auth_service is not None:
                    user_data = auth_service.verify_token(token)
                    if user_data:
                        user_info = f"user:{user_data['username']}"
            except Exception:
                # AuthService issues - –Ω–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ anonymous
                pass

        logger.info(f"üì• {method} {path} - {user_info} from {client_ip}")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await call_next(request)

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            process_time = time.time() - start_time

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_code = response.status_code
            status_emoji = (
                "‚úÖ"
                if 200 <= status_code < 300
                else "‚ö†Ô∏è" if 300 <= status_code < 400 else "‚ùå"
            )

            logger.info(
                f"üì§ {method} {path} - {status_emoji} {status_code} - "
                f"{user_info} - {process_time:.3f}s"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            response.headers["X-Process-Time"] = str(process_time)
            response.headers["X-Request-ID"] = str(hash(f"{client_ip}-{start_time}"))

            return response

        except Exception as e:
            process_time = time.time() - start_time

            logger.error(
                f"üí• {method} {path} - ERROR - {user_info} - {process_time:.3f}s - {str(e)}"
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
            return JSONResponse(
                status_code=500,
                content={
                    "success": False,
                    "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                    "detail": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "timestamp": datetime.now().isoformat(),
                    "path": path,
                },
            )