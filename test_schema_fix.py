#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON schema:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ templates/prompts/production/config.json
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è 'professional_skills_reasoning' –≤ required
"""

import sys
sys.path.append('.')

from backend.core.prompt_manager import PromptManager
import json

def test_schema_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON schema"""

    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON schema\n")
    print("=" * 60)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PromptManager
    pm = PromptManager()
    print("‚úÖ PromptManager initialized\n")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = pm.get_prompt_config('profile_generation', environment='production')
    print("‚úÖ Config loaded from templates/prompts/production/config.json\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f"Model: {config.get('model')}")
    print(f"Temperature: {config.get('temperature')}")
    print(f"Max tokens: {config.get('max_tokens')}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º response_format
    response_format = config.get('response_format')
    if not response_format:
        print("‚ùå FAILED: response_format not found in config")
        return False

    print(f"‚úÖ response_format found: type={response_format.get('type')}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º json_schema
    json_schema = response_format.get('json_schema', {})
    schema = json_schema.get('schema', {})

    print(f"Schema name: {json_schema.get('name')}")
    print(f"Strict mode: {json_schema.get('strict')}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º required array
    required = schema.get('required', [])
    properties = list(schema.get('properties', {}).keys())

    print(f"Properties count: {len(properties)}")
    print(f"Required fields count: {len(required)}\n")

    # –ö–ª—é—á–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞–ª–∏—á–∏–µ professional_skills_reasoning
    if 'professional_skills_reasoning' in required:
        print("‚úÖ SUCCESS: 'professional_skills_reasoning' IS in required array")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ properties –≤ required
        missing = set(properties) - set(required)
        if missing:
            print(f"‚ö†Ô∏è  WARNING: Some properties not in required: {missing}")
            return True  # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        else:
            print("‚úÖ All properties are in required array")
            return True
    else:
        print("‚ùå FAILED: 'professional_skills_reasoning' NOT in required array")
        print(f"\nRequired fields: {required}")
        return False

if __name__ == "__main__":
    print("\n" + "="*60)
    print("  –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø BUG: JSON Schema Validation")
    print("="*60 + "\n")

    success = test_schema_fix()

    print("\n" + "="*60)
    if success:
        print("  ‚úÖ –¢–ï –°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
    else:
        print("  ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
    print("="*60 + "\n")

    sys.exit(0 if success else 1)
