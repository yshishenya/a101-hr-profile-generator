#!/usr/bin/env python3
"""
–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ Excel –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
"""

import pandas as pd
import json
from collections import defaultdict
from typing import Dict, List, Any


def extract_hierarchy(row: pd.Series) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é, —É–±–∏—Ä–∞—è –ø–æ–≤—Ç–æ—Ä—ã."""
    levels = []
    prev_level = None
    
    for level_col in ['–£—Ä–æ–≤–µ–Ω—å 2', '–£—Ä–æ–≤–µ–Ω—å 3', '–£—Ä–æ–≤–µ–Ω—å 4', '–£—Ä–æ–≤–µ–Ω—å 5', '–£—Ä–æ–≤–µ–Ω—å 6', '–£—Ä–æ–≤–µ–Ω—å 7']:
        current_level = row[level_col]
        if pd.isna(current_level):
            break
        if current_level != prev_level:
            levels.append(current_level)
            prev_level = current_level
    
    return levels


def build_hierarchy_tree(data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–°—Ç—Ä–æ–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    tree = {}
    
    for item in data:
        hierarchy = item['hierarchy']
        positions = item['positions']
        number = item['number']
        
        current_node = tree
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏, —Å–æ–∑–¥–∞–≤–∞—è —É–∑–ª—ã
        for i, level in enumerate(hierarchy):
            if level not in current_node:
                current_node[level] = {
                    'positions': [],
                    'children': {},
                    'number': None
                }
            
            # –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä
            if i == len(hierarchy) - 1:
                current_node[level]['positions'].extend(positions)
                current_node[level]['number'] = number
            
            current_node = current_node[level]['children']
    
    return tree


def clean_tree(tree: Dict[str, Any]) -> Dict[str, Any]:
    """–û—á–∏—â–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –æ—Ç –ø—É—Å—Ç—ã—Ö —É–∑–ª–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
    cleaned = {}
    
    for key, value in tree.items():
        cleaned_value = {
            'number': value['number'],
            'positions': value['positions'] if value['positions'] else [],
        }
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –¥–µ—Ç–µ–π
        if value['children']:
            cleaned_children = clean_tree(value['children'])
            if cleaned_children:
                cleaned_value['children'] = cleaned_children
        
        cleaned[key] = cleaned_value
    
    return cleaned


def excel_to_json(file_path: str, output_path: str = None) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Excel —Ñ–∞–π–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    """
    
    # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    df = pd.read_excel(file_path, sheet_name='–≤—ã–≥—Ä—É–∑–∫–∞')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º
    grouped_data = defaultdict(lambda: {'hierarchy': None, 'positions': []})
    
    for _, row in df.iterrows():
        number = row['–ù–æ–º–µ—Ä']
        hierarchy = extract_hierarchy(row)
        position = row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é (–æ–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º)
        if grouped_data[number]['hierarchy'] is None:
            grouped_data[number]['hierarchy'] = hierarchy
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if position not in grouped_data[number]['positions']:
            grouped_data[number]['positions'].append(position)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
    tree_data = []
    for number, data in grouped_data.items():
        tree_data.append({
            'number': number,
            'hierarchy': data['hierarchy'],
            'positions': data['positions']
        })
    
    # –°—Ç—Ä–æ–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ
    hierarchy_tree = build_hierarchy_tree(tree_data)
    
    # –û—á–∏—â–∞–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    cleaned_tree = clean_tree(hierarchy_tree)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    result = {
        'organization': cleaned_tree,
        'metadata': {
            'total_records': len(df),
            'unique_units': len(grouped_data),
            'top_level_blocks': len(cleaned_tree)
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if output_path:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
    
    return result


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞."""
    input_file = '/home/yan/A101/HR/–°—Ç—Ä—É–∫—Ç—É—Ä–∞.xlsx'
    output_file = '/home/yan/A101/HR/structure.json'
    
    try:
        print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Excel –≤ JSON...")
        result = excel_to_json(input_file, output_file)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ:")
        print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result['metadata']['total_records']}")
        print(f"   üè¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {result['metadata']['unique_units']}")
        print(f"   üîù –ë–ª–æ–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {result['metadata']['top_level_blocks']}")
        print(f"   üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()