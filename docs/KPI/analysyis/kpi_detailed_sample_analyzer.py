#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ KPI —Ñ–∞–π–ª–æ–≤
"""

import pandas as pd
import openpyxl
import os


def analyze_data_samples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    kpi_dir = "/home/yan/A101/HR/KPI"
    target_files = [
        "–ö–ü–≠ 2025_–ê–° (–õ–∞—Ä–∏–Ω–∞ –û)+.xlsx",
        "–ö–ü–≠ 2025_–î–ò–¢ (–°–ª–æ–∂–µ–Ω–∏–∫–∏–Ω –ê)+.xlsx",
        "–ö–ü–≠ 2025_–¢–û–ü_—Ñ–∏–Ω–∞–ª_.xlsx",
    ]

    print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ú–ï–†–û–í –î–ê–ù–ù–´–• KPI")
    print("=" * 60)

    for filename in target_files:
        file_path = os.path.join(kpi_dir, filename)
        if not os.path.exists(file_path):
            continue

        print(f"\nüìÅ –§–ê–ô–õ: {filename}")
        print("-" * 50)

        try:
            wb = openpyxl.load_workbook(file_path, data_only=True)
            main_sheet = wb.worksheets[0]  # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç

            print(f"–û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç: '{main_sheet.title}'")
            print(
                f"–†–∞–∑–º–µ—Ä: {main_sheet.max_row} —Å—Ç—Ä–æ–∫ x {main_sheet.max_column} —Å—Ç–æ–ª–±—Ü–æ–≤"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            print(f"\nüè∑Ô∏è –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ì–û–õ–û–í–ö–û–í:")
            for row_num in range(1, min(6, main_sheet.max_row + 1)):
                row_values = []
                for col_num in range(1, min(16, main_sheet.max_column + 1)):
                    cell = main_sheet.cell(row=row_num, column=col_num)
                    value = str(cell.value) if cell.value else ""
                    if len(value) > 30:
                        value = value[:27] + "..."
                    row_values.append(value)

                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
                while row_values and not row_values[-1]:
                    row_values.pop()

                if row_values:
                    print(f"  –°—Ç—Ä–æ–∫–∞ {row_num}: {row_values}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö KPI
            print(f"\nüìä –ü–†–ò–ú–ï–†–´ KPI –î–ê–ù–ù–´–•:")
            kpi_data_found = False

            for row_num in range(5, min(15, main_sheet.max_row + 1)):
                row_values = []
                has_meaningful_data = False

                for col_num in range(1, min(8, main_sheet.max_column + 1)):
                    cell = main_sheet.cell(row=row_num, column=col_num)
                    value = cell.value

                    if value is not None and str(value).strip():
                        has_meaningful_data = True
                        if isinstance(value, str) and len(value) > 40:
                            value = value[:37] + "..."
                        row_values.append(str(value))
                    else:
                        row_values.append("")

                if has_meaningful_data and len([v for v in row_values if v]) >= 2:
                    kpi_data_found = True
                    print(f"  KPI {row_num-4}: {row_values}")

                    if row_num - 4 >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                        break

            if not kpi_data_found:
                print("  –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ KPI –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
            merged_ranges = list(main_sheet.merged_cells.ranges)
            if merged_ranges:
                print(f"\nüîó –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ï –Ø–ß–ï–ô–ö–ò ({len(merged_ranges)}):")
                for i, mr in enumerate(merged_ranges[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    top_left = main_sheet.cell(mr.min_row, mr.min_col)
                    value = (
                        str(top_left.value)[:30] + "..."
                        if top_left.value and len(str(top_left.value)) > 30
                        else str(top_left.value)
                    )
                    print(f"  {mr}: '{value}'")

                if len(merged_ranges) > 8:
                    print(f"  ... –∏ –µ—â–µ {len(merged_ranges) - 8} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

    # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ pandas –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\n\nüìà –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó PANDAS (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print("=" * 60)

    for filename in target_files:
        file_path = os.path.join(kpi_dir, filename)
        if not os.path.exists(file_path):
            continue

        print(f"\nüìÅ {filename}")
        print("-" * 30)

        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è
            df = pd.read_excel(file_path, header=None)
            print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ pandas: {df.shape}")

            # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            print("–ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö:")

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å KPI (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            kpi_keywords = ["–ö–ü–≠", "KPI", "–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–º–µ—Ç—Ä–∏–∫–∞", "—Ü–µ–ª"]

            for idx, row in df.iterrows():
                if idx > 20:  # –ù–µ –∏—â–µ–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                    break

                row_str = " ".join([str(val) for val in row.values if val is not None])
                if any(keyword.lower() in row_str.lower() for keyword in kpi_keywords):
                    print(
                        f"  –°—Ç—Ä–æ–∫–∞ {idx+1} (–≤–æ–∑–º–æ–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫): {row.values[:6].tolist()}"
                    )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            numeric_areas = []
            for idx, row in df.iterrows():
                if idx > 30:
                    break
                numeric_count = sum(
                    1
                    for val in row.values
                    if isinstance(val, (int, float)) and not pd.isna(val)
                )
                if numeric_count >= 2:
                    numeric_areas.append((idx, numeric_count))

            if numeric_areas:
                print(f"–û–±–ª–∞—Å—Ç–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
                for row_idx, count in numeric_areas[:5]:
                    print(f"  –°—Ç—Ä–æ–∫–∞ {row_idx+1}: {count} —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ pandas –∞–Ω–∞–ª–∏–∑–∞: {e}")


if __name__ == "__main__":
    analyze_data_samples()
