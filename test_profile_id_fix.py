#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å ID –ø—Ä–æ—Ñ–∏–ª—è
Tests the profile ID fix in frontend-backend communication
"""

def test_profile_id_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"""
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
    mock_api_response = {
        "profile_id": "test-profile-123",
        "department": "IT",
        "position": "Senior Developer",
        "employee_name": "Test User",
        "status": "active",
        "validation_score": 0.95,
        "completeness_score": 0.98,
        "created_at": "2024-01-01T12:00:00",
        "created_by_username": "admin"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å profile_id (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    profile_id = mock_api_response.get("profile_id")
    assert profile_id is not None, "‚ùå profile_id –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
    assert profile_id == "test-profile-123", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ profile_id: {profile_id}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª–µ 'id' –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞)
    old_id_field = mock_api_response.get("id")
    assert old_id_field is None, "‚ùå –ü–æ–ª–µ 'id' –Ω–µ –¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ API"
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print(f"‚úÖ profile_id: {profile_id}")
    print("‚úÖ –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ 'id' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    return True

def test_frontend_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º"""
    
    mock_profile = {
        "profile_id": "test-profile-456",
        "department": "HR", 
        "position": "HR Manager"
    }
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    def get_profile_id_fixed(profile):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ—Ñ–∏–ª—è"""
        return profile.get("profile_id", "")
    
    def get_profile_id_old(profile):
        """–°—Ç–∞—Ä–∞—è (–ø—Ä–æ–±–ª–µ–º–Ω–∞—è) –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ—Ñ–∏–ª—è"""
        return profile.get("id", "")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    fixed_id = get_profile_id_fixed(mock_profile)
    assert fixed_id == "test-profile-456", f"‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–µ—Ä–Ω—É–ª–∞: {fixed_id}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
    old_id = get_profile_id_old(mock_profile)
    assert old_id == "", f"‚ùå –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –≤–µ—Ä–Ω—É–ª–∞: {old_id}"
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–∞–µ—Ç ID: {fixed_id}")
    print(f"‚úÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ—Ç—É: '{old_id}'")
    
    return True

if __name__ == "__main__":
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å ID –ø—Ä–æ—Ñ–∏–ª—è...")
    print("-" * 60)
    
    try:
        test_profile_id_structure()
        print()
        test_frontend_logic()
        print()
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å ID –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except AssertionError as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        exit(1)
    except Exception as e:
        print(f"üí• –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        exit(1)