#!/usr/bin/env python3
"""
üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ Langfuse —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π

–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Langfuse —Å:
1. –°–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–∏ (google/gemini-2.5-flash)
3. JSON —Å—Ö–µ–º–æ–π –¥–ª—è structured output
4. –í—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
env_path = Path('/home/yan/A101/HR/.env')
if env_path.exists():
    with open(env_path) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

sys.path.insert(0, '/home/yan/A101/HR')

from langfuse import Langfuse

def create_langfuse_prompt():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –≤ Langfuse —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    print("üìù Creating A101 HR Profile Generator Prompt in Langfuse")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Langfuse
    public_key = os.getenv('LANGFUSE_PUBLIC_KEY')
    secret_key = os.getenv('LANGFUSE_SECRET_KEY')
    
    if not public_key or not secret_key:
        print("‚ùå Langfuse credentials not found")
        return False
    
    langfuse = Langfuse(
        public_key=public_key,
        secret_key=secret_key,
        host="https://cloud.langfuse.com"
    )
    
    # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω
    template_path = Path("/home/yan/A101/HR/templates/generation_prompt.txt")
    if template_path.exists():
        with open(template_path, 'r', encoding='utf-8') as f:
            system_prompt = f.read()
        print(f"‚úÖ Loaded prompt template ({len(system_prompt)} chars)")
    else:
        print("‚ùå Template file not found")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º JSON —Å—Ö–µ–º—É –¥–ª—è structured output
    job_profile_schema = {
        "type": "object",
        "properties": {
            "position_title": {
                "type": "string",
                "description": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
            },
            "department_broad": {
                "type": "string", 
                "description": "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É–∫—Ä—É–ø–Ω–µ–Ω–Ω–æ"
            },
            "department_specific": {
                "type": "string",
                "description": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
            },
            "category": {
                "type": "string",
                "description": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                "enum": [
                    "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
                    "–õ–∏–Ω–µ–π–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–≥—Ä—É–ø–ø–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
                    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–æ—Ç–¥–µ–ª, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
                    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è (–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç)"
                ]
            },
            "direct_manager": {
                "type": "string",
                "description": "–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
            },
            "subordinates": {
                "type": "object",
                "properties": {
                    "departments": {"type": "integer"},
                    "people": {"type": "string"}
                }
            },
            "primary_activity": {
                "type": "string",
                "description": "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è/–æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            },
            "responsibility_areas": {
                "type": "array",
                "description": "–û–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏",
                "items": {
                    "type": "object",
                    "properties": {
                        "title": {"type": "string"},
                        "tasks": {
                            "type": "array",
                            "items": {"type": "string"}
                        }
                    },
                    "required": ["title", "tasks"]
                },
                "minItems": 3
            },
            "professional_skills": {
                "type": "array",
                "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                "items": {
                    "type": "object",
                    "properties": {
                        "category": {"type": "string"},
                        "skills": {
                            "type": "array", 
                            "items": {"type": "string"}
                        },
                        "target_level": {
                            "type": "string",
                            "enum": ["–ë–∞–∑–æ–≤—ã–π", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π"]
                        }
                    },
                    "required": ["category", "skills"]
                },
                "minItems": 2
            },
            "corporate_competencies": {
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
                        "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                        "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π",
                        "–ö–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",
                        "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
                        "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
                        "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ"
                    ]
                },
                "minItems": 3,
                "maxItems": 5
            },
            "personal_qualities": {
                "type": "array",
                "items": {
                    "type": "string",
                    "enum": [
                        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
                        "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                        "–°–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è", "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞",
                        "–ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å", "–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                    ]
                },
                "minItems": 5,
                "maxItems": 8
            },
            "education": {
                "type": "object",
                "properties": {
                    "education_level": {
                        "type": "string",
                        "enum": [
                            "–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                            "–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                            "–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                            "–í—ã—Å—à–µ–µ/–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
                        ]
                    },
                    "specialties": {"type": "string"},
                    "total_experience": {"type": "string"},
                    "additional_education": {"type": "string"}
                }
            },
            "career_path": {
                "type": "object",
                "properties": {
                    "donor_positions": {
                        "type": "array",
                        "items": {"type": "string"}
                    },
                    "target_positions": {
                        "type": "array", 
                        "items": {"type": "string"}
                    }
                }
            },
            "technical_requirements": {
                "type": "object",
                "properties": {
                    "software": {
                        "type": "array",
                        "items": {"type": "string"}
                    },
                    "equipment": {
                        "type": "array",
                        "items": {"type": "string"}
                    }
                }
            }
        },
        "required": [
            "position_title", "department_broad", "department_specific", 
            "category", "primary_activity", "responsibility_areas",
            "professional_skills", "corporate_competencies", "personal_qualities"
        ],
        "additionalProperties": False
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Langfuse
    prompt_config = {
        "model": "google/gemini-2.5-flash",
        "temperature": 0.1,
        "max_tokens": 4000,
        "response_format": {
            "type": "json_schema",
            "json_schema": {
                "name": "job_profile",
                "strict": True,
                "schema": job_profile_schema
            }
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        print("üöÄ Creating prompt in Langfuse...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # langfuse.delete_prompt("a101-hr-profile-generation")
        
        result = langfuse.create_prompt(
            name="a101-hr-profile-gemini-v2",
            prompt=[
                {
                    "role": "system", 
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": "–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ \"{{position}}\" –¥–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ \"{{department}}\" —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ \"{{employee_name}}\".\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {{org_structure}}\n- KPI –¥–∞–Ω–Ω—ã–µ: {{kpi_data}}\n- IT —Å–∏—Å—Ç–µ–º—ã: {{it_systems}}\n\n–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π."
                }
            ],
            labels=["production", "v2.0", "structured-output"],
            tags=["a101", "hr", "profile-generation", "gemini-2.5-flash"],
            type="chat",
            config=prompt_config,
            commit_message="A101 HR Profile Generator v2.0 with structured output for Gemini 2.5 Flash"
        )
        
        print("‚úÖ Prompt successfully created in Langfuse!")
        print(f"  Name: a101-hr-profile-gemini-v2")
        print(f"  Model: {prompt_config['model']}")
        print(f"  Temperature: {prompt_config['temperature']}")
        print(f"  Structured output: ‚úÖ")
        print(f"  Schema properties: {len(job_profile_schema['properties'])}")
        print(f"  Required fields: {len(job_profile_schema['required'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to create prompt: {e}")
        
        # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        if "already exists" in str(e).lower():
            print("‚ÑπÔ∏è  Prompt already exists, this is normal")
            return True
        
        return False

def test_prompt_retrieval():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    
    print(f"\nüîç Testing prompt retrieval...")
    
    public_key = os.getenv('LANGFUSE_PUBLIC_KEY')
    secret_key = os.getenv('LANGFUSE_SECRET_KEY')
    
    langfuse = Langfuse(
        public_key=public_key,
        secret_key=secret_key,
        host="https://cloud.langfuse.com"
    )
    
    try:
        prompt = langfuse.get_prompt("a101-hr-profile-gemini-v2")
        
        print("‚úÖ Prompt retrieved successfully!")
        print(f"  Type: {type(prompt)}")
        
        if hasattr(prompt, 'prompt'):
            messages = prompt.prompt
            print(f"  Messages: {len(messages) if isinstance(messages, list) else 'Not a list'}")
        
        if hasattr(prompt, 'config'):
            config = prompt.config
            print(f"  Config model: {config.get('model', 'N/A')}")
            print(f"  Config temperature: {config.get('temperature', 'N/A')}")
            print(f"  Response format: {'JSON Schema' if config.get('response_format') else 'Text'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to retrieve prompt: {e}")
        return False

if __name__ == "__main__":
    print("üèóÔ∏è A101 HR Profile Generator - Langfuse Prompt Setup")
    print("=" * 60)
    
    success1 = create_langfuse_prompt()
    success2 = test_prompt_retrieval()
    
    if success1 and success2:
        print(f"\nüéâ SUCCESS: Prompt setup completed!")
        print(f"üìä Next steps:")
        print(f"  1. Update LLMClient to use langfuse.openai")
        print(f"  2. Modify ProfileGenerator to use Langfuse prompts")
        print(f"  3. Test complete pipeline")
        print(f"\nüåê Check prompt in Langfuse: https://cloud.langfuse.com")
    else:
        print(f"\n‚ùå FAILED: Prompt setup incomplete")
    
    exit(0 if success1 and success2 else 1)