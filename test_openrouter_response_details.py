#!/usr/bin/env python3
"""
üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ OpenRouter –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è metadata
"""

import os
import sys
import json
import time
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
env_path = Path("/home/yan/A101/HR/.env")
if env_path.exists():
    with open(env_path) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith("#") and "=" in line:
                key, value = line.split("=", 1)
                os.environ[key] = value

sys.path.insert(0, "/home/yan/A101/HR")

from backend.core.llm_client import LLMClient
from langfuse import Langfuse


def explore_openrouter_response():
    """–ò—Å—Å–ª–µ–¥—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ OpenRouter"""

    print("üîç Exploring OpenRouter response structure...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        client = LLMClient()
        langfuse = Langfuse()
        print("‚úÖ Clients initialized")
    except Exception as e:
        print(f"‚ùå Failed to initialize: {e}")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç
    try:
        prompt = langfuse.get_prompt(
            "a101-hr-profile-gemini-v3-simple", label="production"
        )
        print(f"‚úÖ Got prompt: {prompt.name} v{prompt.version}")
    except Exception as e:
        print(f"‚ùå Failed to get prompt: {e}")
        return False

    # –ü—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    variables = {
        "position": "Test Position",
        "department": "Test Department",
        "employee_name": "Test Employee",
        "company_map": "Test company data",
        "org_structure": '{"test": "data"}',
        "kpi_data": "Test KPI",
        "it_systems": "Test IT",
        "json_schema": '{"type": "object"}',  # –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    }

    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    compiled_prompt = prompt.compile(**variables)
    messages = [{"role": "user", "content": compiled_prompt}]

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    model = prompt.config.get("model", "google/gemini-2.5-flash")
    temperature = prompt.config.get("temperature", 0.1)
    max_tokens = prompt.config.get("max_tokens", 1000)
    response_format = prompt.config.get("response_format")

    print(f"ü§ñ Making request to model: {model}")

    try:
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        response = client.client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
            response_format=response_format,
        )

        print(f"\nüìä RESPONSE STRUCTURE ANALYSIS:")
        print(f"Response type: {type(response)}")
        print(
            f"Response dir: {[attr for attr in dir(response) if not attr.startswith('_')]}"
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"\nüîç MAIN ATTRIBUTES:")
        if hasattr(response, "id"):
            print(f"  ID: {response.id}")
        if hasattr(response, "object"):
            print(f"  Object: {response.object}")
        if hasattr(response, "created"):
            print(f"  Created: {response.created}")
        if hasattr(response, "model"):
            print(f"  Model: {response.model}")
        if hasattr(response, "system_fingerprint"):
            print(f"  System fingerprint: {response.system_fingerprint}")

        # Usage information
        print(f"\nüí∞ USAGE & COST INFO:")
        if hasattr(response, "usage") and response.usage:
            usage = response.usage
            print(f"  Usage type: {type(usage)}")
            print(
                f"  Usage dir: {[attr for attr in dir(usage) if not attr.startswith('_')]}"
            )
            print(f"  Prompt tokens: {getattr(usage, 'prompt_tokens', 'N/A')}")
            print(f"  Completion tokens: {getattr(usage, 'completion_tokens', 'N/A')}")
            print(f"  Total tokens: {getattr(usage, 'total_tokens', 'N/A')}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cost –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (OpenRouter specific)
            if hasattr(usage, "cost"):
                print(f"  üí∞ Cost: ${usage.cost}")
            if hasattr(usage, "cost_details"):
                print(f"  üí∞ Cost details: {usage.cost_details}")
            if hasattr(usage, "prompt_cost"):
                print(f"  üí∞ Prompt cost: ${usage.prompt_cost}")
            if hasattr(usage, "completion_cost"):
                print(f"  üí∞ Completion cost: ${usage.completion_cost}")

            # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã usage
            usage_attrs = {}
            for attr in dir(usage):
                if not attr.startswith("_"):
                    try:
                        value = getattr(usage, attr)
                        if not callable(value):
                            usage_attrs[attr] = value
                    except:
                        pass
            print(
                f"  üìã All usage attributes: {json.dumps(usage_attrs, indent=2, default=str)}"
            )

        # Choices information
        print(f"\nüìù CHOICES INFO:")
        if hasattr(response, "choices") and response.choices:
            choice = response.choices[0]
            print(f"  Choice type: {type(choice)}")
            print(
                f"  Choice dir: {[attr for attr in dir(choice) if not attr.startswith('_')]}"
            )
            print(f"  Finish reason: {getattr(choice, 'finish_reason', 'N/A')}")
            print(f"  Index: {getattr(choice, 'index', 'N/A')}")
            if hasattr(choice, "message"):
                print(f"  Message role: {choice.message.role}")
                print(f"  Content length: {len(choice.message.content)} chars")
                print(f"  Content preview: {choice.message.content[:200]}...")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (OpenRouter specific)
        print(f"\nüåê OPENROUTER SPECIFIC:")
        all_attrs = {}
        for attr in dir(response):
            if not attr.startswith("_") and attr not in ["choices", "usage"]:
                try:
                    value = getattr(response, attr)
                    if not callable(value):
                        all_attrs[attr] = value
                except:
                    pass
        print(
            f"  üìã Additional attributes: {json.dumps(all_attrs, indent=2, default=str)}"
        )

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å raw response (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if hasattr(response, "_raw_response"):
            print(f"\nüîß RAW RESPONSE:")
            print(f"  Raw response type: {type(response._raw_response)}")

        return True

    except Exception as e:
        print(f"‚ùå Request failed: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting OpenRouter response exploration...")

    success = explore_openrouter_response()

    if success:
        print(f"\n‚úÖ SUCCESS! Analysis completed")
        print(f"üí° Use this information to enrich Langfuse metadata")
    else:
        print(f"\n‚ùå FAILED! Check the errors above")

    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
